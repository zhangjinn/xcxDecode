"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (t, e) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e(t.echarts = {});
}(undefined, function (t) {
  "use strict";
  function e(t) {
    var e = {},
        n = {},
        i = t.match(/Firefox\/([\d.]+)/),
        r = t.match(/MSIE\s([\d.]+)/) || t.match(/Trident\/.+?rv:(([\d.]+))/),
        a = t.match(/Edge\/([\d.]+)/),
        o = /micromessenger/i.test(t);return i && (n.firefox = !0, n.version = i[1]), r && (n.ie = !0, n.version = r[1]), a && (n.edge = !0, n.version = a[1]), o && (n.weChat = !0), { browser: n, os: e, node: !1, canvasSupported: !!document.createElement("canvas").getContext, svgSupported: "undefined" != typeof SVGRect, touchEventsSupported: "ontouchstart" in window && !n.ie && !n.edge, pointerEventsSupported: "onpointerdown" in window && (n.edge || n.ie && n.version >= 11), domSupported: "undefined" != typeof document };
  }function n(t, e) {
    "createCanvas" === t && (xp = null), mp[t] = e;
  }function i(t) {
    if (null == t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t))) return t;var e = t,
        n = hp.call(t);if ("[object Array]" === n) {
      if (!z(t)) {
        e = [];for (var r = 0, a = t.length; a > r; r++) {
          e[r] = i(t[r]);
        }
      }
    } else if (up[n]) {
      if (!z(t)) {
        var o = t.constructor;if (t.constructor.from) e = o.from(t);else {
          e = new o(t.length);for (var r = 0, a = t.length; a > r; r++) {
            e[r] = i(t[r]);
          }
        }
      }
    } else if (!lp[n] && !z(t) && !I(t)) {
      e = {};for (var s in t) {
        t.hasOwnProperty(s) && (e[s] = i(t[s]));
      }
    }return e;
  }function r(t, e, n) {
    if (!S(e) || !S(t)) return n ? i(e) : t;for (var a in e) {
      if (e.hasOwnProperty(a)) {
        var o = t[a],
            s = e[a];!S(s) || !S(o) || _(s) || _(o) || I(s) || I(o) || M(s) || M(o) || z(s) || z(o) ? !n && a in t || (t[a] = i(e[a], !0)) : r(o, s, n);
      }
    }return t;
  }function a(t, e) {
    for (var n = t[0], i = 1, a = t.length; a > i; i++) {
      n = r(n, t[i], e);
    }return n;
  }function o(t, e) {
    for (var n in e) {
      e.hasOwnProperty(n) && (t[n] = e[n]);
    }return t;
  }function s(t, e, n) {
    for (var i in e) {
      e.hasOwnProperty(i) && (n ? null != e[i] : null == t[i]) && (t[i] = e[i]);
    }return t;
  }function l() {
    return xp || (xp = yp().getContext("2d")), xp;
  }function u(t, e) {
    if (t) {
      if (t.indexOf) return t.indexOf(e);for (var n = 0, i = t.length; i > n; n++) {
        if (t[n] === e) return n;
      }
    }return -1;
  }function h(t, e) {
    function n() {}var i = t.prototype;n.prototype = e.prototype, t.prototype = new n();for (var r in i) {
      i.hasOwnProperty(r) && (t.prototype[r] = i[r]);
    }t.prototype.constructor = t, t.superClass = e;
  }function c(t, e, n) {
    t = "prototype" in t ? t.prototype : t, e = "prototype" in e ? e.prototype : e, s(t, e, n);
  }function d(t) {
    return t ? "string" == typeof t ? !1 : "number" == typeof t.length : void 0;
  }function f(t, e, n) {
    if (t && e) if (t.forEach && t.forEach === dp) t.forEach(e, n);else if (t.length === +t.length) for (var i = 0, r = t.length; r > i; i++) {
      e.call(n, t[i], i, t);
    } else for (var a in t) {
      t.hasOwnProperty(a) && e.call(n, t[a], a, t);
    }
  }function p(t, e, n) {
    if (t && e) {
      if (t.map && t.map === gp) return t.map(e, n);for (var i = [], r = 0, a = t.length; a > r; r++) {
        i.push(e.call(n, t[r], r, t));
      }return i;
    }
  }function g(t, e, n, i) {
    if (t && e) {
      if (t.reduce && t.reduce === vp) return t.reduce(e, n, i);for (var r = 0, a = t.length; a > r; r++) {
        n = e.call(i, n, t[r], r, t);
      }return n;
    }
  }function v(t, e, n) {
    if (t && e) {
      if (t.filter && t.filter === fp) return t.filter(e, n);for (var i = [], r = 0, a = t.length; a > r; r++) {
        e.call(n, t[r], r, t) && i.push(t[r]);
      }return i;
    }
  }function m(t, e, n) {
    if (t && e) for (var i = 0, r = t.length; r > i; i++) {
      if (e.call(n, t[i], i, t)) return t[i];
    }
  }function y(t, e) {
    var n = pp.call(arguments, 2);return function () {
      return t.apply(e, n.concat(pp.call(arguments)));
    };
  }function x(t) {
    var e = pp.call(arguments, 1);return function () {
      return t.apply(this, e.concat(pp.call(arguments)));
    };
  }function _(t) {
    return "[object Array]" === hp.call(t);
  }function w(t) {
    return "function" == typeof t;
  }function b(t) {
    return "[object String]" === hp.call(t);
  }function S(t) {
    var e = typeof t === "undefined" ? "undefined" : _typeof(t);return "function" === e || !!t && "object" === e;
  }function M(t) {
    return !!lp[hp.call(t)];
  }function A(t) {
    return !!up[hp.call(t)];
  }function I(t) {
    return "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && "number" == typeof t.nodeType && "object" == _typeof(t.ownerDocument);
  }function T(t) {
    return t !== t;
  }function C() {
    for (var t = 0, e = arguments.length; e > t; t++) {
      if (null != arguments[t]) return arguments[t];
    }
  }function D(t, e) {
    return null != t ? t : e;
  }function k(t, e, n) {
    return null != t ? t : null != e ? e : n;
  }function P() {
    return Function.call.apply(pp, arguments);
  }function L(t) {
    if ("number" == typeof t) return [t, t, t, t];var e = t.length;return 2 === e ? [t[0], t[1], t[0], t[1]] : 3 === e ? [t[0], t[1], t[2], t[1]] : t;
  }function O(t, e) {
    if (!t) throw new Error(e);
  }function E(t) {
    return null == t ? null : "function" == typeof t.trim ? t.trim() : t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  }function B(t) {
    t[_p] = !0;
  }function z(t) {
    return t[_p];
  }function R(t) {
    function e(t, e) {
      n ? i.set(t, e) : i.set(e, t);
    }var n = _(t);this.data = {};var i = this;t instanceof R ? t.each(e) : t && f(t, e);
  }function N(t) {
    return new R(t);
  }function F(t, e) {
    for (var n = new t.constructor(t.length + e.length), i = 0; i < t.length; i++) {
      n[i] = t[i];
    }var r = t.length;for (i = 0; i < e.length; i++) {
      n[i + r] = e[i];
    }return n;
  }function V() {}function H(t, e) {
    var n = new bp(2);return null == t && (t = 0), null == e && (e = 0), n[0] = t, n[1] = e, n;
  }function W(t, e) {
    return t[0] = e[0], t[1] = e[1], t;
  }function G(t) {
    var e = new bp(2);return e[0] = t[0], e[1] = t[1], e;
  }function X(t, e, n) {
    return t[0] = e, t[1] = n, t;
  }function U(t, e, n) {
    return t[0] = e[0] + n[0], t[1] = e[1] + n[1], t;
  }function Y(t, e, n, i) {
    return t[0] = e[0] + n[0] * i, t[1] = e[1] + n[1] * i, t;
  }function q(t, e, n) {
    return t[0] = e[0] - n[0], t[1] = e[1] - n[1], t;
  }function j(t) {
    return Math.sqrt(Z(t));
  }function Z(t) {
    return t[0] * t[0] + t[1] * t[1];
  }function K(t, e, n) {
    return t[0] = e[0] * n[0], t[1] = e[1] * n[1], t;
  }function $(t, e, n) {
    return t[0] = e[0] / n[0], t[1] = e[1] / n[1], t;
  }function Q(t, e) {
    return t[0] * e[0] + t[1] * e[1];
  }function J(t, e, n) {
    return t[0] = e[0] * n, t[1] = e[1] * n, t;
  }function te(t, e) {
    var n = j(e);return 0 === n ? (t[0] = 0, t[1] = 0) : (t[0] = e[0] / n, t[1] = e[1] / n), t;
  }function ee(t, e) {
    return Math.sqrt((t[0] - e[0]) * (t[0] - e[0]) + (t[1] - e[1]) * (t[1] - e[1]));
  }function ne(t, e) {
    return (t[0] - e[0]) * (t[0] - e[0]) + (t[1] - e[1]) * (t[1] - e[1]);
  }function ie(t, e) {
    return t[0] = -e[0], t[1] = -e[1], t;
  }function re(t, e, n, i) {
    return t[0] = e[0] + i * (n[0] - e[0]), t[1] = e[1] + i * (n[1] - e[1]), t;
  }function ae(t, e, n) {
    var i = e[0],
        r = e[1];return t[0] = n[0] * i + n[2] * r + n[4], t[1] = n[1] * i + n[3] * r + n[5], t;
  }function oe(t, e, n) {
    return t[0] = Math.min(e[0], n[0]), t[1] = Math.min(e[1], n[1]), t;
  }function se(t, e, n) {
    return t[0] = Math.max(e[0], n[0]), t[1] = Math.max(e[1], n[1]), t;
  }function le() {
    this.on("mousedown", this._dragStart, this), this.on("mousemove", this._drag, this), this.on("mouseup", this._dragEnd, this);
  }function ue(t, e) {
    return { target: t, topTarget: e && e.topTarget };
  }function he(t, e) {
    var n = t._$eventProcessor;return null != e && n && n.normalizeQuery && (e = n.normalizeQuery(e)), e;
  }function ce(t, e, n, i, r, a) {
    var o = t._$handlers;if ("function" == typeof n && (r = i, i = n, n = null), !i || !e) return t;n = he(t, n), o[e] || (o[e] = []);for (var s = 0; s < o[e].length; s++) {
      if (o[e][s].h === i) return t;
    }var l = { h: i, one: a, query: n, ctx: r || t, callAtLast: i.zrEventfulCallAtLast },
        u = o[e].length - 1,
        h = o[e][u];return h && h.callAtLast ? o[e].splice(u, 0, l) : o[e].push(l), t;
  }function de(t, e, n, i, r, a) {
    var o = i + "-" + r,
        s = t.length;if (a.hasOwnProperty(o)) return a[o];if (1 === e) {
      var l = Math.round(Math.log((1 << s) - 1 & ~r) / kp);return t[n][l];
    }for (var u = i | 1 << n, h = n + 1; i & 1 << h;) {
      h++;
    }for (var c = 0, d = 0, f = 0; s > d; d++) {
      var p = 1 << d;p & r || (c += (f % 2 ? -1 : 1) * t[n][d] * de(t, e - 1, h, u, r | p, a), f++);
    }return a[o] = c, c;
  }function fe(t, e) {
    var n = [[t[0], t[1], 1, 0, 0, 0, -e[0] * t[0], -e[0] * t[1]], [0, 0, 0, t[0], t[1], 1, -e[1] * t[0], -e[1] * t[1]], [t[2], t[3], 1, 0, 0, 0, -e[2] * t[2], -e[2] * t[3]], [0, 0, 0, t[2], t[3], 1, -e[3] * t[2], -e[3] * t[3]], [t[4], t[5], 1, 0, 0, 0, -e[4] * t[4], -e[4] * t[5]], [0, 0, 0, t[4], t[5], 1, -e[5] * t[4], -e[5] * t[5]], [t[6], t[7], 1, 0, 0, 0, -e[6] * t[6], -e[6] * t[7]], [0, 0, 0, t[6], t[7], 1, -e[7] * t[6], -e[7] * t[7]]],
        i = {},
        r = de(n, 8, 0, 0, 0, i);if (0 !== r) {
      for (var a = [], o = 0; 8 > o; o++) {
        for (var s = 0; 8 > s; s++) {
          null == a[s] && (a[s] = 0), a[s] += ((o + s) % 2 ? -1 : 1) * de(n, 7, 0 === o ? 1 : 0, 1 << o, 1 << s, i) / r * e[o];
        }
      }return function (t, e, n) {
        var i = e * a[6] + n * a[7] + 1;t[0] = (e * a[0] + n * a[1] + a[2]) / i, t[1] = (e * a[3] + n * a[4] + a[5]) / i;
      };
    }
  }function pe(t, e, n, i, r) {
    if (e.getBoundingClientRect && sp.domSupported && !me(e)) {
      var a = e[Pp] || (e[Pp] = {}),
          o = ge(e, a),
          s = ve(o, a, r);if (s) return s(t, n, i), !0;
    }return !1;
  }function ge(t, e) {
    var n = e.markers;if (n) return n;n = e.markers = [];for (var i = ["left", "right"], r = ["top", "bottom"], a = 0; 4 > a; a++) {
      var o = document.createElement("div"),
          s = o.style,
          l = a % 2,
          u = (a >> 1) % 2;s.cssText = ["position: absolute", "visibility: hidden", "padding: 0", "margin: 0", "border-width: 0", "user-select: none", "width:0", "height:0", i[l] + ":0", r[u] + ":0", i[1 - l] + ":auto", r[1 - u] + ":auto", ""].join("!important;"), t.appendChild(o), n.push(o);
    }return n;
  }function ve(t, e, n) {
    for (var i = n ? "invTrans" : "trans", r = e[i], a = e.srcCoords, o = !0, s = [], l = [], u = 0; 4 > u; u++) {
      var h = t[u].getBoundingClientRect(),
          c = 2 * u,
          d = h.left,
          f = h.top;s.push(d, f), o = o && a && d === a[c] && f === a[c + 1], l.push(t[u].offsetLeft, t[u].offsetTop);
    }return o && r ? r : (e.srcCoords = s, e[i] = n ? fe(l, s) : fe(s, l));
  }function me(t) {
    return "CANVAS" === t.nodeName.toUpperCase();
  }function ye(t, e, n, i) {
    return n = n || {}, i || !sp.canvasSupported ? xe(t, e, n) : sp.browser.firefox && null != e.layerX && e.layerX !== e.offsetX ? (n.zrX = e.layerX, n.zrY = e.layerY) : null != e.offsetX ? (n.zrX = e.offsetX, n.zrY = e.offsetY) : xe(t, e, n), n;
  }function xe(t, e, n) {
    if (sp.domSupported && t.getBoundingClientRect) {
      var i = e.clientX,
          r = e.clientY;if (me(t)) {
        var a = t.getBoundingClientRect();return n.zrX = i - a.left, void (n.zrY = r - a.top);
      }if (pe(Ep, t, i, r)) return n.zrX = Ep[0], void (n.zrY = Ep[1]);
    }n.zrX = n.zrY = 0;
  }function _e(t) {
    return t || window.event;
  }function we(t, e, n) {
    if (e = _e(e), null != e.zrX) return e;var i = e.type,
        r = i && i.indexOf("touch") >= 0;if (r) {
      var a = "touchend" !== i ? e.targetTouches[0] : e.changedTouches[0];a && ye(t, a, e, n);
    } else ye(t, e, e, n), e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;var o = e.button;return null == e.which && void 0 !== o && Op.test(e.type) && (e.which = 1 & o ? 1 : 2 & o ? 3 : 4 & o ? 2 : 0), e;
  }function be(t, e, n, i) {
    Lp ? t.addEventListener(e, n, i) : t.attachEvent("on" + e, n);
  }function Se(t, e, n, i) {
    Lp ? t.removeEventListener(e, n, i) : t.detachEvent("on" + e, n);
  }function Me(t) {
    var e = t[1][0] - t[0][0],
        n = t[1][1] - t[0][1];return Math.sqrt(e * e + n * n);
  }function Ae(t) {
    return [(t[0][0] + t[1][0]) / 2, (t[0][1] + t[1][1]) / 2];
  }function Ie(t, e, n) {
    return { type: t, event: n, target: e.target, topTarget: e.topTarget, cancelBubble: !1, offsetX: n.zrX, offsetY: n.zrY, gestureEvent: n.gestureEvent, pinchX: n.pinchX, pinchY: n.pinchY, pinchScale: n.pinchScale, wheelDelta: n.zrDelta, zrByTouch: n.zrByTouch, which: n.which, stop: Te };
  }function Te() {
    Bp(this.event);
  }function Ce() {}function De(t, e, n) {
    if (t[t.rectHover ? "rectContain" : "contain"](e, n)) {
      for (var i, r = t; r;) {
        if (r.clipPath && !r.clipPath.contain(e, n)) return !1;r.silent && (i = !0), r = r.parent;
      }return i ? Np : !0;
    }return !1;
  }function ke(t, e, n) {
    var i = t.painter;return 0 > e || e > i.getWidth() || 0 > n || n > i.getHeight();
  }function Pe() {
    var t = new Hp(6);return Le(t), t;
  }function Le(t) {
    return t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 1, t[4] = 0, t[5] = 0, t;
  }function Oe(t, e) {
    return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4], t[5] = e[5], t;
  }function Ee(t, e, n) {
    var i = e[0] * n[0] + e[2] * n[1],
        r = e[1] * n[0] + e[3] * n[1],
        a = e[0] * n[2] + e[2] * n[3],
        o = e[1] * n[2] + e[3] * n[3],
        s = e[0] * n[4] + e[2] * n[5] + e[4],
        l = e[1] * n[4] + e[3] * n[5] + e[5];return t[0] = i, t[1] = r, t[2] = a, t[3] = o, t[4] = s, t[5] = l, t;
  }function Be(t, e, n) {
    return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t[4] = e[4] + n[0], t[5] = e[5] + n[1], t;
  }function ze(t, e, n) {
    var i = e[0],
        r = e[2],
        a = e[4],
        o = e[1],
        s = e[3],
        l = e[5],
        u = Math.sin(n),
        h = Math.cos(n);return t[0] = i * h + o * u, t[1] = -i * u + o * h, t[2] = r * h + s * u, t[3] = -r * u + h * s, t[4] = h * a + u * l, t[5] = h * l - u * a, t;
  }function Re(t, e, n) {
    var i = n[0],
        r = n[1];return t[0] = e[0] * i, t[1] = e[1] * r, t[2] = e[2] * i, t[3] = e[3] * r, t[4] = e[4] * i, t[5] = e[5] * r, t;
  }function Ne(t, e) {
    var n = e[0],
        i = e[2],
        r = e[4],
        a = e[1],
        o = e[3],
        s = e[5],
        l = n * o - a * i;return l ? (l = 1 / l, t[0] = o * l, t[1] = -a * l, t[2] = -i * l, t[3] = n * l, t[4] = (i * s - o * r) * l, t[5] = (a * r - n * s) * l, t) : null;
  }function Fe(t) {
    var e = Pe();return Oe(e, t), e;
  }function Ve(t) {
    return t > Xp || -Xp > t;
  }function He(t) {
    this._target = t.target, this._life = t.life || 1e3, this._delay = t.delay || 0, this._initialized = !1, this.loop = null == t.loop ? !1 : t.loop, this.gap = t.gap || 0, this.easing = t.easing || "Linear", this.onframe = t.onframe, this.ondestroy = t.ondestroy, this.onrestart = t.onrestart, this._pausedTime = 0, this._paused = !1;
  }function We(t) {
    return t = Math.round(t), 0 > t ? 0 : t > 255 ? 255 : t;
  }function Ge(t) {
    return t = Math.round(t), 0 > t ? 0 : t > 360 ? 360 : t;
  }function Xe(t) {
    return 0 > t ? 0 : t > 1 ? 1 : t;
  }function Ue(t) {
    return We(t.length && "%" === t.charAt(t.length - 1) ? parseFloat(t) / 100 * 255 : parseInt(t, 10));
  }function Ye(t) {
    return Xe(t.length && "%" === t.charAt(t.length - 1) ? parseFloat(t) / 100 : parseFloat(t));
  }function qe(t, e, n) {
    return 0 > n ? n += 1 : n > 1 && (n -= 1), 1 > 6 * n ? t + (e - t) * n * 6 : 1 > 2 * n ? e : 2 > 3 * n ? t + (e - t) * (2 / 3 - n) * 6 : t;
  }function je(t, e, n) {
    return t + (e - t) * n;
  }function Ze(t, e, n, i, r) {
    return t[0] = e, t[1] = n, t[2] = i, t[3] = r, t;
  }function Ke(t, e) {
    return t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[3], t;
  }function $e(t, e) {
    rg && Ke(rg, e), rg = ig.put(t, rg || e.slice());
  }function Qe(t, e) {
    if (t) {
      e = e || [];var n = ig.get(t);if (n) return Ke(e, n);t += "";var i = t.replace(/ /g, "").toLowerCase();if (i in ng) return Ke(e, ng[i]), $e(t, e), e;if ("#" !== i.charAt(0)) {
        var r = i.indexOf("("),
            a = i.indexOf(")");if (-1 !== r && a + 1 === i.length) {
          var o = i.substr(0, r),
              s = i.substr(r + 1, a - (r + 1)).split(","),
              l = 1;switch (o) {case "rgba":
              if (4 !== s.length) return void Ze(e, 0, 0, 0, 1);l = Ye(s.pop());case "rgb":
              return 3 !== s.length ? void Ze(e, 0, 0, 0, 1) : (Ze(e, Ue(s[0]), Ue(s[1]), Ue(s[2]), l), $e(t, e), e);case "hsla":
              return 4 !== s.length ? void Ze(e, 0, 0, 0, 1) : (s[3] = Ye(s[3]), Je(s, e), $e(t, e), e);case "hsl":
              return 3 !== s.length ? void Ze(e, 0, 0, 0, 1) : (Je(s, e), $e(t, e), e);default:
              return;}
        }Ze(e, 0, 0, 0, 1);
      } else {
        if (4 === i.length) {
          var u = parseInt(i.substr(1), 16);return u >= 0 && 4095 >= u ? (Ze(e, (3840 & u) >> 4 | (3840 & u) >> 8, 240 & u | (240 & u) >> 4, 15 & u | (15 & u) << 4, 1), $e(t, e), e) : void Ze(e, 0, 0, 0, 1);
        }if (7 === i.length) {
          var u = parseInt(i.substr(1), 16);return u >= 0 && 16777215 >= u ? (Ze(e, (16711680 & u) >> 16, (65280 & u) >> 8, 255 & u, 1), $e(t, e), e) : void Ze(e, 0, 0, 0, 1);
        }
      }
    }
  }function Je(t, e) {
    var n = (parseFloat(t[0]) % 360 + 360) % 360 / 360,
        i = Ye(t[1]),
        r = Ye(t[2]),
        a = .5 >= r ? r * (i + 1) : r + i - r * i,
        o = 2 * r - a;return e = e || [], Ze(e, We(255 * qe(o, a, n + 1 / 3)), We(255 * qe(o, a, n)), We(255 * qe(o, a, n - 1 / 3)), 1), 4 === t.length && (e[3] = t[3]), e;
  }function tn(t) {
    if (t) {
      var e,
          n,
          i = t[0] / 255,
          r = t[1] / 255,
          a = t[2] / 255,
          o = Math.min(i, r, a),
          s = Math.max(i, r, a),
          l = s - o,
          u = (s + o) / 2;if (0 === l) e = 0, n = 0;else {
        n = .5 > u ? l / (s + o) : l / (2 - s - o);var h = ((s - i) / 6 + l / 2) / l,
            c = ((s - r) / 6 + l / 2) / l,
            d = ((s - a) / 6 + l / 2) / l;i === s ? e = d - c : r === s ? e = 1 / 3 + h - d : a === s && (e = 2 / 3 + c - h), 0 > e && (e += 1), e > 1 && (e -= 1);
      }var f = [360 * e, n, u];return null != t[3] && f.push(t[3]), f;
    }
  }function en(t, e) {
    var n = Qe(t);if (n) {
      for (var i = 0; 3 > i; i++) {
        n[i] = 0 > e ? n[i] * (1 - e) | 0 : (255 - n[i]) * e + n[i] | 0, n[i] > 255 ? n[i] = 255 : t[i] < 0 && (n[i] = 0);
      }return ln(n, 4 === n.length ? "rgba" : "rgb");
    }
  }function nn(t) {
    var e = Qe(t);return e ? ((1 << 24) + (e[0] << 16) + (e[1] << 8) + +e[2]).toString(16).slice(1) : void 0;
  }function rn(t, e, n) {
    if (e && e.length && t >= 0 && 1 >= t) {
      n = n || [];var i = t * (e.length - 1),
          r = Math.floor(i),
          a = Math.ceil(i),
          o = e[r],
          s = e[a],
          l = i - r;return n[0] = We(je(o[0], s[0], l)), n[1] = We(je(o[1], s[1], l)), n[2] = We(je(o[2], s[2], l)), n[3] = Xe(je(o[3], s[3], l)), n;
    }
  }function an(t, e, n) {
    if (e && e.length && t >= 0 && 1 >= t) {
      var i = t * (e.length - 1),
          r = Math.floor(i),
          a = Math.ceil(i),
          o = Qe(e[r]),
          s = Qe(e[a]),
          l = i - r,
          u = ln([We(je(o[0], s[0], l)), We(je(o[1], s[1], l)), We(je(o[2], s[2], l)), Xe(je(o[3], s[3], l))], "rgba");return n ? { color: u, leftIndex: r, rightIndex: a, value: i } : u;
    }
  }function on(t, e, n, i) {
    return t = Qe(t), t ? (t = tn(t), null != e && (t[0] = Ge(e)), null != n && (t[1] = Ye(n)), null != i && (t[2] = Ye(i)), ln(Je(t), "rgba")) : void 0;
  }function sn(t, e) {
    return t = Qe(t), t && null != e ? (t[3] = Xe(e), ln(t, "rgba")) : void 0;
  }function ln(t, e) {
    if (t && t.length) {
      var n = t[0] + "," + t[1] + "," + t[2];return ("rgba" === e || "hsva" === e || "hsla" === e) && (n += "," + t[3]), e + "(" + n + ")";
    }
  }function un(t, e) {
    return t[e];
  }function hn(t, e, n) {
    t[e] = n;
  }function cn(t, e, n) {
    return (e - t) * n + t;
  }function dn(t, e, n) {
    return n > .5 ? e : t;
  }function fn(t, e, n, i, r) {
    var a = t.length;if (1 === r) for (var o = 0; a > o; o++) {
      i[o] = cn(t[o], e[o], n);
    } else for (var s = a && t[0].length, o = 0; a > o; o++) {
      for (var l = 0; s > l; l++) {
        i[o][l] = cn(t[o][l], e[o][l], n);
      }
    }
  }function pn(t, e, n) {
    var i = t.length,
        r = e.length;if (i !== r) {
      var a = i > r;if (a) t.length = r;else for (var o = i; r > o; o++) {
        t.push(1 === n ? e[o] : lg.call(e[o]));
      }
    }for (var s = t[0] && t[0].length, o = 0; o < t.length; o++) {
      if (1 === n) isNaN(t[o]) && (t[o] = e[o]);else for (var l = 0; s > l; l++) {
        isNaN(t[o][l]) && (t[o][l] = e[o][l]);
      }
    }
  }function gn(t, e, n) {
    if (t === e) return !0;var i = t.length;if (i !== e.length) return !1;if (1 === n) {
      for (var r = 0; i > r; r++) {
        if (t[r] !== e[r]) return !1;
      }
    } else for (var a = t[0].length, r = 0; i > r; r++) {
      for (var o = 0; a > o; o++) {
        if (t[r][o] !== e[r][o]) return !1;
      }
    }return !0;
  }function vn(t, e, n, i, r, a, o, s, l) {
    var u = t.length;if (1 === l) for (var h = 0; u > h; h++) {
      s[h] = mn(t[h], e[h], n[h], i[h], r, a, o);
    } else for (var c = t[0].length, h = 0; u > h; h++) {
      for (var d = 0; c > d; d++) {
        s[h][d] = mn(t[h][d], e[h][d], n[h][d], i[h][d], r, a, o);
      }
    }
  }function mn(t, e, n, i, r, a, o) {
    var s = .5 * (n - t),
        l = .5 * (i - e);return (2 * (e - n) + s + l) * o + (-3 * (e - n) - 2 * s - l) * a + s * r + e;
  }function yn(t) {
    if (d(t)) {
      var e = t.length;if (d(t[0])) {
        for (var n = [], i = 0; e > i; i++) {
          n.push(lg.call(t[i]));
        }return n;
      }return lg.call(t);
    }return t;
  }function xn(t) {
    return t[0] = Math.floor(t[0]), t[1] = Math.floor(t[1]), t[2] = Math.floor(t[2]), "rgba(" + t.join(",") + ")";
  }function _n(t) {
    var e = t[t.length - 1].value;return d(e && e[0]) ? 2 : 1;
  }function wn(t, e, n, i, r, a) {
    var o = t._getter,
        s = t._setter,
        l = "spline" === e,
        u = i.length;if (u) {
      var h,
          c = i[0].value,
          f = d(c),
          p = !1,
          g = !1,
          v = f ? _n(i) : 0;i.sort(function (t, e) {
        return t.time - e.time;
      }), h = i[u - 1].time;for (var m = [], y = [], x = i[0].value, _ = !0, w = 0; u > w; w++) {
        m.push(i[w].time / h);var b = i[w].value;if (f && gn(b, x, v) || !f && b === x || (_ = !1), x = b, "string" == typeof b) {
          var S = Qe(b);S ? (b = S, p = !0) : g = !0;
        }y.push(b);
      }if (a || !_) {
        for (var M = y[u - 1], w = 0; u - 1 > w; w++) {
          f ? pn(y[w], M, v) : !isNaN(y[w]) || isNaN(M) || g || p || (y[w] = M);
        }f && pn(o(t._target, r), M, v);var A,
            I,
            T,
            C,
            D,
            k,
            P = 0,
            L = 0;if (p) var O = [0, 0, 0, 0];var E = function E(t, e) {
          var n;if (0 > e) n = 0;else if (L > e) {
            for (A = Math.min(P + 1, u - 1), n = A; n >= 0 && !(m[n] <= e); n--) {}n = Math.min(n, u - 2);
          } else {
            for (n = P; u > n && !(m[n] > e); n++) {}n = Math.min(n - 1, u - 2);
          }P = n, L = e;var i = m[n + 1] - m[n];if (0 !== i) if (I = (e - m[n]) / i, l) {
            if (C = y[n], T = y[0 === n ? n : n - 1], D = y[n > u - 2 ? u - 1 : n + 1], k = y[n > u - 3 ? u - 1 : n + 2], f) vn(T, C, D, k, I, I * I, I * I * I, o(t, r), v);else {
              var a;if (p) a = vn(T, C, D, k, I, I * I, I * I * I, O, 1), a = xn(O);else {
                if (g) return dn(C, D, I);a = mn(T, C, D, k, I, I * I, I * I * I);
              }s(t, r, a);
            }
          } else if (f) fn(y[n], y[n + 1], I, o(t, r), v);else {
            var a;if (p) fn(y[n], y[n + 1], I, O, 1), a = xn(O);else {
              if (g) return dn(y[n], y[n + 1], I);a = cn(y[n], y[n + 1], I);
            }s(t, r, a);
          }
        },
            B = new He({ target: t._target, life: h, loop: t._loop, delay: t._delay, onframe: E, ondestroy: n });return e && "spline" !== e && (B.easing = e), B;
      }
    }
  }function bn(t, e, n, i, r, a, o, s) {
    function l() {
      h--, h || a && a();
    }b(i) ? (a = r, r = i, i = 0) : w(r) ? (a = r, r = "linear", i = 0) : w(i) ? (a = i, i = 0) : w(n) ? (a = n, n = 500) : n || (n = 500), t.stopAnimation(), Sn(t, "", t, e, n, i, s);var u = t.animators.slice(),
        h = u.length;h || a && a();for (var c = 0; c < u.length; c++) {
      u[c].done(l).start(r, o);
    }
  }function Sn(t, e, n, i, r, a, o) {
    var s = {},
        l = 0;for (var u in i) {
      i.hasOwnProperty(u) && (null != n[u] ? S(i[u]) && !d(i[u]) ? Sn(t, e ? e + "." + u : u, n[u], i[u], r, a, o) : (o ? (s[u] = n[u], Mn(t, e, u, i[u])) : s[u] = i[u], l++) : null == i[u] || o || Mn(t, e, u, i[u]));
    }l > 0 && t.animate(e, !1).when(null == r ? 500 : r, s).delay(a || 0);
  }function Mn(t, e, n, i) {
    if (e) {
      var r = {};r[e] = {}, r[e][n] = i, t.attr(r);
    } else t.attr(n, i);
  }function An(t, e, n, i) {
    0 > n && (t += n, n = -n), 0 > i && (e += i, i = -i), this.x = t, this.y = e, this.width = n, this.height = i;
  }function In(t) {
    for (var e = 0; t >= wg;) {
      e |= 1 & t, t >>= 1;
    }return t + e;
  }function Tn(t, e, n, i) {
    var r = e + 1;if (r === n) return 1;if (i(t[r++], t[e]) < 0) {
      for (; n > r && i(t[r], t[r - 1]) < 0;) {
        r++;
      }Cn(t, e, r);
    } else for (; n > r && i(t[r], t[r - 1]) >= 0;) {
      r++;
    }return r - e;
  }function Cn(t, e, n) {
    for (n--; n > e;) {
      var i = t[e];t[e++] = t[n], t[n--] = i;
    }
  }function Dn(t, e, n, i, r) {
    for (i === e && i++; n > i; i++) {
      for (var a, o = t[i], s = e, l = i; l > s;) {
        a = s + l >>> 1, r(o, t[a]) < 0 ? l = a : s = a + 1;
      }var u = i - s;switch (u) {case 3:
          t[s + 3] = t[s + 2];case 2:
          t[s + 2] = t[s + 1];case 1:
          t[s + 1] = t[s];break;default:
          for (; u > 0;) {
            t[s + u] = t[s + u - 1], u--;
          }}t[s] = o;
    }
  }function kn(t, e, n, i, r, a) {
    var o = 0,
        s = 0,
        l = 1;if (a(t, e[n + r]) > 0) {
      for (s = i - r; s > l && a(t, e[n + r + l]) > 0;) {
        o = l, l = (l << 1) + 1, 0 >= l && (l = s);
      }l > s && (l = s), o += r, l += r;
    } else {
      for (s = r + 1; s > l && a(t, e[n + r - l]) <= 0;) {
        o = l, l = (l << 1) + 1, 0 >= l && (l = s);
      }l > s && (l = s);var u = o;o = r - l, l = r - u;
    }for (o++; l > o;) {
      var h = o + (l - o >>> 1);a(t, e[n + h]) > 0 ? o = h + 1 : l = h;
    }return l;
  }function Pn(t, e, n, i, r, a) {
    var o = 0,
        s = 0,
        l = 1;if (a(t, e[n + r]) < 0) {
      for (s = r + 1; s > l && a(t, e[n + r - l]) < 0;) {
        o = l, l = (l << 1) + 1, 0 >= l && (l = s);
      }l > s && (l = s);var u = o;o = r - l, l = r - u;
    } else {
      for (s = i - r; s > l && a(t, e[n + r + l]) >= 0;) {
        o = l, l = (l << 1) + 1, 0 >= l && (l = s);
      }l > s && (l = s), o += r, l += r;
    }for (o++; l > o;) {
      var h = o + (l - o >>> 1);a(t, e[n + h]) < 0 ? l = h : o = h + 1;
    }return l;
  }function Ln(t, e) {
    function n(t, e) {
      l[c] = t, u[c] = e, c += 1;
    }function i() {
      for (; c > 1;) {
        var t = c - 2;if (t >= 1 && u[t - 1] <= u[t] + u[t + 1] || t >= 2 && u[t - 2] <= u[t] + u[t - 1]) u[t - 1] < u[t + 1] && t--;else if (u[t] > u[t + 1]) break;a(t);
      }
    }function r() {
      for (; c > 1;) {
        var t = c - 2;t > 0 && u[t - 1] < u[t + 1] && t--, a(t);
      }
    }function a(n) {
      var i = l[n],
          r = u[n],
          a = l[n + 1],
          h = u[n + 1];u[n] = r + h, n === c - 3 && (l[n + 1] = l[n + 2], u[n + 1] = u[n + 2]), c--;var d = Pn(t[a], t, i, r, 0, e);i += d, r -= d, 0 !== r && (h = kn(t[i + r - 1], t, a, h, h - 1, e), 0 !== h && (h >= r ? o(i, r, a, h) : s(i, r, a, h)));
    }function o(n, i, r, a) {
      var o = 0;for (o = 0; i > o; o++) {
        d[o] = t[n + o];
      }var s = 0,
          l = r,
          u = n;if (t[u++] = t[l++], 0 !== --a) {
        if (1 === i) {
          for (o = 0; a > o; o++) {
            t[u + o] = t[l + o];
          }return void (t[u + a] = d[s]);
        }for (var c, f, p, g = h;;) {
          c = 0, f = 0, p = !1;do {
            if (e(t[l], d[s]) < 0) {
              if (t[u++] = t[l++], f++, c = 0, 0 === --a) {
                p = !0;break;
              }
            } else if (t[u++] = d[s++], c++, f = 0, 1 === --i) {
              p = !0;break;
            }
          } while (g > (c | f));if (p) break;do {
            if (c = Pn(t[l], d, s, i, 0, e), 0 !== c) {
              for (o = 0; c > o; o++) {
                t[u + o] = d[s + o];
              }if (u += c, s += c, i -= c, 1 >= i) {
                p = !0;break;
              }
            }if (t[u++] = t[l++], 0 === --a) {
              p = !0;break;
            }if (f = kn(d[s], t, l, a, 0, e), 0 !== f) {
              for (o = 0; f > o; o++) {
                t[u + o] = t[l + o];
              }if (u += f, l += f, a -= f, 0 === a) {
                p = !0;break;
              }
            }if (t[u++] = d[s++], 1 === --i) {
              p = !0;break;
            }g--;
          } while (c >= bg || f >= bg);if (p) break;0 > g && (g = 0), g += 2;
        }if (h = g, 1 > h && (h = 1), 1 === i) {
          for (o = 0; a > o; o++) {
            t[u + o] = t[l + o];
          }t[u + a] = d[s];
        } else {
          if (0 === i) throw new Error();for (o = 0; i > o; o++) {
            t[u + o] = d[s + o];
          }
        }
      } else for (o = 0; i > o; o++) {
        t[u + o] = d[s + o];
      }
    }function s(n, i, r, a) {
      var o = 0;for (o = 0; a > o; o++) {
        d[o] = t[r + o];
      }var s = n + i - 1,
          l = a - 1,
          u = r + a - 1,
          c = 0,
          f = 0;if (t[u--] = t[s--], 0 !== --i) {
        if (1 === a) {
          for (u -= i, s -= i, f = u + 1, c = s + 1, o = i - 1; o >= 0; o--) {
            t[f + o] = t[c + o];
          }return void (t[u] = d[l]);
        }for (var p = h;;) {
          var g = 0,
              v = 0,
              m = !1;do {
            if (e(d[l], t[s]) < 0) {
              if (t[u--] = t[s--], g++, v = 0, 0 === --i) {
                m = !0;break;
              }
            } else if (t[u--] = d[l--], v++, g = 0, 1 === --a) {
              m = !0;break;
            }
          } while (p > (g | v));if (m) break;do {
            if (g = i - Pn(d[l], t, n, i, i - 1, e), 0 !== g) {
              for (u -= g, s -= g, i -= g, f = u + 1, c = s + 1, o = g - 1; o >= 0; o--) {
                t[f + o] = t[c + o];
              }if (0 === i) {
                m = !0;break;
              }
            }if (t[u--] = d[l--], 1 === --a) {
              m = !0;break;
            }if (v = a - kn(t[s], d, 0, a, a - 1, e), 0 !== v) {
              for (u -= v, l -= v, a -= v, f = u + 1, c = l + 1, o = 0; v > o; o++) {
                t[f + o] = d[c + o];
              }if (1 >= a) {
                m = !0;break;
              }
            }if (t[u--] = t[s--], 0 === --i) {
              m = !0;break;
            }p--;
          } while (g >= bg || v >= bg);if (m) break;0 > p && (p = 0), p += 2;
        }if (h = p, 1 > h && (h = 1), 1 === a) {
          for (u -= i, s -= i, f = u + 1, c = s + 1, o = i - 1; o >= 0; o--) {
            t[f + o] = t[c + o];
          }t[u] = d[l];
        } else {
          if (0 === a) throw new Error();for (c = u - (a - 1), o = 0; a > o; o++) {
            t[c + o] = d[o];
          }
        }
      } else for (c = u - (a - 1), o = 0; a > o; o++) {
        t[c + o] = d[o];
      }
    }var l,
        u,
        h = bg,
        c = 0,
        d = [];l = [], u = [], this.mergeRuns = i, this.forceMergeRuns = r, this.pushRun = n;
  }function On(t, e, n, i) {
    n || (n = 0), i || (i = t.length);var r = i - n;if (!(2 > r)) {
      var a = 0;if (wg > r) return a = Tn(t, n, i, e), void Dn(t, n, i, n + a, e);var o = new Ln(t, e),
          s = In(r);do {
        if (a = Tn(t, n, i, e), s > a) {
          var l = r;l > s && (l = s), Dn(t, n, n + l, n + a, e), a = l;
        }o.pushRun(n, a), o.mergeRuns(), r -= a, n += a;
      } while (0 !== r);o.forceMergeRuns();
    }
  }function En(t, e) {
    return t.zlevel === e.zlevel ? t.z === e.z ? t.z2 - e.z2 : t.z - e.z : t.zlevel - e.zlevel;
  }function Bn(t, e, n) {
    var i = null == e.x ? 0 : e.x,
        r = null == e.x2 ? 1 : e.x2,
        a = null == e.y ? 0 : e.y,
        o = null == e.y2 ? 0 : e.y2;e.global || (i = i * n.width + n.x, r = r * n.width + n.x, a = a * n.height + n.y, o = o * n.height + n.y), i = isNaN(i) ? 0 : i, r = isNaN(r) ? 1 : r, a = isNaN(a) ? 0 : a, o = isNaN(o) ? 0 : o;var s = t.createLinearGradient(i, a, r, o);return s;
  }function zn(t, e, n) {
    var i = n.width,
        r = n.height,
        a = Math.min(i, r),
        o = null == e.x ? .5 : e.x,
        s = null == e.y ? .5 : e.y,
        l = null == e.r ? .5 : e.r;e.global || (o = o * i + n.x, s = s * r + n.y, l *= a);var u = t.createRadialGradient(o, s, 0, o, s, l);return u;
  }function Rn() {
    return !1;
  }function Nn(t, e, n) {
    var i = yp(),
        r = e.getWidth(),
        a = e.getHeight(),
        o = i.style;return o && (o.position = "absolute", o.left = 0, o.top = 0, o.width = r + "px", o.height = a + "px", i.setAttribute("data-zr-dom-id", t)), i.width = r * n, i.height = a * n, i;
  }function Fn(t) {
    if ("string" == typeof t) {
      var e = zg.get(t);return e && e.image;
    }return t;
  }function Vn(t, e, n, i, r) {
    if (t) {
      if ("string" == typeof t) {
        if (e && e.__zrImageSrc === t || !n) return e;var a = zg.get(t),
            o = { hostEl: n, cb: i, cbPayload: r };return a ? (e = a.image, !Wn(e) && a.pending.push(o)) : (e = new Image(), e.onload = e.onerror = Hn, zg.put(t, e.__cachedImgObj = { image: e, pending: [o] }), e.src = e.__zrImageSrc = t), e;
      }return t;
    }return e;
  }function Hn() {
    var t = this.__cachedImgObj;this.onload = this.onerror = this.__cachedImgObj = null;for (var e = 0; e < t.pending.length; e++) {
      var n = t.pending[e],
          i = n.cb;i && i(this, n.cbPayload), n.hostEl.dirty();
    }t.pending.length = 0;
  }function Wn(t) {
    return t && t.width && t.height;
  }function Gn(t, e) {
    e = e || Hg;var n = t + ":" + e;if (Rg[n]) return Rg[n];for (var i = (t + "").split("\n"), r = 0, a = 0, o = i.length; o > a; a++) {
      r = Math.max(ei(i[a], e).width, r);
    }return Ng > Fg && (Ng = 0, Rg = {}), Ng++, Rg[n] = r, r;
  }function Xn(t, e, n, i, r, a, o, s) {
    return o ? Yn(t, e, n, i, r, a, o, s) : Un(t, e, n, i, r, a, s);
  }function Un(t, e, n, i, r, a, o) {
    var s = ni(t, e, r, a, o),
        l = Gn(t, e);r && (l += r[1] + r[3]);var u = s.outerHeight,
        h = qn(0, l, n),
        c = jn(0, u, i),
        d = new An(h, c, l, u);return d.lineHeight = s.lineHeight, d;
  }function Yn(t, e, n, i, r, a, o, s) {
    var l = ii(t, { rich: o, truncate: s, font: e, textAlign: n, textPadding: r, textLineHeight: a }),
        u = l.outerWidth,
        h = l.outerHeight,
        c = qn(0, u, n),
        d = jn(0, h, i);return new An(c, d, u, h);
  }function qn(t, e, n) {
    return "right" === n ? t -= e : "center" === n && (t -= e / 2), t;
  }function jn(t, e, n) {
    return "middle" === n ? t -= e / 2 : "bottom" === n && (t -= e), t;
  }function Zn(t, e, n) {
    var i = e.textPosition,
        r = e.textDistance,
        a = n.x,
        o = n.y;r = r || 0;var s = n.height,
        l = n.width,
        u = s / 2,
        h = "left",
        c = "top";switch (i) {case "left":
        a -= r, o += u, h = "right", c = "middle";break;case "right":
        a += r + l, o += u, c = "middle";break;case "top":
        a += l / 2, o -= r, h = "center", c = "bottom";break;case "bottom":
        a += l / 2, o += s + r, h = "center";break;case "inside":
        a += l / 2, o += u, h = "center", c = "middle";break;case "insideLeft":
        a += r, o += u, c = "middle";break;case "insideRight":
        a += l - r, o += u, h = "right", c = "middle";break;case "insideTop":
        a += l / 2, o += r, h = "center";break;case "insideBottom":
        a += l / 2, o += s - r, h = "center", c = "bottom";break;case "insideTopLeft":
        a += r, o += r;break;case "insideTopRight":
        a += l - r, o += r, h = "right";break;case "insideBottomLeft":
        a += r, o += s - r, c = "bottom";break;case "insideBottomRight":
        a += l - r, o += s - r, h = "right", c = "bottom";}return t = t || {}, t.x = a, t.y = o, t.textAlign = h, t.textVerticalAlign = c, t;
  }function Kn(t, e, n, i, r) {
    if (!e) return "";var a = (t + "").split("\n");r = $n(e, n, i, r);for (var o = 0, s = a.length; s > o; o++) {
      a[o] = Qn(a[o], r);
    }return a.join("\n");
  }function $n(t, e, n, i) {
    i = o({}, i), i.font = e;var n = D(n, "...");i.maxIterations = D(i.maxIterations, 2);var r = i.minChar = D(i.minChar, 0);i.cnCharWidth = Gn("国", e);var a = i.ascCharWidth = Gn("a", e);i.placeholder = D(i.placeholder, "");for (var s = t = Math.max(0, t - 1), l = 0; r > l && s >= a; l++) {
      s -= a;
    }var u = Gn(n, e);return u > s && (n = "", u = 0), s = t - u, i.ellipsis = n, i.ellipsisWidth = u, i.contentWidth = s, i.containerWidth = t, i;
  }function Qn(t, e) {
    var n = e.containerWidth,
        i = e.font,
        r = e.contentWidth;if (!n) return "";var a = Gn(t, i);if (n >= a) return t;for (var o = 0;; o++) {
      if (r >= a || o >= e.maxIterations) {
        t += e.ellipsis;break;
      }var s = 0 === o ? Jn(t, r, e.ascCharWidth, e.cnCharWidth) : a > 0 ? Math.floor(t.length * r / a) : 0;t = t.substr(0, s), a = Gn(t, i);
    }return "" === t && (t = e.placeholder), t;
  }function Jn(t, e, n, i) {
    for (var r = 0, a = 0, o = t.length; o > a && e > r; a++) {
      var s = t.charCodeAt(a);r += s >= 0 && 127 >= s ? n : i;
    }return a;
  }function ti(t) {
    return Gn("国", t);
  }function ei(t, e) {
    return Wg.measureText(t, e);
  }function ni(t, e, n, i, r) {
    null != t && (t += "");var a = D(i, ti(e)),
        o = t ? t.split("\n") : [],
        s = o.length * a,
        l = s,
        u = !0;if (n && (l += n[0] + n[2]), t && r) {
      u = !1;var h = r.outerHeight,
          c = r.outerWidth;if (null != h && l > h) t = "", o = [];else if (null != c) for (var d = $n(c - (n ? n[1] + n[3] : 0), e, r.ellipsis, { minChar: r.minChar, placeholder: r.placeholder }), f = 0, p = o.length; p > f; f++) {
        o[f] = Qn(o[f], d);
      }
    }return { lines: o, height: s, outerHeight: l, lineHeight: a, canCacheByTextString: u };
  }function ii(t, e) {
    var n = { lines: [], width: 0, height: 0 };if (null != t && (t += ""), !t) return n;for (var i, r = Vg.lastIndex = 0; null != (i = Vg.exec(t));) {
      var a = i.index;a > r && ri(n, t.substring(r, a)), ri(n, i[2], i[1]), r = Vg.lastIndex;
    }r < t.length && ri(n, t.substring(r, t.length));var o = n.lines,
        s = 0,
        l = 0,
        u = [],
        h = e.textPadding,
        c = e.truncate,
        d = c && c.outerWidth,
        f = c && c.outerHeight;h && (null != d && (d -= h[1] + h[3]), null != f && (f -= h[0] + h[2]));for (var p = 0; p < o.length; p++) {
      for (var g = o[p], v = 0, m = 0, y = 0; y < g.tokens.length; y++) {
        var x = g.tokens[y],
            _ = x.styleName && e.rich[x.styleName] || {},
            w = x.textPadding = _.textPadding,
            b = x.font = _.font || e.font,
            S = x.textHeight = D(_.textHeight, ti(b));if (w && (S += w[0] + w[2]), x.height = S, x.lineHeight = k(_.textLineHeight, e.textLineHeight, S), x.textAlign = _ && _.textAlign || e.textAlign, x.textVerticalAlign = _ && _.textVerticalAlign || "middle", null != f && s + x.lineHeight > f) return { lines: [], width: 0, height: 0 };x.textWidth = Gn(x.text, b);var M = _.textWidth,
            A = null == M || "auto" === M;if ("string" == typeof M && "%" === M.charAt(M.length - 1)) x.percentWidth = M, u.push(x), M = 0;else {
          if (A) {
            M = x.textWidth;var I = _.textBackgroundColor,
                T = I && I.image;T && (T = Fn(T), Wn(T) && (M = Math.max(M, T.width * S / T.height)));
          }var C = w ? w[1] + w[3] : 0;M += C;var P = null != d ? d - m : null;null != P && M > P && (!A || C > P ? (x.text = "", x.textWidth = M = 0) : (x.text = Kn(x.text, P - C, b, c.ellipsis, { minChar: c.minChar }), x.textWidth = Gn(x.text, b), M = x.textWidth + C));
        }m += x.width = M, _ && (v = Math.max(v, x.lineHeight));
      }g.width = m, g.lineHeight = v, s += v, l = Math.max(l, m);
    }n.outerWidth = n.width = D(e.textWidth, l), n.outerHeight = n.height = D(e.textHeight, s), h && (n.outerWidth += h[1] + h[3], n.outerHeight += h[0] + h[2]);for (var p = 0; p < u.length; p++) {
      var x = u[p],
          L = x.percentWidth;x.width = parseInt(L, 10) / 100 * l;
    }return n;
  }function ri(t, e, n) {
    for (var i = "" === e, r = e.split("\n"), a = t.lines, o = 0; o < r.length; o++) {
      var s = r[o],
          l = { styleName: n, text: s, isLineHolder: !s && !i };if (o) a.push({ tokens: [l] });else {
        var u = (a[a.length - 1] || (a[0] = { tokens: [] })).tokens,
            h = u.length;1 === h && u[0].isLineHolder ? u[0] = l : (s || !h || i) && u.push(l);
      }
    }
  }function ai(t) {
    var e = (t.fontSize || t.fontFamily) && [t.fontStyle, t.fontWeight, (t.fontSize || 12) + "px", t.fontFamily || "sans-serif"].join(" ");return e && E(e) || t.textFont || t.font;
  }function oi(t, e) {
    var n,
        i,
        r,
        a,
        o = e.x,
        s = e.y,
        l = e.width,
        u = e.height,
        h = e.r;0 > l && (o += l, l = -l), 0 > u && (s += u, u = -u), "number" == typeof h ? n = i = r = a = h : h instanceof Array ? 1 === h.length ? n = i = r = a = h[0] : 2 === h.length ? (n = r = h[0], i = a = h[1]) : 3 === h.length ? (n = h[0], i = a = h[1], r = h[2]) : (n = h[0], i = h[1], r = h[2], a = h[3]) : n = i = r = a = 0;var c;n + i > l && (c = n + i, n *= l / c, i *= l / c), r + a > l && (c = r + a, r *= l / c, a *= l / c), i + r > u && (c = i + r, i *= u / c, r *= u / c), n + a > u && (c = n + a, n *= u / c, a *= u / c), t.moveTo(o + n, s), t.lineTo(o + l - i, s), 0 !== i && t.arc(o + l - i, s + i, i, -Math.PI / 2, 0), t.lineTo(o + l, s + u - r), 0 !== r && t.arc(o + l - r, s + u - r, r, 0, Math.PI / 2), t.lineTo(o + a, s + u), 0 !== a && t.arc(o + a, s + u - a, a, Math.PI / 2, Math.PI), t.lineTo(o, s + n), 0 !== n && t.arc(o + n, s + n, n, Math.PI, 1.5 * Math.PI);
  }function si(t) {
    return li(t), f(t.rich, li), t;
  }function li(t) {
    if (t) {
      t.font = ai(t);var e = t.textAlign;"middle" === e && (e = "center"), t.textAlign = null == e || Xg[e] ? e : "left";var n = t.textVerticalAlign || t.textBaseline;"center" === n && (n = "middle"), t.textVerticalAlign = null == n || Ug[n] ? n : "top";var i = t.textPadding;i && (t.textPadding = L(t.textPadding));
    }
  }function ui(t, e, n, i, r, a) {
    i.rich ? ci(t, e, n, i, r, a) : hi(t, e, n, i, r, a);
  }function hi(t, e, n, i, r, a) {
    var o,
        s = gi(i),
        l = !1,
        u = e.__attrCachedBy === Ig.PLAIN_TEXT;a !== Tg ? (a && (o = a.style, l = !s && u && o), e.__attrCachedBy = s ? Ig.NONE : Ig.PLAIN_TEXT) : u && (e.__attrCachedBy = Ig.NONE);var h = i.font || Gg;l && h === (o.font || Gg) || (e.font = h);var c = t.__computedFont;t.__styleFont !== h && (t.__styleFont = h, c = t.__computedFont = e.font);var d = i.textPadding,
        f = i.textLineHeight,
        p = t.__textCotentBlock;(!p || t.__dirtyText) && (p = t.__textCotentBlock = ni(n, c, d, f, i.truncate));var g = p.outerHeight,
        v = p.lines,
        m = p.lineHeight,
        y = yi(jg, t, i, r),
        x = y.baseX,
        _ = y.baseY,
        w = y.textAlign || "left",
        b = y.textVerticalAlign;fi(e, i, r, x, _);var S = jn(_, g, b),
        M = x,
        A = S;if (s || d) {
      var I = Gn(n, c),
          T = I;d && (T += d[1] + d[3]);var C = qn(x, T, w);s && vi(t, e, i, C, S, T, g), d && (M = Si(x, w, d), A += d[0]);
    }e.textAlign = w, e.textBaseline = "middle", e.globalAlpha = i.opacity || 1;for (var D = 0; D < Yg.length; D++) {
      var k = Yg[D],
          P = k[0],
          L = k[1],
          O = i[P];l && O === o[P] || (e[L] = Ag(e, L, O || k[2]));
    }A += m / 2;var E = i.textStrokeWidth,
        B = l ? o.textStrokeWidth : null,
        z = !l || E !== B,
        R = !l || z || i.textStroke !== o.textStroke,
        N = _i(i.textStroke, E),
        F = wi(i.textFill);if (N && (z && (e.lineWidth = E), R && (e.strokeStyle = N)), F && (l && i.textFill === o.textFill || (e.fillStyle = F)), 1 === v.length) N && e.strokeText(v[0], M, A), F && e.fillText(v[0], M, A);else for (var D = 0; D < v.length; D++) {
      N && e.strokeText(v[D], M, A), F && e.fillText(v[D], M, A), A += m;
    }
  }function ci(t, e, n, i, r, a) {
    a !== Tg && (e.__attrCachedBy = Ig.NONE);var o = t.__textCotentBlock;(!o || t.__dirtyText) && (o = t.__textCotentBlock = ii(n, i)), di(t, e, o, i, r);
  }function di(t, e, n, i, r) {
    var a = n.width,
        o = n.outerWidth,
        s = n.outerHeight,
        l = i.textPadding,
        u = yi(jg, t, i, r),
        h = u.baseX,
        c = u.baseY,
        d = u.textAlign,
        f = u.textVerticalAlign;fi(e, i, r, h, c);var p = qn(h, o, d),
        g = jn(c, s, f),
        v = p,
        m = g;l && (v += l[3], m += l[0]);var y = v + a;gi(i) && vi(t, e, i, p, g, o, s);for (var x = 0; x < n.lines.length; x++) {
      for (var _, w = n.lines[x], b = w.tokens, S = b.length, M = w.lineHeight, A = w.width, I = 0, T = v, C = y, D = S - 1; S > I && (_ = b[I], !_.textAlign || "left" === _.textAlign);) {
        pi(t, e, _, i, M, m, T, "left"), A -= _.width, T += _.width, I++;
      }for (; D >= 0 && (_ = b[D], "right" === _.textAlign);) {
        pi(t, e, _, i, M, m, C, "right"), A -= _.width, C -= _.width, D--;
      }for (T += (a - (T - v) - (y - C) - A) / 2; D >= I;) {
        _ = b[I], pi(t, e, _, i, M, m, T + _.width / 2, "center"), T += _.width, I++;
      }m += M;
    }
  }function fi(t, e, n, i, r) {
    if (n && e.textRotation) {
      var a = e.textOrigin;"center" === a ? (i = n.width / 2 + n.x, r = n.height / 2 + n.y) : a && (i = a[0] + n.x, r = a[1] + n.y), t.translate(i, r), t.rotate(-e.textRotation), t.translate(-i, -r);
    }
  }function pi(t, e, n, i, r, a, o, s) {
    var l = i.rich[n.styleName] || {};l.text = n.text;var u = n.textVerticalAlign,
        h = a + r / 2;"top" === u ? h = a + n.height / 2 : "bottom" === u && (h = a + r - n.height / 2), !n.isLineHolder && gi(l) && vi(t, e, l, "right" === s ? o - n.width : "center" === s ? o - n.width / 2 : o, h - n.height / 2, n.width, n.height);
    var c = n.textPadding;c && (o = Si(o, s, c), h -= n.height / 2 - c[2] - n.textHeight / 2), xi(e, "shadowBlur", k(l.textShadowBlur, i.textShadowBlur, 0)), xi(e, "shadowColor", l.textShadowColor || i.textShadowColor || "transparent"), xi(e, "shadowOffsetX", k(l.textShadowOffsetX, i.textShadowOffsetX, 0)), xi(e, "shadowOffsetY", k(l.textShadowOffsetY, i.textShadowOffsetY, 0)), xi(e, "textAlign", s), xi(e, "textBaseline", "middle"), xi(e, "font", n.font || Gg);var d = _i(l.textStroke || i.textStroke, p),
        f = wi(l.textFill || i.textFill),
        p = D(l.textStrokeWidth, i.textStrokeWidth);d && (xi(e, "lineWidth", p), xi(e, "strokeStyle", d), e.strokeText(n.text, o, h)), f && (xi(e, "fillStyle", f), e.fillText(n.text, o, h));
  }function gi(t) {
    return !!(t.textBackgroundColor || t.textBorderWidth && t.textBorderColor);
  }function vi(t, e, n, i, r, a, o) {
    var s = n.textBackgroundColor,
        l = n.textBorderWidth,
        u = n.textBorderColor,
        h = b(s);if (xi(e, "shadowBlur", n.textBoxShadowBlur || 0), xi(e, "shadowColor", n.textBoxShadowColor || "transparent"), xi(e, "shadowOffsetX", n.textBoxShadowOffsetX || 0), xi(e, "shadowOffsetY", n.textBoxShadowOffsetY || 0), h || l && u) {
      e.beginPath();var c = n.textBorderRadius;c ? oi(e, { x: i, y: r, width: a, height: o, r: c }) : e.rect(i, r, a, o), e.closePath();
    }if (h) {
      if (xi(e, "fillStyle", s), null != n.fillOpacity) {
        var d = e.globalAlpha;e.globalAlpha = n.fillOpacity * n.opacity, e.fill(), e.globalAlpha = d;
      } else e.fill();
    } else if (S(s)) {
      var f = s.image;f = Vn(f, null, t, mi, s), f && Wn(f) && e.drawImage(f, i, r, a, o);
    }if (l && u) if (xi(e, "lineWidth", l), xi(e, "strokeStyle", u), null != n.strokeOpacity) {
      var d = e.globalAlpha;e.globalAlpha = n.strokeOpacity * n.opacity, e.stroke(), e.globalAlpha = d;
    } else e.stroke();
  }function mi(t, e) {
    e.image = t;
  }function yi(t, e, n, i) {
    var r = n.x || 0,
        a = n.y || 0,
        o = n.textAlign,
        s = n.textVerticalAlign;if (i) {
      var l = n.textPosition;if (l instanceof Array) r = i.x + bi(l[0], i.width), a = i.y + bi(l[1], i.height);else {
        var u = e && e.calculateTextPosition ? e.calculateTextPosition(qg, n, i) : Zn(qg, n, i);r = u.x, a = u.y, o = o || u.textAlign, s = s || u.textVerticalAlign;
      }var h = n.textOffset;h && (r += h[0], a += h[1]);
    }return t = t || {}, t.baseX = r, t.baseY = a, t.textAlign = o, t.textVerticalAlign = s, t;
  }function xi(t, e, n) {
    return t[e] = Ag(t, e, n), t[e];
  }function _i(t, e) {
    return null == t || 0 >= e || "transparent" === t || "none" === t ? null : t.image || t.colorStops ? "#000" : t;
  }function wi(t) {
    return null == t || "none" === t ? null : t.image || t.colorStops ? "#000" : t;
  }function bi(t, e) {
    return "string" == typeof t ? t.lastIndexOf("%") >= 0 ? parseFloat(t) / 100 * e : parseFloat(t) : t;
  }function Si(t, e, n) {
    return "right" === e ? t - n[1] : "center" === e ? t + n[3] / 2 - n[1] / 2 : t + n[3];
  }function Mi(t, e) {
    return null != t && (t || e.textBackgroundColor || e.textBorderWidth && e.textBorderColor || e.textPadding);
  }function Ai(t) {
    t = t || {}, vg.call(this, t);for (var e in t) {
      t.hasOwnProperty(e) && "style" !== e && (this[e] = t[e]);
    }this.style = new Dg(t.style, this), this._rect = null, this.__clipPaths = null;
  }function Ii(t) {
    Ai.call(this, t);
  }function Ti(t) {
    return parseInt(t, 10);
  }function Ci(t) {
    return t ? t.__builtin__ ? !0 : "function" != typeof t.resize || "function" != typeof t.refresh ? !1 : !0 : !1;
  }function Di(t, e, n) {
    return ev.copy(t.getBoundingRect()), t.transform && ev.applyTransform(t.transform), nv.width = e, nv.height = n, !ev.intersect(nv);
  }function ki(t, e) {
    if (t === e) return !1;if (!t || !e || t.length !== e.length) return !0;for (var n = 0; n < t.length; n++) {
      if (t[n] !== e[n]) return !0;
    }return !1;
  }function Pi(t, e) {
    for (var n = 0; n < t.length; n++) {
      var i = t[n];i.setTransform(e), e.beginPath(), i.buildPath(e, i.shape), e.clip(), i.restoreTransform(e);
    }
  }function Li(t, e) {
    var n = document.createElement("div");return n.style.cssText = ["position:relative", "width:" + t + "px", "height:" + e + "px", "padding:0", "margin:0", "border-width:0"].join(";") + ";", n;
  }function Oi(t) {
    return "mousewheel" === t && sp.browser.firefox ? "DOMMouseScroll" : t;
  }function Ei(t) {
    var e = t.pointerType;return "pen" === e || "touch" === e;
  }function Bi(t) {
    t.touching = !0, null != t.touchTimer && (clearTimeout(t.touchTimer), t.touchTimer = null), t.touchTimer = setTimeout(function () {
      t.touching = !1, t.touchTimer = null;
    }, 700);
  }function zi(t) {
    t && (t.zrByTouch = !0);
  }function Ri(t, e) {
    return we(t.dom, new Fi(t, e), !0);
  }function Ni(t, e) {
    for (var n = e, i = !1; n && 9 !== n.nodeType && !(i = n.domBelongToZr || n !== e && n === t.painterRoot);) {
      n = n.parentNode;
    }return i;
  }function Fi(t, e) {
    this.type = e.type, this.target = this.currentTarget = t.dom, this.pointerType = e.pointerType, this.clientX = e.clientX, this.clientY = e.clientY;
  }function Vi(t, e) {
    var n = e.domHandlers;sp.pointerEventsSupported ? f(sv.pointer, function (i) {
      Wi(e, i, function (e) {
        n[i].call(t, e);
      });
    }) : (sp.touchEventsSupported && f(sv.touch, function (i) {
      Wi(e, i, function (r) {
        n[i].call(t, r), Bi(e);
      });
    }), f(sv.mouse, function (i) {
      Wi(e, i, function (r) {
        r = _e(r), e.touching || n[i].call(t, r);
      });
    }));
  }function Hi(t, e) {
    function n(n) {
      function i(i) {
        i = _e(i), Ni(t, i.target) || (i = Ri(t, i), e.domHandlers[n].call(t, i));
      }Wi(e, n, i, { capture: !0 });
    }sp.pointerEventsSupported ? f(lv.pointer, n) : sp.touchEventsSupported || f(lv.mouse, n);
  }function Wi(t, e, n, i) {
    t.mounted[e] = n, t.listenerOpts[e] = i, be(t.domTarget, Oi(e), n, i);
  }function Gi(t) {
    var e = t.mounted;for (var n in e) {
      e.hasOwnProperty(n) && Se(t.domTarget, Oi(n), e[n], t.listenerOpts[n]);
    }t.mounted = {};
  }function Xi(t, e) {
    if (t._mayPointerCapture = null, ov && t._pointerCapturing ^ e) {
      t._pointerCapturing = e;var n = t._globalHandlerScope;e ? Hi(t, n) : Gi(n);
    }
  }function Ui(t, e) {
    this.domTarget = t, this.domHandlers = e, this.mounted = {}, this.listenerOpts = {}, this.touchTimer = null, this.touching = !1;
  }function Yi(t, e) {
    Dp.call(this), this.dom = t, this.painterRoot = e, this._localHandlerScope = new Ui(t, hv), ov && (this._globalHandlerScope = new Ui(document, cv)), this._pointerCapturing = !1, this._mayPointerCapture = null, Vi(this, this._localHandlerScope);
  }function qi(t, e) {
    var n = new mv(ap(), t, e);return gv[n.id] = n, n;
  }function ji(t) {
    if (t) t.dispose();else {
      for (var e in gv) {
        gv.hasOwnProperty(e) && gv[e].dispose();
      }gv = {};
    }return this;
  }function Zi(t) {
    return gv[t];
  }function Ki(t, e) {
    pv[t] = e;
  }function $i(t) {
    delete gv[t];
  }function Qi(t) {
    return t instanceof Array ? t : null == t ? [] : [t];
  }function Ji(t, e, n) {
    if (t) {
      t[e] = t[e] || {}, t.emphasis = t.emphasis || {}, t.emphasis[e] = t.emphasis[e] || {};for (var i = 0, r = n.length; r > i; i++) {
        var a = n[i];!t.emphasis[e].hasOwnProperty(a) && t[e].hasOwnProperty(a) && (t.emphasis[e][a] = t[e][a]);
      }
    }
  }function tr(t) {
    return !_v(t) || wv(t) || t instanceof Date ? t : t.value;
  }function er(t) {
    return _v(t) && !(t instanceof Array);
  }function nr(t, e) {
    e = (e || []).slice();var n = p(t || [], function (t) {
      return { exist: t };
    });return xv(e, function (t, i) {
      if (_v(t)) {
        for (var r = 0; r < n.length; r++) {
          if (!n[r].option && null != t.id && n[r].exist.id === t.id + "") return n[r].option = t, void (e[i] = null);
        }for (var r = 0; r < n.length; r++) {
          var a = n[r].exist;if (!(n[r].option || null != a.id && null != t.id || null == t.name || ar(t) || ar(a) || a.name !== t.name + "")) return n[r].option = t, void (e[i] = null);
        }
      }
    }), xv(e, function (t) {
      if (_v(t)) {
        for (var e = 0; e < n.length; e++) {
          var i = n[e].exist;if (!n[e].option && !ar(i) && null == t.id) {
            n[e].option = t;break;
          }
        }e >= n.length && n.push({ option: t });
      }
    }), n;
  }function ir(t) {
    var e = N();xv(t, function (t) {
      var n = t.exist;n && e.set(n.id, t);
    }), xv(t, function (t) {
      var n = t.option;O(!n || null == n.id || !e.get(n.id) || e.get(n.id) === t, "id duplicates: " + (n && n.id)), n && null != n.id && e.set(n.id, t), !t.keyInfo && (t.keyInfo = {});
    }), xv(t, function (t, n) {
      var i = t.exist,
          r = t.option,
          a = t.keyInfo;if (_v(r)) {
        if (a.name = null != r.name ? r.name + "" : i ? i.name : bv + n, i) a.id = i.id;else if (null != r.id) a.id = r.id + "";else {
          var o = 0;do {
            a.id = "\x00" + a.name + "\x00" + o++;
          } while (e.get(a.id));
        }e.set(a.id, t);
      }
    });
  }function rr(t) {
    var e = t.name;return !(!e || !e.indexOf(bv));
  }function ar(t) {
    return _v(t) && t.id && 0 === (t.id + "").indexOf("\x00_ec_\x00");
  }function or(t, e) {
    return null != e.dataIndexInside ? e.dataIndexInside : null != e.dataIndex ? _(e.dataIndex) ? p(e.dataIndex, function (e) {
      return t.indexOfRawIndex(e);
    }) : t.indexOfRawIndex(e.dataIndex) : null != e.name ? _(e.name) ? p(e.name, function (e) {
      return t.indexOfName(e);
    }) : t.indexOfName(e.name) : void 0;
  }function sr() {
    var t = "__\x00ec_inner_" + Mv++ + "_" + Math.random().toFixed(5);return function (e) {
      return e[t] || (e[t] = {});
    };
  }function lr(t, e, n) {
    if (b(e)) {
      var i = {};i[e + "Index"] = 0, e = i;
    }var r = n && n.defaultMainType;!r || ur(e, r + "Index") || ur(e, r + "Id") || ur(e, r + "Name") || (e[r + "Index"] = 0);var a = {};return xv(e, function (i, r) {
      var i = e[r];if ("dataIndex" === r || "dataIndexInside" === r) return void (a[r] = i);var o = r.match(/^(\w+)(Index|Id|Name)$/) || [],
          s = o[1],
          l = (o[2] || "").toLowerCase();if (!(!s || !l || null == i || "index" === l && "none" === i || n && n.includeMainTypes && u(n.includeMainTypes, s) < 0)) {
        var h = { mainType: s };("index" !== l || "all" !== i) && (h[l] = i);var c = t.queryComponents(h);a[s + "Models"] = c, a[s + "Model"] = c[0];
      }
    }), a;
  }function ur(t, e) {
    return t && t.hasOwnProperty(e);
  }function hr(t, e, n) {
    t.setAttribute ? t.setAttribute(e, n) : t[e] = n;
  }function cr(t, e) {
    return t.getAttribute ? t.getAttribute(e) : t[e];
  }function dr(t) {
    return "auto" === t ? sp.domSupported ? "html" : "richText" : t || "html";
  }function fr(t) {
    var e = { main: "", sub: "" };return t && (t = t.split(Av), e.main = t[0] || "", e.sub = t[1] || ""), e;
  }function pr(t) {
    O(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(t), 'componentType "' + t + '" illegal');
  }function gr(t, e) {
    t.$constructor = t, t.extend = function (t) {
      ip && f(e, function (e) {
        t[e] || console.warn("Method `" + e + "` should be implemented" + (t.type ? " in " + t.type : "") + ".");
      });var n = this,
          i = function i() {
        t.$constructor ? t.$constructor.apply(this, arguments) : n.apply(this, arguments);
      };return o(i.prototype, t), i.extend = this.extend, i.superCall = mr, i.superApply = yr, h(i, this), i.superClass = n, i;
    };
  }function vr(t) {
    var e = ["__\x00is_clz", Tv++, Math.random().toFixed(3)].join("_");t.prototype[e] = !0, ip && O(!t.isInstance, 'The method "is" can not be defined.'), t.isInstance = function (t) {
      return !(!t || !t[e]);
    };
  }function mr(t, e) {
    var n = P(arguments, 2);return this.superClass.prototype[e].apply(t, n);
  }function yr(t, e, n) {
    return this.superClass.prototype[e].apply(t, n);
  }function xr(t, e) {
    function n(t) {
      var e = i[t.main];return e && e[Iv] || (e = i[t.main] = {}, e[Iv] = !0), e;
    }e = e || {};var i = {};if (t.registerClass = function (t, e) {
      if (e) if (pr(e), e = fr(e), e.sub) {
        if (e.sub !== Iv) {
          var r = n(e);r[e.sub] = t;
        }
      } else ip && i[e.main] && console.warn(e.main + " exists."), i[e.main] = t;return t;
    }, t.getClass = function (t, e, n) {
      var r = i[t];if (r && r[Iv] && (r = e ? r[e] : null), n && !r) throw new Error(e ? "Component " + t + "." + (e || "") + " not exists. Load it first." : t + ".type should be specified.");return r;
    }, t.getClassesByMainType = function (t) {
      t = fr(t);var e = [],
          n = i[t.main];return n && n[Iv] ? f(n, function (t, n) {
        n !== Iv && e.push(t);
      }) : e.push(n), e;
    }, t.hasClass = function (t) {
      return t = fr(t), !!i[t.main];
    }, t.getAllClassMainTypes = function () {
      var t = [];return f(i, function (e, n) {
        t.push(n);
      }), t;
    }, t.hasSubTypes = function (t) {
      t = fr(t);var e = i[t.main];return e && e[Iv];
    }, t.parseClassType = fr, e.registerWhenExtend) {
      var r = t.extend;r && (t.extend = function (e) {
        var n = r.call(this, e);return t.registerClass(n, e.type);
      });
    }return t;
  }function _r(t) {
    return t > -Bv && Bv > t;
  }function wr(t) {
    return t > Bv || -Bv > t;
  }function br(t, e, n, i, r) {
    var a = 1 - r;return a * a * (a * t + 3 * r * e) + r * r * (r * i + 3 * a * n);
  }function Sr(t, e, n, i, r) {
    var a = 1 - r;return 3 * (((e - t) * a + 2 * (n - e) * r) * a + (i - n) * r * r);
  }function Mr(t, e, n, i, r, a) {
    var o = i + 3 * (e - n) - t,
        s = 3 * (n - 2 * e + t),
        l = 3 * (e - t),
        u = t - r,
        h = s * s - 3 * o * l,
        c = s * l - 9 * o * u,
        d = l * l - 3 * s * u,
        f = 0;if (_r(h) && _r(c)) {
      if (_r(s)) a[0] = 0;else {
        var p = -l / s;p >= 0 && 1 >= p && (a[f++] = p);
      }
    } else {
      var g = c * c - 4 * h * d;if (_r(g)) {
        var v = c / h,
            p = -s / o + v,
            m = -v / 2;p >= 0 && 1 >= p && (a[f++] = p), m >= 0 && 1 >= m && (a[f++] = m);
      } else if (g > 0) {
        var y = Ev(g),
            x = h * s + 1.5 * o * (-c + y),
            _ = h * s + 1.5 * o * (-c - y);x = 0 > x ? -Ov(-x, Nv) : Ov(x, Nv), _ = 0 > _ ? -Ov(-_, Nv) : Ov(_, Nv);var p = (-s - (x + _)) / (3 * o);p >= 0 && 1 >= p && (a[f++] = p);
      } else {
        var w = (2 * h * s - 3 * o * c) / (2 * Ev(h * h * h)),
            b = Math.acos(w) / 3,
            S = Ev(h),
            M = Math.cos(b),
            p = (-s - 2 * S * M) / (3 * o),
            m = (-s + S * (M + Rv * Math.sin(b))) / (3 * o),
            A = (-s + S * (M - Rv * Math.sin(b))) / (3 * o);p >= 0 && 1 >= p && (a[f++] = p), m >= 0 && 1 >= m && (a[f++] = m), A >= 0 && 1 >= A && (a[f++] = A);
      }
    }return f;
  }function Ar(t, e, n, i, r) {
    var a = 6 * n - 12 * e + 6 * t,
        o = 9 * e + 3 * i - 3 * t - 9 * n,
        s = 3 * e - 3 * t,
        l = 0;if (_r(o)) {
      if (wr(a)) {
        var u = -s / a;u >= 0 && 1 >= u && (r[l++] = u);
      }
    } else {
      var h = a * a - 4 * o * s;if (_r(h)) r[0] = -a / (2 * o);else if (h > 0) {
        var c = Ev(h),
            u = (-a + c) / (2 * o),
            d = (-a - c) / (2 * o);u >= 0 && 1 >= u && (r[l++] = u), d >= 0 && 1 >= d && (r[l++] = d);
      }
    }return l;
  }function Ir(t, e, n, i, r, a) {
    var o = (e - t) * r + t,
        s = (n - e) * r + e,
        l = (i - n) * r + n,
        u = (s - o) * r + o,
        h = (l - s) * r + s,
        c = (h - u) * r + u;a[0] = t, a[1] = o, a[2] = u, a[3] = c, a[4] = c, a[5] = h, a[6] = l, a[7] = i;
  }function Tr(t, e, n, i, r, a, o, s, l, u, h) {
    var c,
        d,
        f,
        p,
        g,
        v = .005,
        m = 1 / 0;Fv[0] = l, Fv[1] = u;for (var y = 0; 1 > y; y += .05) {
      Vv[0] = br(t, n, r, o, y), Vv[1] = br(e, i, a, s, y), p = Ip(Fv, Vv), m > p && (c = y, m = p);
    }m = 1 / 0;for (var x = 0; 32 > x && !(zv > v); x++) {
      d = c - v, f = c + v, Vv[0] = br(t, n, r, o, d), Vv[1] = br(e, i, a, s, d), p = Ip(Vv, Fv), d >= 0 && m > p ? (c = d, m = p) : (Hv[0] = br(t, n, r, o, f), Hv[1] = br(e, i, a, s, f), g = Ip(Hv, Fv), 1 >= f && m > g ? (c = f, m = g) : v *= .5);
    }return h && (h[0] = br(t, n, r, o, c), h[1] = br(e, i, a, s, c)), Ev(m);
  }function Cr(t, e, n, i) {
    var r = 1 - i;return r * (r * t + 2 * i * e) + i * i * n;
  }function Dr(t, e, n, i) {
    return 2 * ((1 - i) * (e - t) + i * (n - e));
  }function kr(t, e, n, i, r) {
    var a = t - 2 * e + n,
        o = 2 * (e - t),
        s = t - i,
        l = 0;if (_r(a)) {
      if (wr(o)) {
        var u = -s / o;u >= 0 && 1 >= u && (r[l++] = u);
      }
    } else {
      var h = o * o - 4 * a * s;if (_r(h)) {
        var u = -o / (2 * a);u >= 0 && 1 >= u && (r[l++] = u);
      } else if (h > 0) {
        var c = Ev(h),
            u = (-o + c) / (2 * a),
            d = (-o - c) / (2 * a);u >= 0 && 1 >= u && (r[l++] = u), d >= 0 && 1 >= d && (r[l++] = d);
      }
    }return l;
  }function Pr(t, e, n) {
    var i = t + n - 2 * e;return 0 === i ? .5 : (t - e) / i;
  }function Lr(t, e, n, i, r) {
    var a = (e - t) * i + t,
        o = (n - e) * i + e,
        s = (o - a) * i + a;r[0] = t, r[1] = a, r[2] = s, r[3] = s, r[4] = o, r[5] = n;
  }function Or(t, e, n, i, r, a, o, s, l) {
    var u,
        h = .005,
        c = 1 / 0;Fv[0] = o, Fv[1] = s;for (var d = 0; 1 > d; d += .05) {
      Vv[0] = Cr(t, n, r, d), Vv[1] = Cr(e, i, a, d);var f = Ip(Fv, Vv);c > f && (u = d, c = f);
    }c = 1 / 0;for (var p = 0; 32 > p && !(zv > h); p++) {
      var g = u - h,
          v = u + h;Vv[0] = Cr(t, n, r, g), Vv[1] = Cr(e, i, a, g);var f = Ip(Vv, Fv);if (g >= 0 && c > f) u = g, c = f;else {
        Hv[0] = Cr(t, n, r, v), Hv[1] = Cr(e, i, a, v);var m = Ip(Hv, Fv);1 >= v && c > m ? (u = v, c = m) : h *= .5;
      }
    }return l && (l[0] = Cr(t, n, r, u), l[1] = Cr(e, i, a, u)), Ev(c);
  }function Er(t, e, n) {
    if (0 !== t.length) {
      var i,
          r = t[0],
          a = r[0],
          o = r[0],
          s = r[1],
          l = r[1];for (i = 1; i < t.length; i++) {
        r = t[i], a = Wv(a, r[0]), o = Gv(o, r[0]), s = Wv(s, r[1]), l = Gv(l, r[1]);
      }e[0] = a, e[1] = s, n[0] = o, n[1] = l;
    }
  }function Br(t, e, n, i, r, a) {
    r[0] = Wv(t, n), r[1] = Wv(e, i), a[0] = Gv(t, n), a[1] = Gv(e, i);
  }function zr(t, e, n, i, r, a, o, s, l, u) {
    var h,
        c = Ar,
        d = br,
        f = c(t, n, r, o, Kv);for (l[0] = 1 / 0, l[1] = 1 / 0, u[0] = -1 / 0, u[1] = -1 / 0, h = 0; f > h; h++) {
      var p = d(t, n, r, o, Kv[h]);l[0] = Wv(p, l[0]), u[0] = Gv(p, u[0]);
    }for (f = c(e, i, a, s, $v), h = 0; f > h; h++) {
      var g = d(e, i, a, s, $v[h]);l[1] = Wv(g, l[1]), u[1] = Gv(g, u[1]);
    }l[0] = Wv(t, l[0]), u[0] = Gv(t, u[0]), l[0] = Wv(o, l[0]), u[0] = Gv(o, u[0]), l[1] = Wv(e, l[1]), u[1] = Gv(e, u[1]), l[1] = Wv(s, l[1]), u[1] = Gv(s, u[1]);
  }function Rr(t, e, n, i, r, a, o, s) {
    var l = Pr,
        u = Cr,
        h = Gv(Wv(l(t, n, r), 1), 0),
        c = Gv(Wv(l(e, i, a), 1), 0),
        d = u(t, n, r, h),
        f = u(e, i, a, c);o[0] = Wv(t, r, d), o[1] = Wv(e, a, f), s[0] = Gv(t, r, d), s[1] = Gv(e, a, f);
  }function Nr(t, e, n, i, r, a, o, s, l) {
    var u = oe,
        h = se,
        c = Math.abs(r - a);if (1e-4 > c % Yv && c > 1e-4) return s[0] = t - n, s[1] = e - i, l[0] = t + n, void (l[1] = e + i);if (qv[0] = Uv(r) * n + t, qv[1] = Xv(r) * i + e, jv[0] = Uv(a) * n + t, jv[1] = Xv(a) * i + e, u(s, qv, jv), h(l, qv, jv), r %= Yv, 0 > r && (r += Yv), a %= Yv, 0 > a && (a += Yv), r > a && !o ? a += Yv : a > r && o && (r += Yv), o) {
      var d = a;a = r, r = d;
    }for (var f = 0; a > f; f += Math.PI / 2) {
      f > r && (Zv[0] = Uv(f) * n + t, Zv[1] = Xv(f) * i + e, u(s, Zv, s), h(l, Zv, l));
    }
  }function Fr(t, e, n, i, r, a, o) {
    if (0 === r) return !1;var s = r,
        l = 0,
        u = t;if (o > e + s && o > i + s || e - s > o && i - s > o || a > t + s && a > n + s || t - s > a && n - s > a) return !1;if (t === n) return Math.abs(a - t) <= s / 2;l = (e - i) / (t - n), u = (t * i - n * e) / (t - n);var h = l * a - o + u,
        c = h * h / (l * l + 1);return s / 2 * s / 2 >= c;
  }function Vr(t, e, n, i, r, a, o, s, l, u, h) {
    if (0 === l) return !1;var c = l;if (h > e + c && h > i + c && h > a + c && h > s + c || e - c > h && i - c > h && a - c > h && s - c > h || u > t + c && u > n + c && u > r + c && u > o + c || t - c > u && n - c > u && r - c > u && o - c > u) return !1;var d = Tr(t, e, n, i, r, a, o, s, u, h, null);return c / 2 >= d;
  }function Hr(t, e, n, i, r, a, o, s, l) {
    if (0 === o) return !1;var u = o;if (l > e + u && l > i + u && l > a + u || e - u > l && i - u > l && a - u > l || s > t + u && s > n + u && s > r + u || t - u > s && n - u > s && r - u > s) return !1;var h = Or(t, e, n, i, r, a, s, l, null);return u / 2 >= h;
  }function Wr(t) {
    return t %= cm, 0 > t && (t += cm), t;
  }function Gr(t, e, n, i, r, a, o, s, l) {
    if (0 === o) return !1;var u = o;s -= t, l -= e;var h = Math.sqrt(s * s + l * l);if (h - u > n || n > h + u) return !1;if (Math.abs(i - r) % dm < 1e-4) return !0;if (a) {
      var c = i;i = Wr(r), r = Wr(c);
    } else i = Wr(i), r = Wr(r);i > r && (r += dm);var d = Math.atan2(l, s);return 0 > d && (d += dm), d >= i && r >= d || d + dm >= i && r >= d + dm;
  }function Xr(t, e, n, i, r, a) {
    if (a > e && a > i || e > a && i > a) return 0;if (i === e) return 0;var o = e > i ? 1 : -1,
        s = (a - e) / (i - e);(1 === s || 0 === s) && (o = e > i ? .5 : -.5);var l = s * (n - t) + t;return l === r ? 1 / 0 : l > r ? o : 0;
  }function Ur(t, e) {
    return Math.abs(t - e) < gm;
  }function Yr() {
    var t = mm[0];mm[0] = mm[1], mm[1] = t;
  }function qr(t, e, n, i, r, a, o, s, l, u) {
    if (u > e && u > i && u > a && u > s || e > u && i > u && a > u && s > u) return 0;var h = Mr(e, i, a, s, u, vm);if (0 === h) return 0;for (var c, d, f = 0, p = -1, g = 0; h > g; g++) {
      var v = vm[g],
          m = 0 === v || 1 === v ? .5 : 1,
          y = br(t, n, r, o, v);l > y || (0 > p && (p = Ar(e, i, a, s, mm), mm[1] < mm[0] && p > 1 && Yr(), c = br(e, i, a, s, mm[0]), p > 1 && (d = br(e, i, a, s, mm[1]))), f += 2 === p ? v < mm[0] ? e > c ? m : -m : v < mm[1] ? c > d ? m : -m : d > s ? m : -m : v < mm[0] ? e > c ? m : -m : c > s ? m : -m);
    }return f;
  }function jr(t, e, n, i, r, a, o, s) {
    if (s > e && s > i && s > a || e > s && i > s && a > s) return 0;var l = kr(e, i, a, s, vm);if (0 === l) return 0;var u = Pr(e, i, a);if (u >= 0 && 1 >= u) {
      for (var h = 0, c = Cr(e, i, a, u), d = 0; l > d; d++) {
        var f = 0 === vm[d] || 1 === vm[d] ? .5 : 1,
            p = Cr(t, n, r, vm[d]);o > p || (h += vm[d] < u ? e > c ? f : -f : c > a ? f : -f);
      }return h;
    }var f = 0 === vm[0] || 1 === vm[0] ? .5 : 1,
        p = Cr(t, n, r, vm[0]);return o > p ? 0 : e > a ? f : -f;
  }function Zr(t, e, n, i, r, a, o, s) {
    if (s -= e, s > n || -n > s) return 0;var l = Math.sqrt(n * n - s * s);vm[0] = -l, vm[1] = l;var u = Math.abs(i - r);if (1e-4 > u) return 0;if (1e-4 > u % pm) {
      i = 0, r = pm;var h = a ? 1 : -1;return o >= vm[0] + t && o <= vm[1] + t ? h : 0;
    }if (a) {
      var l = i;i = Wr(r), r = Wr(l);
    } else i = Wr(i), r = Wr(r);i > r && (r += pm);for (var c = 0, d = 0; 2 > d; d++) {
      var f = vm[d];if (f + t > o) {
        var p = Math.atan2(s, f),
            h = a ? 1 : -1;0 > p && (p = pm + p), (p >= i && r >= p || p + pm >= i && r >= p + pm) && (p > Math.PI / 2 && p < 1.5 * Math.PI && (h = -h), c += h);
      }
    }return c;
  }function Kr(t, e, n, i, r) {
    for (var a = 0, o = 0, s = 0, l = 0, u = 0, h = 0; h < t.length;) {
      var c = t[h++];switch (c === fm.M && h > 1 && (n || (a += Xr(o, s, l, u, i, r))), 1 === h && (o = t[h], s = t[h + 1], l = o, u = s), c) {case fm.M:
          l = t[h++], u = t[h++], o = l, s = u;break;case fm.L:
          if (n) {
            if (Fr(o, s, t[h], t[h + 1], e, i, r)) return !0;
          } else a += Xr(o, s, t[h], t[h + 1], i, r) || 0;o = t[h++], s = t[h++];break;case fm.C:
          if (n) {
            if (Vr(o, s, t[h++], t[h++], t[h++], t[h++], t[h], t[h + 1], e, i, r)) return !0;
          } else a += qr(o, s, t[h++], t[h++], t[h++], t[h++], t[h], t[h + 1], i, r) || 0;o = t[h++], s = t[h++];break;case fm.Q:
          if (n) {
            if (Hr(o, s, t[h++], t[h++], t[h], t[h + 1], e, i, r)) return !0;
          } else a += jr(o, s, t[h++], t[h++], t[h], t[h + 1], i, r) || 0;o = t[h++], s = t[h++];break;case fm.A:
          var d = t[h++],
              f = t[h++],
              p = t[h++],
              g = t[h++],
              v = t[h++],
              m = t[h++];h += 1;var y = 1 - t[h++],
              x = Math.cos(v) * p + d,
              _ = Math.sin(v) * g + f;h > 1 ? a += Xr(o, s, x, _, i, r) : (l = x, u = _);var w = (i - d) * g / p + d;if (n) {
            if (Gr(d, f, g, v, v + m, y, e, w, r)) return !0;
          } else a += Zr(d, f, g, v, v + m, y, w, r);o = Math.cos(v + m) * p + d, s = Math.sin(v + m) * g + f;break;case fm.R:
          l = o = t[h++], u = s = t[h++];var b = t[h++],
              S = t[h++],
              x = l + b,
              _ = u + S;if (n) {
            if (Fr(l, u, x, u, e, i, r) || Fr(x, u, x, _, e, i, r) || Fr(x, _, l, _, e, i, r) || Fr(l, _, l, u, e, i, r)) return !0;
          } else a += Xr(x, u, x, _, i, r), a += Xr(l, _, l, u, i, r);break;case fm.Z:
          if (n) {
            if (Fr(o, s, l, u, e, i, r)) return !0;
          } else a += Xr(o, s, l, u, i, r);o = l, s = u;}
    }return n || Ur(s, u) || (a += Xr(o, s, l, u, i, r) || 0), 0 !== a;
  }function $r(t, e, n) {
    return Kr(t, 0, !1, e, n);
  }function Qr(t, e, n, i) {
    return Kr(t, e, !0, n, i);
  }function Jr(t) {
    Ai.call(this, t), this.path = null;
  }function ta(t, e, n, i, r, a, o, s, l, u, h) {
    var c = l * (Dm / 180),
        d = Cm(c) * (t - n) / 2 + Tm(c) * (e - i) / 2,
        f = -1 * Tm(c) * (t - n) / 2 + Cm(c) * (e - i) / 2,
        p = d * d / (o * o) + f * f / (s * s);p > 1 && (o *= Im(p), s *= Im(p));var g = (r === a ? -1 : 1) * Im((o * o * s * s - o * o * f * f - s * s * d * d) / (o * o * f * f + s * s * d * d)) || 0,
        v = g * o * f / s,
        m = g * -s * d / o,
        y = (t + n) / 2 + Cm(c) * v - Tm(c) * m,
        x = (e + i) / 2 + Tm(c) * v + Cm(c) * m,
        _ = Lm([1, 0], [(d - v) / o, (f - m) / s]),
        w = [(d - v) / o, (f - m) / s],
        b = [(-1 * d - v) / o, (-1 * f - m) / s],
        S = Lm(w, b);Pm(w, b) <= -1 && (S = Dm), Pm(w, b) >= 1 && (S = 0), 0 === a && S > 0 && (S -= 2 * Dm), 1 === a && 0 > S && (S += 2 * Dm), h.addData(u, y, x, o, s, _, S, c, a);
  }function ea(t) {
    if (!t) return new hm();for (var e, n = 0, i = 0, r = n, a = i, o = new hm(), s = hm.CMD, l = t.match(Om), u = 0; u < l.length; u++) {
      for (var h, c = l[u], d = c.charAt(0), f = c.match(Em) || [], p = f.length, g = 0; p > g; g++) {
        f[g] = parseFloat(f[g]);
      }for (var v = 0; p > v;) {
        var m,
            y,
            x,
            _,
            w,
            b,
            S,
            M = n,
            A = i;switch (d) {case "l":
            n += f[v++], i += f[v++], h = s.L, o.addData(h, n, i);break;case "L":
            n = f[v++], i = f[v++], h = s.L, o.addData(h, n, i);break;case "m":
            n += f[v++], i += f[v++], h = s.M, o.addData(h, n, i), r = n, a = i, d = "l";break;case "M":
            n = f[v++], i = f[v++], h = s.M, o.addData(h, n, i), r = n, a = i, d = "L";break;case "h":
            n += f[v++], h = s.L, o.addData(h, n, i);break;case "H":
            n = f[v++], h = s.L, o.addData(h, n, i);break;case "v":
            i += f[v++], h = s.L, o.addData(h, n, i);break;case "V":
            i = f[v++], h = s.L, o.addData(h, n, i);break;case "C":
            h = s.C, o.addData(h, f[v++], f[v++], f[v++], f[v++], f[v++], f[v++]), n = f[v - 2], i = f[v - 1];break;case "c":
            h = s.C, o.addData(h, f[v++] + n, f[v++] + i, f[v++] + n, f[v++] + i, f[v++] + n, f[v++] + i), n += f[v - 2], i += f[v - 1];break;case "S":
            m = n, y = i;var I = o.len(),
                T = o.data;e === s.C && (m += n - T[I - 4], y += i - T[I - 3]), h = s.C, M = f[v++], A = f[v++], n = f[v++], i = f[v++], o.addData(h, m, y, M, A, n, i);break;case "s":
            m = n, y = i;var I = o.len(),
                T = o.data;e === s.C && (m += n - T[I - 4], y += i - T[I - 3]), h = s.C, M = n + f[v++], A = i + f[v++], n += f[v++], i += f[v++], o.addData(h, m, y, M, A, n, i);break;case "Q":
            M = f[v++], A = f[v++], n = f[v++], i = f[v++], h = s.Q, o.addData(h, M, A, n, i);break;case "q":
            M = f[v++] + n, A = f[v++] + i, n += f[v++], i += f[v++], h = s.Q, o.addData(h, M, A, n, i);break;case "T":
            m = n, y = i;var I = o.len(),
                T = o.data;e === s.Q && (m += n - T[I - 4], y += i - T[I - 3]), n = f[v++], i = f[v++], h = s.Q, o.addData(h, m, y, n, i);break;case "t":
            m = n, y = i;var I = o.len(),
                T = o.data;e === s.Q && (m += n - T[I - 4], y += i - T[I - 3]), n += f[v++], i += f[v++], h = s.Q, o.addData(h, m, y, n, i);break;case "A":
            x = f[v++], _ = f[v++], w = f[v++], b = f[v++], S = f[v++], M = n, A = i, n = f[v++], i = f[v++], h = s.A, ta(M, A, n, i, b, S, x, _, w, h, o);break;case "a":
            x = f[v++], _ = f[v++], w = f[v++], b = f[v++], S = f[v++], M = n, A = i, n += f[v++], i += f[v++], h = s.A, ta(M, A, n, i, b, S, x, _, w, h, o);}
      }("z" === d || "Z" === d) && (h = s.Z, o.addData(h), n = r, i = a), e = h;
    }return o.toStatic(), o;
  }function na(t, e) {
    var n = ea(t);return e = e || {}, e.buildPath = function (t) {
      if (t.setData) {
        t.setData(n.data);var e = t.getContext();e && t.rebuildPath(e);
      } else {
        var e = t;n.rebuildPath(e);
      }
    }, e.applyTransform = function (t) {
      Am(n, t), this.dirty(!0);
    }, e;
  }function ia(t, e) {
    return new Jr(na(t, e));
  }function ra(t, e) {
    return Jr.extend(na(t, e));
  }function aa(t, e) {
    for (var n = [], i = t.length, r = 0; i > r; r++) {
      var a = t[r];a.path || a.createPathProxy(), a.__dirtyPath && a.buildPath(a.path, a.shape, !0), n.push(a.path);
    }var o = new Jr(e);return o.createPathProxy(), o.buildPath = function (t) {
      t.appendPath(n);var e = t.getContext();e && t.rebuildPath(e);
    }, o;
  }function oa(t, e, n, i, r, a, o) {
    var s = .5 * (n - t),
        l = .5 * (i - e);return (2 * (e - n) + s + l) * o + (-3 * (e - n) - 2 * s - l) * a + s * r + e;
  }function sa(t, e, n) {
    var i = e.points,
        r = e.smooth;if (i && i.length >= 2) {
      if (r && "spline" !== r) {
        var a = Wm(i, r, n, e.smoothConstraint);t.moveTo(i[0][0], i[0][1]);for (var o = i.length, s = 0; (n ? o : o - 1) > s; s++) {
          var l = a[2 * s],
              u = a[2 * s + 1],
              h = i[(s + 1) % o];t.bezierCurveTo(l[0], l[1], u[0], u[1], h[0], h[1]);
        }
      } else {
        "spline" === r && (i = Hm(i, n)), t.moveTo(i[0][0], i[0][1]);for (var s = 1, c = i.length; c > s; s++) {
          t.lineTo(i[s][0], i[s][1]);
        }
      }n && t.closePath();
    }
  }function la(t, e, n) {
    if (e) {
      var i = e.x1,
          r = e.x2,
          a = e.y1,
          o = e.y2;t.x1 = i, t.x2 = r, t.y1 = a, t.y2 = o;var s = n && n.lineWidth;s && (Um(2 * i) === Um(2 * r) && (t.x1 = t.x2 = ha(i, s, !0)), Um(2 * a) === Um(2 * o) && (t.y1 = t.y2 = ha(a, s, !0)));
    }
  }function ua(t, e, n) {
    if (e) {
      var i = e.x,
          r = e.y,
          a = e.width,
          o = e.height;t.x = i, t.y = r, t.width = a, t.height = o;var s = n && n.lineWidth;s && (t.x = ha(i, s, !0), t.y = ha(r, s, !0), t.width = Math.max(ha(i + a, s, !1) - t.x, 0 === a ? 0 : 1), t.height = Math.max(ha(r + o, s, !1) - t.y, 0 === o ? 0 : 1));
    }
  }function ha(t, e, n) {
    if (!e) return t;var i = Um(2 * t);return (i + Um(e)) % 2 === 0 ? i / 2 : (i + (n ? 1 : -1)) / 2;
  }function ca(t, e, n) {
    var i = t.cpx2,
        r = t.cpy2;return null === i || null === r ? [(n ? Sr : br)(t.x1, t.cpx1, t.cpx2, t.x2, e), (n ? Sr : br)(t.y1, t.cpy1, t.cpy2, t.y2, e)] : [(n ? Dr : Cr)(t.x1, t.cpx1, t.x2, e), (n ? Dr : Cr)(t.y1, t.cpy1, t.y2, e)];
  }function da(t) {
    Ai.call(this, t), this._displayables = [], this._temporaryDisplayables = [], this._cursor = 0, this.notClear = !0;
  }function fa(t) {
    return Jr.extend(t);
  }function pa(t, e) {
    return ra(t, e);
  }function ga(t, e) {
    fy[t] = e;
  }function va(t) {
    return fy.hasOwnProperty(t) ? fy[t] : void 0;
  }function ma(t, e, n, i) {
    var r = ia(t, e);return n && ("center" === i && (n = xa(n, r.getBoundingRect())), _a(r, n)), r;
  }function ya(t, e, n) {
    var i = new Ii({ style: { image: t, x: e.x, y: e.y, width: e.width, height: e.height }, onload: function onload(t) {
        if ("center" === n) {
          var r = { width: t.width, height: t.height };i.setStyle(xa(e, r));
        }
      } });return i;
  }function xa(t, e) {
    var n,
        i = e.width / e.height,
        r = t.height * i;r <= t.width ? n = t.height : (r = t.width, n = r / i);var a = t.x + t.width / 2,
        o = t.y + t.height / 2;return { x: a - r / 2, y: o - n / 2, width: r, height: n };
  }function _a(t, e) {
    if (t.applyTransform) {
      var n = t.getBoundingRect(),
          i = n.calculateTransform(e);t.applyTransform(i);
    }
  }function wa(t) {
    return la(t.shape, t.shape, t.style), t;
  }function ba(t) {
    return ua(t.shape, t.shape, t.style), t;
  }function Sa(t) {
    return null != t && "none" !== t;
  }function Ma(t) {
    if ("string" != typeof t) return t;var e = vy.get(t);return e || (e = en(t, -.1), 1e4 > my && (vy.set(t, e), my++)), e;
  }function Aa(t) {
    if (t.__hoverStlDirty) {
      t.__hoverStlDirty = !1;var e = t.__hoverStl;if (!e) return void (t.__cachedNormalStl = t.__cachedNormalZ2 = null);var n = t.__cachedNormalStl = {};t.__cachedNormalZ2 = t.z2;var i = t.style;for (var r in e) {
        null != e[r] && (n[r] = i[r]);
      }n.fill = i.fill, n.stroke = i.stroke;
    }
  }function Ia(t) {
    var e = t.__hoverStl;if (e && !t.__highlighted) {
      var n = t.__zr,
          i = t.useHoverLayer && n && "canvas" === n.painter.type;if (t.__highlighted = i ? "layer" : "plain", !(t.isGroup || !n && t.useHoverLayer)) {
        var r = t,
            a = t.style;i && (r = n.addHover(t), a = r.style), Za(a), i || Aa(r), a.extendFrom(e), Ta(a, e, "fill"), Ta(a, e, "stroke"), ja(a), i || (t.dirty(!1), t.z2 += sy);
      }
    }
  }function Ta(t, e, n) {
    !Sa(e[n]) && Sa(t[n]) && (t[n] = Ma(t[n]));
  }function Ca(t) {
    var e = t.__highlighted;if (e && (t.__highlighted = !1, !t.isGroup)) if ("layer" === e) t.__zr && t.__zr.removeHover(t);else {
      var n = t.style,
          i = t.__cachedNormalStl;i && (Za(n), t.setStyle(i), ja(n));var r = t.__cachedNormalZ2;null != r && t.z2 - r === sy && (t.z2 = r);
    }
  }function Da(t, e, n) {
    var i,
        r = hy,
        a = hy;t.__highlighted && (r = uy, i = !0), e(t, n), t.__highlighted && (a = uy, i = !0), t.isGroup && t.traverse(function (t) {
      !t.isGroup && e(t, n);
    }), i && t.__highDownOnUpdate && t.__highDownOnUpdate(r, a);
  }function ka(t, e) {
    e = t.__hoverStl = e !== !1 && (t.hoverStyle || e || {}), t.__hoverStlDirty = !0, t.__highlighted && (t.__cachedNormalStl = null, Ca(t), Ia(t));
  }function Pa(t) {
    !Ba(this, t) && !this.__highByOuter && Da(this, Ia);
  }function La(t) {
    !Ba(this, t) && !this.__highByOuter && Da(this, Ca);
  }function Oa(t) {
    this.__highByOuter |= 1 << (t || 0), Da(this, Ia);
  }function Ea(t) {
    !(this.__highByOuter &= ~(1 << (t || 0))) && Da(this, Ca);
  }function Ba(t, e) {
    return t.__highDownSilentOnTouch && e.zrByTouch;
  }function za(t, e) {
    Ra(t, !0), Da(t, ka, e);
  }function Ra(t, e) {
    var n = e === !1;if (t.__highDownSilentOnTouch = t.highDownSilentOnTouch, t.__highDownOnUpdate = t.highDownOnUpdate, !n || t.__highDownDispatcher) {
      var i = n ? "off" : "on";t[i]("mouseover", Pa)[i]("mouseout", La), t[i]("emphasis", Oa)[i]("normal", Ea), t.__highByOuter = t.__highByOuter || 0, t.__highDownDispatcher = !n;
    }
  }function Na(t) {
    return !(!t || !t.__highDownDispatcher);
  }function Fa(t) {
    var e = dy[t];return null == e && 32 >= cy && (e = dy[t] = cy++), e;
  }function Va(t, e, n, i, r, a, o) {
    r = r || oy;var s,
        l = r.labelFetcher,
        u = r.labelDataIndex,
        h = r.labelDimIndex,
        c = r.labelProp,
        d = n.getShallow("show"),
        f = i.getShallow("show");(d || f) && (l && (s = l.getFormattedLabel(u, "normal", null, h, c)), null == s && (s = w(r.defaultText) ? r.defaultText(u, r) : r.defaultText));var p = d ? s : null,
        g = f ? D(l ? l.getFormattedLabel(u, "emphasis", null, h, c) : null, s) : null;(null != p || null != g) && (Wa(t, n, a, r), Wa(e, i, o, r, !0)), t.text = p, e.text = g;
  }function Ha(t, e, n) {
    var i = t.style;e && (Za(i), t.setStyle(e), ja(i)), i = t.__hoverStl, n && i && (Za(i), o(i, n), ja(i));
  }function Wa(t, e, n, i, r) {
    return Xa(t, e, i, r), n && o(t, n), t;
  }function Ga(t, e, n) {
    var i,
        r = { isRectText: !0 };n === !1 ? i = !0 : r.autoColor = n, Xa(t, e, r, i);
  }function Xa(t, e, n, i) {
    if (n = n || oy, n.isRectText) {
      var r;n.getTextPosition ? r = n.getTextPosition(e, i) : (r = e.getShallow("position") || (i ? null : "inside"), "outside" === r && (r = "top")), t.textPosition = r, t.textOffset = e.getShallow("offset");var a = e.getShallow("rotate");null != a && (a *= Math.PI / 180), t.textRotation = a, t.textDistance = D(e.getShallow("distance"), i ? null : 5);
    }var o,
        s = e.ecModel,
        l = s && s.option.textStyle,
        u = Ua(e);if (u) {
      o = {};for (var h in u) {
        if (u.hasOwnProperty(h)) {
          var c = e.getModel(["rich", h]);Ya(o[h] = {}, c, l, n, i);
        }
      }
    }return t.rich = o, Ya(t, e, l, n, i, !0), n.forceRich && !n.textStyle && (n.textStyle = {}), t;
  }function Ua(t) {
    for (var e; t && t !== t.ecModel;) {
      var n = (t.option || oy).rich;if (n) {
        e = e || {};for (var i in n) {
          n.hasOwnProperty(i) && (e[i] = 1);
        }
      }t = t.parentModel;
    }return e;
  }function Ya(t, e, n, i, r, a) {
    n = !r && n || oy, t.textFill = qa(e.getShallow("color"), i) || n.color, t.textStroke = qa(e.getShallow("textBorderColor"), i) || n.textBorderColor, t.textStrokeWidth = D(e.getShallow("textBorderWidth"), n.textBorderWidth), r || (a && (t.insideRollbackOpt = i, ja(t)), null == t.textFill && (t.textFill = i.autoColor)), t.fontStyle = e.getShallow("fontStyle") || n.fontStyle, t.fontWeight = e.getShallow("fontWeight") || n.fontWeight, t.fontSize = e.getShallow("fontSize") || n.fontSize, t.fontFamily = e.getShallow("fontFamily") || n.fontFamily, t.textAlign = e.getShallow("align"), t.textVerticalAlign = e.getShallow("verticalAlign") || e.getShallow("baseline"), t.textLineHeight = e.getShallow("lineHeight"), t.textWidth = e.getShallow("width"), t.textHeight = e.getShallow("height"), t.textTag = e.getShallow("tag"), a && i.disableBox || (t.textBackgroundColor = qa(e.getShallow("backgroundColor"), i), t.textPadding = e.getShallow("padding"), t.textBorderColor = qa(e.getShallow("borderColor"), i), t.textBorderWidth = e.getShallow("borderWidth"), t.textBorderRadius = e.getShallow("borderRadius"), t.textBoxShadowColor = e.getShallow("shadowColor"), t.textBoxShadowBlur = e.getShallow("shadowBlur"), t.textBoxShadowOffsetX = e.getShallow("shadowOffsetX"), t.textBoxShadowOffsetY = e.getShallow("shadowOffsetY")), t.textShadowColor = e.getShallow("textShadowColor") || n.textShadowColor, t.textShadowBlur = e.getShallow("textShadowBlur") || n.textShadowBlur, t.textShadowOffsetX = e.getShallow("textShadowOffsetX") || n.textShadowOffsetX, t.textShadowOffsetY = e.getShallow("textShadowOffsetY") || n.textShadowOffsetY;
  }function qa(t, e) {
    return "auto" !== t ? t : e && e.autoColor ? e.autoColor : null;
  }function ja(t) {
    var e,
        n = t.textPosition,
        i = t.insideRollbackOpt;if (i && null == t.textFill) {
      var r = i.autoColor,
          a = i.isRectText,
          o = i.useInsideStyle,
          s = o !== !1 && (o === !0 || a && n && "string" == typeof n && n.indexOf("inside") >= 0),
          l = !s && null != r;(s || l) && (e = { textFill: t.textFill, textStroke: t.textStroke, textStrokeWidth: t.textStrokeWidth }), s && (t.textFill = "#fff", null == t.textStroke && (t.textStroke = r, null == t.textStrokeWidth && (t.textStrokeWidth = 2))), l && (t.textFill = r);
    }t.insideRollback = e;
  }function Za(t) {
    var e = t.insideRollback;e && (t.textFill = e.textFill, t.textStroke = e.textStroke, t.textStrokeWidth = e.textStrokeWidth, t.insideRollback = null);
  }function Ka(t, e) {
    var n = e && e.getModel("textStyle");return E([t.fontStyle || n && n.getShallow("fontStyle") || "", t.fontWeight || n && n.getShallow("fontWeight") || "", (t.fontSize || n && n.getShallow("fontSize") || 12) + "px", t.fontFamily || n && n.getShallow("fontFamily") || "sans-serif"].join(" "));
  }function $a(t, e, n, i, r, a) {
    "function" == typeof r && (a = r, r = null);var o = i && i.isAnimationEnabled();if (o) {
      var s = t ? "Update" : "",
          l = i.getShallow("animationDuration" + s),
          u = i.getShallow("animationEasing" + s),
          h = i.getShallow("animationDelay" + s);"function" == typeof h && (h = h(r, i.getAnimationDelayParams ? i.getAnimationDelayParams(e, r) : null)), "function" == typeof l && (l = l(r)), l > 0 ? e.animateTo(n, l, h || 0, u, a, !!a) : (e.stopAnimation(), e.attr(n), a && a());
    } else e.stopAnimation(), e.attr(n), a && a();
  }function Qa(t, e, n, i, r) {
    $a(!0, t, e, n, i, r);
  }function Ja(t, e, n, i, r) {
    $a(!1, t, e, n, i, r);
  }function to(t, e) {
    for (var n = Le([]); t && t !== e;) {
      Ee(n, t.getLocalTransform(), n), t = t.parent;
    }return n;
  }function eo(t, e, n) {
    return e && !d(e) && (e = Up.getLocalTransform(e)), n && (e = Ne([], e)), ae([], t, e);
  }function no(t, e, n) {
    var i = 0 === e[4] || 0 === e[5] || 0 === e[0] ? 1 : Math.abs(2 * e[4] / e[0]),
        r = 0 === e[4] || 0 === e[5] || 0 === e[2] ? 1 : Math.abs(2 * e[4] / e[2]),
        a = ["left" === t ? -i : "right" === t ? i : 0, "top" === t ? -r : "bottom" === t ? r : 0];return a = eo(a, e, n), Math.abs(a[0]) > Math.abs(a[1]) ? a[0] > 0 ? "right" : "left" : a[1] > 0 ? "bottom" : "top";
  }function io(t, e, n) {
    function i(t) {
      var e = {};return t.traverse(function (t) {
        !t.isGroup && t.anid && (e[t.anid] = t);
      }), e;
    }function r(t) {
      var e = { position: G(t.position), rotation: t.rotation };return t.shape && (e.shape = o({}, t.shape)), e;
    }if (t && e) {
      var a = i(t);e.traverse(function (t) {
        if (!t.isGroup && t.anid) {
          var e = a[t.anid];if (e) {
            var i = r(t);t.attr(r(e)), Qa(t, i, n, t.dataIndex);
          }
        }
      });
    }
  }function ro(t, e) {
    return p(t, function (t) {
      var n = t[0];n = ry(n, e.x), n = ay(n, e.x + e.width);var i = t[1];return i = ry(i, e.y), i = ay(i, e.y + e.height), [n, i];
    });
  }function ao(t, e) {
    var n = ry(t.x, e.x),
        i = ay(t.x + t.width, e.x + e.width),
        r = ry(t.y, e.y),
        a = ay(t.y + t.height, e.y + e.height);return i >= n && a >= r ? { x: n, y: r, width: i - n, height: a - r } : void 0;
  }function oo(t, e, n) {
    e = o({ rectHover: !0 }, e);var i = e.style = { strokeNoScale: !0 };return n = n || { x: -1, y: -1, width: 2, height: 2 }, t ? 0 === t.indexOf("image://") ? (i.image = t.slice(8), s(i, n), new Ii(e)) : ma(t.replace("path://", ""), e, n, "center") : void 0;
  }function so(t, e, n, i, r) {
    for (var a = 0, o = r[r.length - 1]; a < r.length; a++) {
      var s = r[a];if (lo(t, e, n, i, s[0], s[1], o[0], o[1])) return !0;o = s;
    }
  }function lo(t, e, n, i, r, a, o, s) {
    var l = n - t,
        u = i - e,
        h = o - r,
        c = s - a,
        d = uo(h, c, l, u);if (ho(d)) return !1;var f = t - r,
        p = e - a,
        g = uo(f, p, l, u) / d;if (0 > g || g > 1) return !1;var v = uo(f, p, h, c) / d;return 0 > v || v > 1 ? !1 : !0;
  }function uo(t, e, n, i) {
    return t * i - n * e;
  }function ho(t) {
    return 1e-6 >= t && t >= -1e-6;
  }function co(t, e, n) {
    this.parentModel = e, this.ecModel = n, this.option = t;
  }function fo(t, e, n) {
    for (var i = 0; i < e.length && (!e[i] || (t = t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? t[e[i]] : null, null != t)); i++) {}return null == t && n && (t = n.get(e)), t;
  }function po(t, e) {
    var n = My(t).getParent;return n ? n.call(t, e) : t.parentModel;
  }function go(t) {
    return [t || "", Ay++, Math.random().toFixed(5)].join("_");
  }function vo(t) {
    var e = {};
    return t.registerSubTypeDefaulter = function (t, n) {
      t = fr(t), e[t.main] = n;
    }, t.determineSubType = function (n, i) {
      var r = i.type;if (!r) {
        var a = fr(n).main;t.hasSubTypes(n) && e[a] && (r = e[a](i));
      }return r;
    }, t;
  }function mo(t, e) {
    function n(t) {
      var n = {},
          a = [];return f(t, function (o) {
        var s = i(n, o),
            l = s.originalDeps = e(o),
            h = r(l, t);s.entryCount = h.length, 0 === s.entryCount && a.push(o), f(h, function (t) {
          u(s.predecessor, t) < 0 && s.predecessor.push(t);var e = i(n, t);u(e.successor, t) < 0 && e.successor.push(o);
        });
      }), { graph: n, noEntryList: a };
    }function i(t, e) {
      return t[e] || (t[e] = { predecessor: [], successor: [] }), t[e];
    }function r(t, e) {
      var n = [];return f(t, function (t) {
        u(e, t) >= 0 && n.push(t);
      }), n;
    }t.topologicalTravel = function (t, e, i, r) {
      function a(t) {
        l[t].entryCount--, 0 === l[t].entryCount && u.push(t);
      }function o(t) {
        h[t] = !0, a(t);
      }if (t.length) {
        var s = n(e),
            l = s.graph,
            u = s.noEntryList,
            h = {};for (f(t, function (t) {
          h[t] = !0;
        }); u.length;) {
          var c = u.pop(),
              d = l[c],
              p = !!h[c];p && (i.call(r, c, d.originalDeps.slice()), delete h[c]), f(d.successor, p ? o : a);
        }f(h, function () {
          throw new Error("Circle dependency may exists");
        });
      }
    };
  }function yo(t) {
    return t.replace(/^\s+|\s+$/g, "");
  }function xo(t, e, n, i) {
    var r = e[1] - e[0],
        a = n[1] - n[0];if (0 === r) return 0 === a ? n[0] : (n[0] + n[1]) / 2;if (i) {
      if (r > 0) {
        if (t <= e[0]) return n[0];if (t >= e[1]) return n[1];
      } else {
        if (t >= e[0]) return n[0];if (t <= e[1]) return n[1];
      }
    } else {
      if (t === e[0]) return n[0];if (t === e[1]) return n[1];
    }return (t - e[0]) / r * a + n[0];
  }function _o(t, e) {
    switch (t) {case "center":case "middle":
        t = "50%";break;case "left":case "top":
        t = "0%";break;case "right":case "bottom":
        t = "100%";}return "string" == typeof t ? yo(t).match(/%$/) ? parseFloat(t) / 100 * e : parseFloat(t) : null == t ? 0 / 0 : +t;
  }function wo(t, e, n) {
    return null == e && (e = 10), e = Math.min(Math.max(0, e), 20), t = (+t).toFixed(e), n ? t : +t;
  }function bo(t) {
    return t.sort(function (t, e) {
      return t - e;
    }), t;
  }function So(t) {
    if (t = +t, isNaN(t)) return 0;for (var e = 1, n = 0; Math.round(t * e) / e !== t;) {
      e *= 10, n++;
    }return n;
  }function Mo(t) {
    var e = t.toString(),
        n = e.indexOf("e");if (n > 0) {
      var i = +e.slice(n + 1);return 0 > i ? -i : 0;
    }var r = e.indexOf(".");return 0 > r ? 0 : e.length - 1 - r;
  }function Ao(t, e) {
    var n = Math.log,
        i = Math.LN10,
        r = Math.floor(n(t[1] - t[0]) / i),
        a = Math.round(n(Math.abs(e[1] - e[0])) / i),
        o = Math.min(Math.max(-r + a, 0), 20);return isFinite(o) ? o : 20;
  }function Io(t, e, n) {
    if (!t[e]) return 0;var i = g(t, function (t, e) {
      return t + (isNaN(e) ? 0 : e);
    }, 0);if (0 === i) return 0;for (var r = Math.pow(10, n), a = p(t, function (t) {
      return (isNaN(t) ? 0 : t) / i * r * 100;
    }), o = 100 * r, s = p(a, function (t) {
      return Math.floor(t);
    }), l = g(s, function (t, e) {
      return t + e;
    }, 0), u = p(a, function (t, e) {
      return t - s[e];
    }); o > l;) {
      for (var h = Number.NEGATIVE_INFINITY, c = null, d = 0, f = u.length; f > d; ++d) {
        u[d] > h && (h = u[d], c = d);
      }++s[c], u[c] = 0, ++l;
    }return s[e] / r;
  }function To(t) {
    var e = 2 * Math.PI;return (t % e + e) % e;
  }function Co(t) {
    return t > -Iy && Iy > t;
  }function Do(t) {
    if (t instanceof Date) return t;if ("string" == typeof t) {
      var e = Cy.exec(t);if (!e) return new Date(0 / 0);if (e[8]) {
        var n = +e[4] || 0;return "Z" !== e[8].toUpperCase() && (n -= e[8].slice(0, 3)), new Date(Date.UTC(+e[1], +(e[2] || 1) - 1, +e[3] || 1, n, +(e[5] || 0), +e[6] || 0, +e[7] || 0));
      }return new Date(+e[1], +(e[2] || 1) - 1, +e[3] || 1, +e[4] || 0, +(e[5] || 0), +e[6] || 0, +e[7] || 0);
    }return new Date(null == t ? 0 / 0 : Math.round(t));
  }function ko(t) {
    return Math.pow(10, Po(t));
  }function Po(t) {
    if (0 === t) return 0;var e = Math.floor(Math.log(t) / Math.LN10);return t / Math.pow(10, e) >= 10 && e++, e;
  }function Lo(t, e) {
    var n,
        i = Po(t),
        r = Math.pow(10, i),
        a = t / r;return n = e ? 1.5 > a ? 1 : 2.5 > a ? 2 : 4 > a ? 3 : 7 > a ? 5 : 10 : 1 > a ? 1 : 2 > a ? 2 : 3 > a ? 3 : 5 > a ? 5 : 10, t = n * r, i >= -20 ? +t.toFixed(0 > i ? -i : 0) : t;
  }function Oo(t, e) {
    var n = (t.length - 1) * e + 1,
        i = Math.floor(n),
        r = +t[i - 1],
        a = n - i;return a ? r + a * (t[i] - r) : r;
  }function Eo(t) {
    function e(t, n, i) {
      return t.interval[i] < n.interval[i] || t.interval[i] === n.interval[i] && (t.close[i] - n.close[i] === (i ? -1 : 1) || !i && e(t, n, 1));
    }t.sort(function (t, n) {
      return e(t, n, 0) ? -1 : 1;
    });for (var n = -1 / 0, i = 1, r = 0; r < t.length;) {
      for (var a = t[r].interval, o = t[r].close, s = 0; 2 > s; s++) {
        a[s] <= n && (a[s] = n, o[s] = s ? 1 : 1 - i), n = a[s], i = o[s];
      }a[0] === a[1] && o[0] * o[1] !== 1 ? t.splice(r, 1) : r++;
    }return t;
  }function Bo(t) {
    return t - parseFloat(t) >= 0;
  }function zo(t) {
    return isNaN(t) ? "-" : (t = (t + "").split("."), t[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, "$1,") + (t.length > 1 ? "." + t[1] : ""));
  }function Ro(t, e) {
    return t = (t || "").toLowerCase().replace(/-(.)/g, function (t, e) {
      return e.toUpperCase();
    }), e && t && (t = t.charAt(0).toUpperCase() + t.slice(1)), t;
  }function No(t) {
    return null == t ? "" : (t + "").replace(Py, function (t, e) {
      return Ly[e];
    });
  }function Fo(t, e, n) {
    _(e) || (e = [e]);var i = e.length;if (!i) return "";for (var r = e[0].$vars || [], a = 0; a < r.length; a++) {
      var o = Oy[a];t = t.replace(Ey(o), Ey(o, 0));
    }for (var s = 0; i > s; s++) {
      for (var l = 0; l < r.length; l++) {
        var u = e[s][r[l]];t = t.replace(Ey(Oy[l], s), n ? No(u) : u);
      }
    }return t;
  }function Vo(t, e, n) {
    return f(e, function (e, i) {
      t = t.replace("{" + i + "}", n ? No(e) : e);
    }), t;
  }function Ho(t, e) {
    t = b(t) ? { color: t, extraCssText: e } : t || {};var n = t.color,
        i = t.type,
        e = t.extraCssText,
        r = t.renderMode || "html",
        a = t.markerId || "X";return n ? "html" === r ? "subItem" === i ? '<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;border-radius:4px;width:4px;height:4px;background-color:' + No(n) + ";" + (e || "") + '"></span>' : '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' + No(n) + ";" + (e || "") + '"></span>' : { renderMode: r, content: "{marker" + a + "|}  ", style: { color: n } } : "";
  }function Wo(t, e) {
    return t += "", "0000".substr(0, e - t.length) + t;
  }function Go(t, e, n) {
    ("week" === t || "month" === t || "quarter" === t || "half-year" === t || "year" === t) && (t = "MM-dd\nyyyy");var i = Do(e),
        r = n ? "UTC" : "",
        a = i["get" + r + "FullYear"](),
        o = i["get" + r + "Month"]() + 1,
        s = i["get" + r + "Date"](),
        l = i["get" + r + "Hours"](),
        u = i["get" + r + "Minutes"](),
        h = i["get" + r + "Seconds"](),
        c = i["get" + r + "Milliseconds"]();return t = t.replace("MM", Wo(o, 2)).replace("M", o).replace("yyyy", a).replace("yy", a % 100).replace("dd", Wo(s, 2)).replace("d", s).replace("hh", Wo(l, 2)).replace("h", l).replace("mm", Wo(u, 2)).replace("m", u).replace("ss", Wo(h, 2)).replace("s", h).replace("SSS", Wo(c, 3));
  }function Xo(t) {
    return t ? t.charAt(0).toUpperCase() + t.substr(1) : t;
  }function Uo(t) {
    return Xn(t.text, t.font, t.textAlign, t.textVerticalAlign, t.textPadding, t.textLineHeight, t.rich, t.truncate);
  }function Yo(t, e, n, i, r, a, o, s) {
    return Xn(t, e, n, i, r, s, a, o);
  }function qo(t, e) {
    if ("_blank" === e || "blank" === e) {
      var n = window.open();n.opener = null, n.location = t;
    } else window.open(t, e);
  }function jo(t, e, n, i, r) {
    var a = 0,
        o = 0;null == i && (i = 1 / 0), null == r && (r = 1 / 0);var s = 0;e.eachChild(function (l, u) {
      var h,
          c,
          d = l.position,
          f = l.getBoundingRect(),
          p = e.childAt(u + 1),
          g = p && p.getBoundingRect();if ("horizontal" === t) {
        var v = f.width + (g ? -g.x + f.x : 0);h = a + v, h > i || l.newline ? (a = 0, h = v, o += s + n, s = f.height) : s = Math.max(s, f.height);
      } else {
        var m = f.height + (g ? -g.y + f.y : 0);c = o + m, c > r || l.newline ? (a += s + n, o = 0, c = m, s = f.width) : s = Math.max(s, f.width);
      }l.newline || (d[0] = a, d[1] = o, "horizontal" === t ? a = h + n : o = c + n);
    });
  }function Zo(t, e, n) {
    n = ky(n || 0);var i = e.width,
        r = e.height,
        a = _o(t.left, i),
        o = _o(t.top, r),
        s = _o(t.right, i),
        l = _o(t.bottom, r),
        u = _o(t.width, i),
        h = _o(t.height, r),
        c = n[2] + n[0],
        d = n[1] + n[3],
        f = t.aspect;switch (isNaN(u) && (u = i - s - d - a), isNaN(h) && (h = r - l - c - o), null != f && (isNaN(u) && isNaN(h) && (f > i / r ? u = .8 * i : h = .8 * r), isNaN(u) && (u = f * h), isNaN(h) && (h = u / f)), isNaN(a) && (a = i - s - u - d), isNaN(o) && (o = r - l - h - c), t.left || t.right) {case "center":
        a = i / 2 - u / 2 - n[3];break;case "right":
        a = i - u - d;}switch (t.top || t.bottom) {case "middle":case "center":
        o = r / 2 - h / 2 - n[0];break;case "bottom":
        o = r - h - c;}a = a || 0, o = o || 0, isNaN(u) && (u = i - d - a - (s || 0)), isNaN(h) && (h = r - c - o - (l || 0));var p = new An(a + n[3], o + n[0], u, h);return p.margin = n, p;
  }function Ko(t, e, n) {
    function i(n, i) {
      var o = {},
          l = 0,
          u = {},
          h = 0,
          c = 2;if (Ry(n, function (e) {
        u[e] = t[e];
      }), Ry(n, function (t) {
        r(e, t) && (o[t] = u[t] = e[t]), a(o, t) && l++, a(u, t) && h++;
      }), s[i]) return a(e, n[1]) ? u[n[2]] = null : a(e, n[2]) && (u[n[1]] = null), u;if (h !== c && l) {
        if (l >= c) return o;for (var d = 0; d < n.length; d++) {
          var f = n[d];if (!r(o, f) && r(t, f)) {
            o[f] = t[f];break;
          }
        }return o;
      }return u;
    }function r(t, e) {
      return t.hasOwnProperty(e);
    }function a(t, e) {
      return null != t[e] && "auto" !== t[e];
    }function o(t, e, n) {
      Ry(t, function (t) {
        e[t] = n[t];
      });
    }!S(n) && (n = {});var s = n.ignoreSize;!_(s) && (s = [s, s]);var l = i(Fy[0], 0),
        u = i(Fy[1], 1);o(Fy[0], t, l), o(Fy[1], t, u);
  }function $o(t) {
    return Qo({}, t);
  }function Qo(t, e) {
    return e && t && Ry(Ny, function (n) {
      e.hasOwnProperty(n) && (t[n] = e[n]);
    }), t;
  }function Jo(t) {
    var e = [];return f(Wy.getClassesByMainType(t), function (t) {
      e = e.concat(t.prototype.dependencies || []);
    }), e = p(e, function (t) {
      return fr(t).main;
    }), "dataset" !== t && u(e, "dataset") <= 0 && e.unshift("dataset"), e;
  }function ts(t, e) {
    for (var n = t.length, i = 0; n > i; i++) {
      if (t[i].length > e) return t[i];
    }return t[n - 1];
  }function es(t) {
    this.fromDataset = t.fromDataset, this.data = t.data || (t.sourceFormat === Ky ? {} : []), this.sourceFormat = t.sourceFormat || $y, this.seriesLayoutBy = t.seriesLayoutBy || Jy, this.dimensionsDefine = t.dimensionsDefine, this.encodeDefine = t.encodeDefine && N(t.encodeDefine), this.startIndex = t.startIndex || 0, this.dimensionsDetectCount = t.dimensionsDetectCount;
  }function ns(t) {
    var e = t.option.source,
        n = $y;if (A(e)) n = Qy;else if (_(e)) {
      0 === e.length && (n = jy);for (var i = 0, r = e.length; r > i; i++) {
        var a = e[i];if (null != a) {
          if (_(a)) {
            n = jy;break;
          }if (S(a)) {
            n = Zy;break;
          }
        }
      }
    } else if (S(e)) {
      for (var o in e) {
        if (e.hasOwnProperty(o) && d(e[o])) {
          n = Ky;break;
        }
      }
    } else if (null != e) throw new Error("Invalid data");nx(t).sourceFormat = n;
  }function is(t) {
    return nx(t).source;
  }function rs(t) {
    nx(t).datasetMap = N();
  }function as(t) {
    var e = t.option,
        n = e.data,
        i = A(n) ? Qy : qy,
        r = !1,
        a = e.seriesLayoutBy,
        o = e.sourceHeader,
        s = e.dimensions,
        l = ds(t);if (l) {
      var u = l.option;n = u.source, i = nx(l).sourceFormat, r = !0, a = a || u.seriesLayoutBy, null == o && (o = u.sourceHeader), s = s || u.dimensions;
    }var h = os(n, i, a, o, s);nx(t).source = new es({ data: n, fromDataset: r, seriesLayoutBy: a, sourceFormat: i, dimensionsDefine: h.dimensionsDefine, startIndex: h.startIndex, dimensionsDetectCount: h.dimensionsDetectCount, encodeDefine: e.encode });
  }function os(t, e, n, i, r) {
    if (!t) return { dimensionsDefine: ss(r) };var a, o;if (e === jy) "auto" === i || null == i ? ls(function (t) {
      null != t && "-" !== t && (b(t) ? null == o && (o = 1) : o = 0);
    }, n, t, 10) : o = i ? 1 : 0, r || 1 !== o || (r = [], ls(function (t, e) {
      r[e] = null != t ? t : "";
    }, n, t)), a = r ? r.length : n === tx ? t.length : t[0] ? t[0].length : null;else if (e === Zy) r || (r = us(t));else if (e === Ky) r || (r = [], f(t, function (t, e) {
      r.push(e);
    }));else if (e === qy) {
      var s = tr(t[0]);a = _(s) && s.length || 1;
    } else e === Qy && ip && O(!!r, "dimensions must be given if data is TypedArray.");return { startIndex: o, dimensionsDefine: ss(r), dimensionsDetectCount: a };
  }function ss(t) {
    if (t) {
      var e = N();return p(t, function (t) {
        if (t = o({}, S(t) ? t : { name: t }), null == t.name) return t;t.name += "", null == t.displayName && (t.displayName = t.name);var n = e.get(t.name);return n ? t.name += "-" + n.count++ : e.set(t.name, { count: 1 }), t;
      });
    }
  }function ls(t, e, n, i) {
    if (null == i && (i = 1 / 0), e === tx) for (var r = 0; r < n.length && i > r; r++) {
      t(n[r] ? n[r][0] : null, r);
    } else for (var a = n[0] || [], r = 0; r < a.length && i > r; r++) {
      t(a[r], r);
    }
  }function us(t) {
    for (var e, n = 0; n < t.length && !(e = t[n++]);) {}if (e) {
      var i = [];return f(e, function (t, e) {
        i.push(e);
      }), i;
    }
  }function hs(t, e, n) {
    function i(t, e, n) {
      for (var i = 0; n > i; i++) {
        t.push(e + i);
      }
    }function r(t) {
      var e = t.dimsDef;return e ? e.length : 1;
    }var a = {},
        o = ds(e);if (!o || !t) return a;var s,
        l,
        u = [],
        h = [],
        c = e.ecModel,
        d = nx(c).datasetMap,
        p = o.uid + "_" + n.seriesLayoutBy;t = t.slice(), f(t, function (e, n) {
      !S(e) && (t[n] = { name: e }), "ordinal" === e.type && null == s && (s = n, l = r(t[n])), a[e.name] = [];
    });var g = d.get(p) || d.set(p, { categoryWayDim: l, valueWayDim: 0 });return f(t, function (t, e) {
      var n = t.name,
          o = r(t);if (null == s) {
        var l = g.valueWayDim;i(a[n], l, o), i(h, l, o), g.valueWayDim += o;
      } else if (s === e) i(a[n], 0, o), i(u, 0, o);else {
        var l = g.categoryWayDim;i(a[n], l, o), i(h, l, o), g.categoryWayDim += o;
      }
    }), u.length && (a.itemName = u), h.length && (a.seriesName = h), a;
  }function cs(t, e, n) {
    var i = {},
        r = ds(t);if (!r) return i;var a,
        o = e.sourceFormat,
        s = e.dimensionsDefine;(o === Zy || o === Ky) && f(s, function (t, e) {
      "name" === (S(t) ? t.name : t) && (a = e);
    });var l = function () {
      function t(t) {
        return null != t.v && null != t.n;
      }for (var i = {}, r = {}, l = [], u = 0, h = Math.min(5, n); h > u; u++) {
        var c = ps(e.data, o, e.seriesLayoutBy, s, e.startIndex, u);l.push(c);var d = c === ex.Not;if (d && null == i.v && u !== a && (i.v = u), (null == i.n || i.n === i.v || !d && l[i.n] === ex.Not) && (i.n = u), t(i) && l[i.n] !== ex.Not) return i;d || (c === ex.Might && null == r.v && u !== a && (r.v = u), (null == r.n || r.n === r.v) && (r.n = u));
      }return t(i) ? i : t(r) ? r : null;
    }();if (l) {
      i.value = l.v;var u = null != a ? a : l.n;i.itemName = [u], i.seriesName = [u];
    }return i;
  }function ds(t) {
    var e = t.option,
        n = e.data;return n ? void 0 : t.ecModel.getComponent("dataset", e.datasetIndex || 0);
  }function fs(t, e) {
    return ps(t.data, t.sourceFormat, t.seriesLayoutBy, t.dimensionsDefine, t.startIndex, e);
  }function ps(t, e, n, i, r, a) {
    function o(t) {
      var e = b(t);return null != t && isFinite(t) && "" !== t ? e ? ex.Might : ex.Not : e && "-" !== t ? ex.Must : void 0;
    }var s,
        l = 5;if (A(t)) return ex.Not;var u, h;if (i) {
      var c = i[a];S(c) ? (u = c.name, h = c.type) : b(c) && (u = c);
    }if (null != h) return "ordinal" === h ? ex.Must : ex.Not;if (e === jy) {
      if (n === tx) {
        for (var d = t[a], f = 0; f < (d || []).length && l > f; f++) {
          if (null != (s = o(d[r + f]))) return s;
        }
      } else for (var f = 0; f < t.length && l > f; f++) {
        var p = t[r + f];if (p && null != (s = o(p[a]))) return s;
      }
    } else if (e === Zy) {
      if (!u) return ex.Not;for (var f = 0; f < t.length && l > f; f++) {
        var g = t[f];if (g && null != (s = o(g[u]))) return s;
      }
    } else if (e === Ky) {
      if (!u) return ex.Not;var d = t[u];if (!d || A(d)) return ex.Not;for (var f = 0; f < d.length && l > f; f++) {
        if (null != (s = o(d[f]))) return s;
      }
    } else if (e === qy) for (var f = 0; f < t.length && l > f; f++) {
      var g = t[f],
          v = tr(g);if (!_(v)) return ex.Not;if (null != (s = o(v[a]))) return s;
    }return ex.Not;
  }function gs(t, e) {
    if (e) {
      var n = e.seiresIndex,
          i = e.seriesId,
          r = e.seriesName;return null != n && t.componentIndex !== n || null != i && t.id !== i || null != r && t.name !== r;
    }
  }function vs(t, e) {
    var n = t.color && !t.colorLayer;f(e, function (e, a) {
      "colorLayer" === a && n || Wy.hasClass(a) || ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? t[a] = t[a] ? r(t[a], e, !1) : i(e) : null == t[a] && (t[a] = e));
    });
  }function ms(t) {
    t = t, this.option = {}, this.option[ix] = 1, this._componentsMap = N({ series: [] }), this._seriesIndices, this._seriesIndicesMap, vs(t, this._theme.option), r(t, Xy, !1), this.mergeOption(t);
  }function ys(t, e) {
    _(e) || (e = e ? [e] : []);var n = {};return f(e, function (e) {
      n[e] = (t.get(e) || []).slice();
    }), n;
  }function xs(t, e, n) {
    var i = e.type ? e.type : n ? n.subType : Wy.determineSubType(t, e);return i;
  }function _s(t, e) {
    t._seriesIndicesMap = N(t._seriesIndices = p(e, function (t) {
      return t.componentIndex;
    }) || []);
  }function ws(t, e) {
    return e.hasOwnProperty("subType") ? v(t, function (t) {
      return t.subType === e.subType;
    }) : t;
  }function bs(t) {
    if (ip && !t._seriesIndices) throw new Error("Option should contains series.");
  }function Ss(t) {
    f(ax, function (e) {
      this[e] = y(t[e], t);
    }, this);
  }function Ms() {
    this._coordinateSystems = [];
  }function As(t) {
    this._api = t, this._timelineOptions = [], this._mediaList = [], this._mediaDefault, this._currentMediaIndices = [], this._optionBackup, this._newBaseOption;
  }function Is(t, e, n) {
    var i,
        r,
        a = [],
        o = [],
        s = t.timeline;if (t.baseOption && (r = t.baseOption), (s || t.options) && (r = r || {}, a = (t.options || []).slice()), t.media) {
      r = r || {};var l = t.media;sx(l, function (t) {
        t && t.option && (t.query ? o.push(t) : i || (i = t));
      });
    }return r || (r = t), r.timeline || (r.timeline = s), sx([r].concat(a).concat(p(o, function (t) {
      return t.option;
    })), function (t) {
      sx(e, function (e) {
        e(t, n);
      });
    }), { baseOption: r, timelineOptions: a, mediaDefault: i, mediaList: o };
  }function Ts(t, e, n) {
    var i = { width: e, height: n, aspectratio: e / n },
        r = !0;return f(t, function (t, e) {
      var n = e.match(cx);if (n && n[1] && n[2]) {
        var a = n[1],
            o = n[2].toLowerCase();Cs(i[o], t, a) || (r = !1);
      }
    }), r;
  }function Cs(t, e, n) {
    return "min" === n ? t >= e : "max" === n ? e >= t : t === e;
  }function Ds(t, e) {
    return t.join(",") === e.join(",");
  }function ks(t, e) {
    e = e || {}, sx(e, function (e, n) {
      if (null != e) {
        var i = t[n];if (Wy.hasClass(n)) {
          e = Qi(e), i = Qi(i);var r = nr(i, e);t[n] = ux(r, function (t) {
            return t.option && t.exist ? hx(t.exist, t.option, !0) : t.exist || t.option;
          });
        } else t[n] = hx(i, e, !0);
      }
    });
  }function Ps(t) {
    var e = t && t.itemStyle;if (e) for (var n = 0, i = px.length; i > n; n++) {
      var a = px[n],
          o = e.normal,
          s = e.emphasis;o && o[a] && (t[a] = t[a] || {}, t[a].normal ? r(t[a].normal, o[a]) : t[a].normal = o[a], o[a] = null), s && s[a] && (t[a] = t[a] || {}, t[a].emphasis ? r(t[a].emphasis, s[a]) : t[a].emphasis = s[a], s[a] = null);
    }
  }function Ls(t, e, n) {
    if (t && t[e] && (t[e].normal || t[e].emphasis)) {
      var i = t[e].normal,
          r = t[e].emphasis;i && (n ? (t[e].normal = t[e].emphasis = null, s(t[e], i)) : t[e] = i), r && (t.emphasis = t.emphasis || {}, t.emphasis[e] = r);
    }
  }function Os(t) {
    Ls(t, "itemStyle"), Ls(t, "lineStyle"), Ls(t, "areaStyle"), Ls(t, "label"), Ls(t, "labelLine"), Ls(t, "upperLabel"), Ls(t, "edgeLabel");
  }function Es(t, e) {
    var n = fx(t) && t[e],
        i = fx(n) && n.textStyle;if (i) for (var r = 0, a = Sv.length; a > r; r++) {
      var e = Sv[r];i.hasOwnProperty(e) && (n[e] = i[e]);
    }
  }function Bs(t) {
    t && (Os(t), Es(t, "label"), t.emphasis && Es(t.emphasis, "label"));
  }function zs(t) {
    if (fx(t)) {
      Ps(t), Os(t), Es(t, "label"), Es(t, "upperLabel"), Es(t, "edgeLabel"), t.emphasis && (Es(t.emphasis, "label"), Es(t.emphasis, "upperLabel"), Es(t.emphasis, "edgeLabel"));var e = t.markPoint;e && (Ps(e), Bs(e));var n = t.markLine;n && (Ps(n), Bs(n));var i = t.markArea;i && Bs(i);var r = t.data;if ("graph" === t.type) {
        r = r || t.nodes;var a = t.links || t.edges;if (a && !A(a)) for (var o = 0; o < a.length; o++) {
          Bs(a[o]);
        }f(t.categories, function (t) {
          Os(t);
        });
      }if (r && !A(r)) for (var o = 0; o < r.length; o++) {
        Bs(r[o]);
      }var e = t.markPoint;if (e && e.data) for (var s = e.data, o = 0; o < s.length; o++) {
        Bs(s[o]);
      }var n = t.markLine;if (n && n.data) for (var l = n.data, o = 0; o < l.length; o++) {
        _(l[o]) ? (Bs(l[o][0]), Bs(l[o][1])) : Bs(l[o]);
      }"gauge" === t.type ? (Es(t, "axisLabel"), Es(t, "title"), Es(t, "detail")) : "treemap" === t.type ? (Ls(t.breadcrumb, "itemStyle"), f(t.levels, function (t) {
        Os(t);
      })) : "tree" === t.type && Os(t.leaves);
    }
  }function Rs(t) {
    return _(t) ? t : t ? [t] : [];
  }function Ns(t) {
    return (_(t) ? t[0] : t) || {};
  }function Fs(t, e) {
    e = e.split(",");for (var n = t, i = 0; i < e.length && (n = n && n[e[i]], null != n); i++) {}return n;
  }function Vs(t, e, n, i) {
    e = e.split(",");for (var r, a = t, o = 0; o < e.length - 1; o++) {
      r = e[o], null == a[r] && (a[r] = {}), a = a[r];
    }(i || null == a[e[o]]) && (a[e[o]] = n);
  }function Hs(t) {
    f(vx, function (e) {
      e[0] in t && !(e[1] in t) && (t[e[1]] = t[e[0]]);
    });
  }function Ws(t) {
    f(t, function (e, n) {
      var i = [],
          r = [0 / 0, 0 / 0],
          a = [e.stackResultDimension, e.stackedOverDimension],
          o = e.data,
          s = e.isStackedByIndex,
          l = o.map(a, function (a, l, u) {
        var h = o.get(e.stackedDimension, u);if (isNaN(h)) return r;var c, d;s ? d = o.getRawIndex(u) : c = o.get(e.stackedByDimension, u);for (var f = 0 / 0, p = n - 1; p >= 0; p--) {
          var g = t[p];if (s || (d = g.data.rawIndexOf(g.stackedByDimension, c)), d >= 0) {
            var v = g.data.getByRawIndex(g.stackResultDimension, d);if (h >= 0 && v > 0 || 0 >= h && 0 > v) {
              h += v, f = v;break;
            }
          }
        }return i[0] = h, i[1] = f, i;
      });o.hostModel.setData(l), e.data = l;
    });
  }function Gs(t, e) {
    es.isInstance(t) || (t = es.seriesDataToSource(t)), this._source = t;var n = this._data = t.data,
        i = t.sourceFormat;if (i === Qy) {
      if (ip && null == e) throw new Error("Typed array data must specify dimension size");this._offset = 0, this._dimSize = e, this._data = n;
    }var r = bx[i === jy ? i + "_" + t.seriesLayoutBy : i];ip && O(r, "Invalide sourceFormat: " + i), o(this, r);
  }function Xs() {
    return this._data.length;
  }function Us(t) {
    return this._data[t];
  }function Ys(t) {
    for (var e = 0; e < t.length; e++) {
      this._data.push(t[e]);
    }
  }function qs(t, e, n) {
    return null != n ? t[n] : t;
  }function js(t, e, n, i) {
    return Zs(t[i], this._dimensionInfos[e]);
  }function Zs(t, e) {
    var n = e && e.type;if ("ordinal" === n) {
      var i = e && e.ordinalMeta;return i ? i.parseAndCollect(t) : t;
    }return "time" === n && "number" != typeof t && null != t && "-" !== t && (t = +Do(t)), null == t || "" === t ? 0 / 0 : +t;
  }function Ks(t, e, n) {
    if (t) {
      var i = t.getRawDataItem(e);if (null != i) {
        var r,
            a,
            o = t.getProvider().getSource().sourceFormat,
            s = t.getDimensionInfo(n);return s && (r = s.name, a = s.index), Sx[o](i, e, a, r);
      }
    }
  }function $s(t, e, n) {
    if (t) {
      var i = t.getProvider().getSource().sourceFormat;if (i === qy || i === Zy) {
        var r = t.getRawDataItem(e);return i !== qy || S(r) || (r = null), r ? r[n] : void 0;
      }
    }
  }function Qs(t) {
    return new Js(t);
  }function Js(t) {
    t = t || {}, this._reset = t.reset, this._plan = t.plan, this._count = t.count, this._onDirty = t.onDirty, this._dirty = !0, this.context;
  }function tl(t, e, n, i, r, a) {
    Cx.reset(n, i, r, a), t._callingProgress = e, t._callingProgress({ start: n, end: i, count: i - n, next: Cx.next }, t.context);
  }function el(t, e) {
    t._dueIndex = t._outputDueEnd = t._dueEnd = 0, t._settedOutputEnd = null;var n, i;!e && t._reset && (n = t._reset(t.context), n && n.progress && (i = n.forceFirstProgress, n = n.progress), _(n) && !n.length && (n = null)), t._progress = n, t._modBy = t._modDataCount = null;var r = t._downstream;return r && r.dirty(), i;
  }function nl(t) {
    var e = t.name;rr(t) || (t.name = il(t) || e);
  }function il(t) {
    var e = t.getRawData(),
        n = e.mapDimension("seriesName", !0),
        i = [];return f(n, function (t) {
      var n = e.getDimensionInfo(t);n.displayName && i.push(n.displayName);
    }), i.join(" ");
  }function rl(t) {
    return t.model.getRawData().count();
  }function al(t) {
    var e = t.model;return e.setData(e.getRawData().cloneShallow()), ol;
  }function ol(t, e) {
    e.outputData && t.end > e.outputData.count() && e.model.getRawData().cloneShallow(e.outputData);
  }function sl(t, e) {
    f(t.CHANGABLE_METHODS, function (n) {
      t.wrapMethod(n, x(ll, e));
    });
  }function ll(t) {
    var e = ul(t);e && e.setOutputEnd(this.count());
  }function ul(t) {
    var e = (t.ecModel || {}).scheduler,
        n = e && e.getPipeline(t.uid);if (n) {
      var i = n.currentTask;if (i) {
        var r = i.agentStubMap;r && (i = r.get(t.uid));
      }return i;
    }
  }function hl() {
    this.group = new _g(), this.uid = go("viewChart"), this.renderTask = Qs({ plan: fl, reset: pl }), this.renderTask.context = { view: this };
  }function cl(t, e, n) {
    if (t && (t.trigger(e, n), t.isGroup && !Na(t))) for (var i = 0, r = t.childCount(); r > i; i++) {
      cl(t.childAt(i), e, n);
    }
  }function dl(t, e, n) {
    var i = or(t, e),
        r = e && null != e.highlightKey ? Fa(e.highlightKey) : null;null != i ? f(Qi(i), function (e) {
      cl(t.getItemGraphicEl(e), n, r);
    }) : t.eachItemGraphicEl(function (t) {
      cl(t, n, r);
    });
  }function fl(t) {
    return Bx(t.model);
  }function pl(t) {
    var e = t.model,
        n = t.ecModel,
        i = t.api,
        r = t.payload,
        a = e.pipelineContext.progressiveRender,
        o = t.view,
        s = r && Ex(r).updateMethod,
        l = a ? "incrementalPrepareRender" : s && o[s] ? s : "render";return "render" !== l && o[l](e, n, i, r), Rx[l];
  }function gl(t, e, n) {
    function i() {
      h = new Date().getTime(), c = null, t.apply(o, s || []);
    }var r,
        a,
        o,
        s,
        l,
        u = 0,
        h = 0,
        c = null;e = e || 0;var d = function d() {
      r = new Date().getTime(), o = this, s = arguments;var t = l || e,
          d = l || n;l = null, a = r - (d ? u : h) - t, clearTimeout(c), d ? c = setTimeout(i, t) : a >= 0 ? i() : c = setTimeout(i, -a), u = r;
    };return d.clear = function () {
      c && (clearTimeout(c), c = null);
    }, d.debounceNextCall = function (t) {
      l = t;
    }, d;
  }function vl(t, e, n, i) {
    var r = t[e];if (r) {
      var a = r[Nx] || r,
          o = r[Vx],
          s = r[Fx];if (s !== n || o !== i) {
        if (null == n || !i) return t[e] = a;r = t[e] = gl(a, n, "debounce" === i), r[Nx] = a, r[Vx] = i, r[Fx] = n;
      }return r;
    }
  }function ml(t, e, n, i) {
    this.ecInstance = t, this.api = e, this.unfinished;var n = this._dataProcessorHandlers = n.slice(),
        i = this._visualHandlers = i.slice();this._allHandlers = n.concat(i), this._stageTaskMap = N();
  }function yl(t, e, n, i, r) {
    function a(t, e) {
      return t.setDirty && (!t.dirtyMap || t.dirtyMap.get(e.__pipeline.id));
    }r = r || {};var o;f(e, function (e) {
      if (!r.visualType || r.visualType === e.visualType) {
        var s = t._stageTaskMap.get(e.uid),
            l = s.seriesTaskMap,
            u = s.overallTask;if (u) {
          var h,
              c = u.agentStubMap;c.each(function (t) {
            a(r, t) && (t.dirty(), h = !0);
          }), h && u.dirty(), qx(u, i);var d = t.getPerformArgs(u, r.block);c.each(function (t) {
            t.perform(d);
          }), o |= u.perform(d);
        } else l && l.each(function (s) {
          a(r, s) && s.dirty();var l = t.getPerformArgs(s, r.block);l.skip = !e.performRawSeries && n.isSeriesFiltered(s.context.model), qx(s, i), o |= s.perform(l);
        });
      }
    }), t.unfinished |= o;
  }function xl(t, e, n, i, r) {
    function a(n) {
      var a = n.uid,
          s = o.get(a) || o.set(a, Qs({ plan: Al, reset: Il, count: Cl }));s.context = { model: n, ecModel: i, api: r, useClearVisual: e.isVisual && !e.isLayout, plan: e.plan, reset: e.reset, scheduler: t }, Dl(t, n, s);
    }var o = n.seriesTaskMap || (n.seriesTaskMap = N()),
        s = e.seriesType,
        l = e.getTargetSeries;e.createOnAllSeries ? i.eachRawSeries(a) : s ? i.eachRawSeriesByType(s, a) : l && l(i, r).each(a);var u = t._pipelineMap;o.each(function (t, e) {
      u.get(e) || (t.dispose(), o.removeKey(e));
    });
  }function _l(t, e, n, i, r) {
    function a(e) {
      var n = e.uid,
          i = s.get(n);i || (i = s.set(n, Qs({ reset: bl, onDirty: Ml })), o.dirty()), i.context = { model: e, overallProgress: h, modifyOutputEnd: c }, i.agent = o, i.__block = h, Dl(t, e, i);
    }var o = n.overallTask = n.overallTask || Qs({ reset: wl });o.context = { ecModel: i, api: r, overallReset: e.overallReset, scheduler: t };var s = o.agentStubMap = o.agentStubMap || N(),
        l = e.seriesType,
        u = e.getTargetSeries,
        h = !0,
        c = e.modifyOutputEnd;l ? i.eachRawSeriesByType(l, a) : u ? u(i, r).each(a) : (h = !1, f(i.getSeries(), a));var d = t._pipelineMap;s.each(function (t, e) {
      d.get(e) || (t.dispose(), o.dirty(), s.removeKey(e));
    });
  }function wl(t) {
    t.overallReset(t.ecModel, t.api, t.payload);
  }function bl(t) {
    return t.overallProgress && Sl;
  }function Sl() {
    this.agent.dirty(), this.getDownstream().dirty();
  }function Ml() {
    this.agent && this.agent.dirty();
  }function Al(t) {
    return t.plan && t.plan(t.model, t.ecModel, t.api, t.payload);
  }function Il(t) {
    t.useClearVisual && t.data.clearAllVisual();var e = t.resetDefines = Qi(t.reset(t.model, t.ecModel, t.api, t.payload));return e.length > 1 ? p(e, function (t, e) {
      return Tl(e);
    }) : jx;
  }function Tl(t) {
    return function (e, n) {
      var i = n.data,
          r = n.resetDefines[t];if (r && r.dataEach) for (var a = e.start; a < e.end; a++) {
        r.dataEach(i, a);
      } else r && r.progress && r.progress(e, i);
    };
  }function Cl(t) {
    return t.data.count();
  }function Dl(t, e, n) {
    var i = e.uid,
        r = t._pipelineMap.get(i);!r.head && (r.head = n), r.tail && r.tail.pipe(n), r.tail = n, n.__idxInPipeline = r.count++, n.__pipeline = r;
  }function kl(t) {
    Zx = null;try {
      t(Kx, $x);
    } catch (e) {}return Zx;
  }function Pl(t, e) {
    for (var n in e.prototype) {
      t[n] = V;
    }
  }function Ll(t) {
    if (b(t)) {
      var e = new DOMParser();t = e.parseFromString(t, "text/xml");
    }for (9 === t.nodeType && (t = t.firstChild); "svg" !== t.nodeName.toLowerCase() || 1 !== t.nodeType;) {
      t = t.nextSibling;
    }return t;
  }function Ol() {
    this._defs = {}, this._root = null, this._isDefine = !1, this._isText = !1;
  }function El(t, e) {
    for (var n = t.firstChild; n;) {
      if (1 === n.nodeType) {
        var i = n.getAttribute("offset");i = i.indexOf("%") > 0 ? parseInt(i, 10) / 100 : i ? parseFloat(i) : 0;var r = n.getAttribute("stop-color") || "#000000";e.addColorStop(i, r);
      }n = n.nextSibling;
    }
  }function Bl(t, e) {
    t && t.__inheritedStyle && (e.__inheritedStyle || (e.__inheritedStyle = {}), s(e.__inheritedStyle, t.__inheritedStyle));
  }function zl(t) {
    for (var e = E(t).split(a_), n = [], i = 0; i < e.length; i += 2) {
      var r = parseFloat(e[i]),
          a = parseFloat(e[i + 1]);n.push([r, a]);
    }return n;
  }function Rl(t, e, n, i) {
    var r = e.__inheritedStyle || {},
        a = "text" === e.type;if (1 === t.nodeType && (Fl(t, e), o(r, Vl(t)), !i)) for (var s in l_) {
      if (l_.hasOwnProperty(s)) {
        var l = t.getAttribute(s);null != l && (r[l_[s]] = l);
      }
    }var u = a ? "textFill" : "fill",
        h = a ? "textStroke" : "stroke";e.style = e.style || new Dg();var c = e.style;null != r.fill && c.set(u, Nl(r.fill, n)), null != r.stroke && c.set(h, Nl(r.stroke, n)), f(["lineWidth", "opacity", "fillOpacity", "strokeOpacity", "miterLimit", "fontSize"], function (t) {
      var e = "lineWidth" === t && a ? "textStrokeWidth" : t;null != r[t] && c.set(e, parseFloat(r[t]));
    }), r.textBaseline && "auto" !== r.textBaseline || (r.textBaseline = "alphabetic"), "alphabetic" === r.textBaseline && (r.textBaseline = "bottom"), "start" === r.textAlign && (r.textAlign = "left"), "end" === r.textAlign && (r.textAlign = "right"), f(["lineDashOffset", "lineCap", "lineJoin", "fontWeight", "fontFamily", "fontStyle", "textAlign", "textBaseline"], function (t) {
      null != r[t] && c.set(t, r[t]);
    }), r.lineDash && (e.style.lineDash = E(r.lineDash).split(a_)), c[h] && "none" !== c[h] && (e[h] = !0), e.__inheritedStyle = r;
  }function Nl(t, e) {
    var n = e && t && t.match(u_);if (n) {
      var i = E(n[1]),
          r = e[i];return r;
    }return t;
  }function Fl(t, e) {
    var n = t.getAttribute("transform");if (n) {
      n = n.replace(/,/g, " ");var i = null,
          r = [];n.replace(h_, function (t, e, n) {
        r.push(e, n);
      });for (var a = r.length - 1; a > 0; a -= 2) {
        var o = r[a],
            s = r[a - 1];switch (i = i || Pe(), s) {case "translate":
            o = E(o).split(a_), Be(i, i, [parseFloat(o[0]), parseFloat(o[1] || 0)]);break;case "scale":
            o = E(o).split(a_), Re(i, i, [parseFloat(o[0]), parseFloat(o[1] || o[0])]);break;case "rotate":
            o = E(o).split(a_), ze(i, i, parseFloat(o[0]));break;case "skew":
            o = E(o).split(a_), console.warn("Skew transform is not supported yet");break;case "matrix":
            var o = E(o).split(a_);i[0] = parseFloat(o[0]), i[1] = parseFloat(o[1]), i[2] = parseFloat(o[2]), i[3] = parseFloat(o[3]), i[4] = parseFloat(o[4]), i[5] = parseFloat(o[5]);}
      }e.setLocalTransform(i);
    }
  }function Vl(t) {
    var e = t.getAttribute("style"),
        n = {};if (!e) return n;var i = {};c_.lastIndex = 0;for (var r; null != (r = c_.exec(e));) {
      i[r[1]] = r[2];
    }for (var a in l_) {
      l_.hasOwnProperty(a) && null != i[a] && (n[l_[a]] = i[a]);
    }return n;
  }function Hl(t, e, n) {
    var i = e / t.width,
        r = n / t.height,
        a = Math.min(i, r),
        o = [a, a],
        s = [-(t.x + t.width / 2) * a + e / 2, -(t.y + t.height / 2) * a + n / 2];return { scale: o, position: s };
  }function Wl(t, e) {
    return function (n, i, r) {
      return !e && this._disposed ? void au(this.id) : (n = n && n.toLowerCase(), void Dp.prototype[t].call(this, n, i, r));
    };
  }function Gl() {
    Dp.call(this);
  }function Xl(t, e, n) {
    function r(t, e) {
      return t.__prio - e.__prio;
    }n = n || {}, "string" == typeof e && (e = q_[e]), this.id, this.group, this._dom = t;var a = "canvas";ip && (a = ("undefined" == typeof window ? global : window).__ECHARTS__DEFAULT__RENDERER__ || a);var o = this._zr = qi(t, { renderer: n.renderer || a, devicePixelRatio: n.devicePixelRatio, width: n.width, height: n.height });this._throttledZrFlush = gl(y(o.flush, o), 17);var e = i(e);e && yx(e, !0), this._theme = e, this._chartsViews = [], this._chartsMap = {}, this._componentsViews = [], this._componentsMap = {}, this._coordSysMgr = new Ms();var s = this._api = uu(this);On(Y_, r), On(G_, r), this._scheduler = new ml(this, s, G_, Y_), Dp.call(this, this._ecEventProcessor = new hu()), this._messageCenter = new Gl(), this._initEvents(), this.resize = y(this.resize, this), this._pendingActions = [], o.animation.on("frame", this._onframe, this), Ql(o, this), B(this);
  }function Ul(t, e, n) {
    if (this._disposed) return void au(this.id);var i,
        r = this._model,
        a = this._coordSysMgr.getCoordinateSystems();e = lr(r, e);for (var o = 0; o < a.length; o++) {
      var s = a[o];if (s[t] && null != (i = s[t](r, e, n))) return i;
    }ip && console.warn("No coordinate system that supports " + t + " found by the given finder.");
  }function Yl(t) {
    var e = t._model,
        n = t._scheduler;n.restorePipelines(e), n.prepareStageTasks(), Jl(t, "component", e, n), Jl(t, "chart", e, n), n.plan();
  }function ql(t, e, n, i, r) {
    function a(i) {
      i && i.__alive && i[e] && i[e](i.__model, o, t._api, n);
    }var o = t._model;if (!i) return void v_(t._componentsViews.concat(t._chartsViews), a);var s = {};s[i + "Id"] = n[i + "Id"], s[i + "Index"] = n[i + "Index"], s[i + "Name"] = n[i + "Name"];var l = { mainType: i, query: s };r && (l.subType = r);var u = n.excludeSeriesId;null != u && (u = N(Qi(u))), o && o.eachComponent(l, function (e) {
      u && null != u.get(e.id) || a(t["series" === i ? "_chartsMap" : "_componentsMap"][e.__viewId]);
    }, t);
  }function jl(t, e) {
    var n = t._chartsMap,
        i = t._scheduler;e.eachSeries(function (t) {
      i.updateStreamModes(t, n[t.__viewId]);
    });
  }function Zl(t, e) {
    var n = t.type,
        i = t.escapeConnect,
        r = H_[n],
        a = r.actionInfo,
        l = (a.update || "update").split(":"),
        u = l.pop();l = null != l[0] && x_(l[0]), this[B_] = !0;var h = [t],
        c = !1;t.batch && (c = !0, h = p(t.batch, function (e) {
      return e = s(o({}, e), t), e.batch = null, e;
    }));var d,
        f = [],
        g = "highlight" === n || "downplay" === n;v_(h, function (t) {
      d = r.action(t, this._model, this._api), d = d || o({}, t), d.type = a.event || d.type, f.push(d), g ? ql(this, u, t, "series") : l && ql(this, u, t, l.main, l.sub);
    }, this), "none" === u || g || l || (this[z_] ? (Yl(this), F_.update.call(this, t), this[z_] = !1) : F_[u].call(this, t)), d = c ? { type: a.event || n, escapeConnect: i, batch: f } : f[0], this[B_] = !1, !e && this._messageCenter.trigger(d.type, d);
  }function Kl(t) {
    for (var e = this._pendingActions; e.length;) {
      var n = e.shift();Zl.call(this, n, t);
    }
  }function $l(t) {
    !t && this.trigger("updated");
  }function Ql(t, e) {
    t.on("rendered", function () {
      e.trigger("rendered"), !t.animation.isFinished() || e[z_] || e._scheduler.unfinished || e._pendingActions.length || e.trigger("finished");
    });
  }function Jl(t, e, n, i) {
    function r(t) {
      var e = "_ec_" + t.id + "_" + t.type,
          r = s[e];if (!r) {
        var h = x_(t.type),
            c = a ? Px.getClass(h.main, h.sub) : hl.getClass(h.sub);ip && g_(c, h.sub + " does not exist."), r = new c(), r.init(n, u), s[e] = r, o.push(r), l.add(r.group);
      }t.__viewId = r.__id = e, r.__alive = !0, r.__model = t, r.group.__ecComponentInfo = { mainType: t.mainType, index: t.componentIndex }, !a && i.prepareView(r, t, n, u);
    }for (var a = "component" === e, o = a ? t._componentsViews : t._chartsViews, s = a ? t._componentsMap : t._chartsMap, l = t._zr, u = t._api, h = 0; h < o.length; h++) {
      o[h].__alive = !1;
    }a ? n.eachComponent(function (t, e) {
      "series" !== t && r(e);
    }) : n.eachSeries(r);for (var h = 0; h < o.length;) {
      var c = o[h];c.__alive ? h++ : (!a && c.renderTask.dispose(), l.remove(c.group), c.dispose(n, u), o.splice(h, 1), delete s[c.__id], c.__id = c.group.__ecComponentInfo = null);
    }
  }function tu(t) {
    t.clearColorPalette(), t.eachSeries(function (t) {
      t.clearColorPalette();
    });
  }function eu(t, e, n, i) {
    nu(t, e, n, i), v_(t._chartsViews, function (t) {
      t.__alive = !1;
    }), iu(t, e, n, i), v_(t._chartsViews, function (t) {
      t.__alive || t.remove(e, n);
    });
  }function nu(t, e, n, i, r) {
    v_(r || t._componentsViews, function (t) {
      var r = t.__model;t.render(r, e, n, i), lu(r, t);
    });
  }function iu(t, e, n, i, r) {
    var a,
        o = t._scheduler;e.eachSeries(function (e) {
      var n = t._chartsMap[e.__viewId];n.__alive = !0;var s = n.renderTask;o.updatePayload(s, i), r && r.get(e.uid) && s.dirty(), a |= s.perform(o.getPerformArgs(s)), n.group.silent = !!e.get("silent"), lu(e, n), su(e, n);
    }), o.unfinished |= a, ou(t, e), Gx(t._zr.dom, e);
  }function ru(t, e) {
    v_(U_, function (n) {
      n(t, e);
    });
  }function au(t) {
    ip && console.warn("Instance " + t + " has been disposed");
  }function ou(t, e) {
    var n = t._zr,
        i = n.storage,
        r = 0;i.traverse(function () {
      r++;
    }), r > e.get("hoverLayerThreshold") && !sp.node && e.eachSeries(function (e) {
      if (!e.preventUsingHoverLayer) {
        var n = t._chartsMap[e.__viewId];n.__alive && n.group.traverse(function (t) {
          t.useHoverLayer = !0;
        });
      }
    });
  }function su(t, e) {
    var n = t.get("blendMode") || null;ip && !sp.canvasSupported && n && "source-over" !== n && console.warn("Only canvas support blendMode"), e.group.traverse(function (t) {
      t.isGroup || t.style.blend !== n && t.setStyle("blend", n), t.eachPendingDisplayable && t.eachPendingDisplayable(function (t) {
        t.setStyle("blend", n);
      });
    });
  }function lu(t, e) {
    var n = t.get("z"),
        i = t.get("zlevel");e.group.traverse(function (t) {
      "group" !== t.type && (null != n && (t.z = n), null != i && (t.zlevel = i));
    });
  }function uu(t) {
    var e = t._coordSysMgr;return o(new Ss(t), { getCoordinateSystems: y(e.getCoordinateSystems, e), getComponentByElement: function getComponentByElement(e) {
        for (; e;) {
          var n = e.__ecComponentInfo;if (null != n) return t._model.getComponent(n.mainType, n.index);e = e.parent;
        }
      } });
  }function hu() {
    this.eventInfo;
  }function cu(t) {
    function e(t, e) {
      for (var n = 0; n < t.length; n++) {
        var i = t[n];i[a] = e;
      }
    }var n = 0,
        i = 1,
        r = 2,
        a = "__connectUpdateStatus";v_(W_, function (o, s) {
      t._messageCenter.on(s, function (o) {
        if (K_[t.group] && t[a] !== n) {
          if (o && o.escapeConnect) return;var s = t.makeActionFromEvent(o),
              l = [];v_(Z_, function (e) {
            e !== t && e.group === t.group && l.push(e);
          }), e(l, n), v_(l, function (t) {
            t[a] !== i && t.dispatchAction(s);
          }), e(l, r);
        }
      });
    });
  }function du(t, e, n) {
    if (ip) {
      if (vv.replace(".", "") - 0 < w_.zrender.replace(".", "") - 0) throw new Error("zrender/src " + vv + " is too old for ECharts " + __ + ". Current version need ZRender " + w_.zrender + "+");if (!t) throw new Error("Initialize failed: invalid dom.");
    }var i = vu(t);if (i) return ip && console.warn("There is a chart instance already initialized on the dom."), i;ip && (!I(t) || "CANVAS" === t.nodeName.toUpperCase() || (t.clientWidth || n && null != n.width) && (t.clientHeight || n && null != n.height) || console.warn("Can't get DOM width or height. Please check dom.clientWidth and dom.clientHeight. They should not be 0.For example, you may need to call this in the callback of window.onload."));var r = new Xl(t, e, n);return r.id = "ec_" + $_++, Z_[r.id] = r, hr(t, J_, r.id), cu(r), r;
  }function fu(t) {
    if (_(t)) {
      var e = t;t = null, v_(e, function (e) {
        null != e.group && (t = e.group);
      }), t = t || "g_" + Q_++, v_(e, function (e) {
        e.group = t;
      });
    }return K_[t] = !0, t;
  }function pu(t) {
    K_[t] = !1;
  }function gu(t) {
    "string" == typeof t ? t = Z_[t] : t instanceof Xl || (t = vu(t)), t instanceof Xl && !t.isDisposed() && t.dispose();
  }function vu(t) {
    return Z_[cr(t, J_)];
  }function mu(t) {
    return Z_[t];
  }function yu(t, e) {
    q_[t] = e;
  }function xu(t) {
    X_.push(t);
  }function _u(t, e) {
    Tu(G_, t, e, S_);
  }function wu(t) {
    U_.push(t);
  }function bu(t, e, n) {
    "function" == typeof e && (n = e, e = "");var i = y_(t) ? t.type : [t, t = { event: e }][0];t.event = (t.event || i).toLowerCase(), e = t.event, g_(R_.test(i) && R_.test(e)), H_[i] || (H_[i] = { action: n, actionInfo: t }), W_[e] = i;
  }function Su(t, e) {
    Ms.register(t, e);
  }function Mu(t) {
    var e = Ms.get(t);return e ? e.getDimensionsInfo ? e.getDimensionsInfo() : e.dimensions.slice() : void 0;
  }function Au(t, e) {
    Tu(Y_, t, e, T_, "layout");
  }function Iu(t, e) {
    Tu(Y_, t, e, k_, "visual");
  }function Tu(t, e, n, i, r) {
    if ((m_(e) || y_(e)) && (n = e, e = i), ip) {
      if (isNaN(e) || null == e) throw new Error("Illegal priority");v_(t, function (t) {
        g_(t.__raw !== n);
      });
    }var a = ml.wrapStageHandler(n, r);return a.__prio = e, a.__raw = n, t.push(a), a;
  }function Cu(t, e) {
    j_[t] = e;
  }function Du(t) {
    return Wy.extend(t);
  }function ku(t) {
    return Px.extend(t);
  }function Pu(t) {
    return kx.extend(t);
  }function Lu(t) {
    return hl.extend(t);
  }function Ou(t) {
    n("createCanvas", t);
  }function Eu(t, e, n) {
    f_.registerMap(t, e, n);
  }function Bu(t) {
    var e = f_.retrieveMap(t);return e && e[0] && { geoJson: e[0].geoJSON, specialAreas: e[0].specialAreas };
  }function zu(t) {
    return t;
  }function Ru(t, e, n, i, r) {
    this._old = t, this._new = e, this._oldKeyGetter = n || zu, this._newKeyGetter = i || zu, this.context = r;
  }function Nu(t, e, n, i, r) {
    for (var a = 0; a < t.length; a++) {
      var o = "_ec_" + r[i](t[a], a),
          s = e[o];null == s ? (n.push(o), e[o] = a) : (s.length || (e[o] = s = [s]), s.push(a));
    }
  }function Fu(t) {
    var e = {},
        n = e.encode = {},
        i = N(),
        r = [],
        a = [],
        o = e.userOutput = { dimensionNames: t.dimensions.slice(), encode: {} };f(t.dimensions, function (e) {
      var s = t.getDimensionInfo(e),
          l = s.coordDim;if (l) {
        ip && O(null == nw.get(l));var u = s.coordDimIndex;Vu(n, l)[u] = e, s.isExtraCoord || (i.set(l, 1), Wu(s.type) && (r[0] = e), Vu(o.encode, l)[u] = s.index), s.defaultTooltip && a.push(e);
      }nw.each(function (t, e) {
        var i = Vu(n, e),
            r = s.otherDims[e];null != r && r !== !1 && (i[r] = s.name);
      });
    });var s = [],
        l = {};i.each(function (t, e) {
      var i = n[e];l[e] = i[0], s = s.concat(i);
    }), e.dataDimsOnCoord = s, e.encodeFirstDimNotExtra = l;var u = n.label;u && u.length && (r = u.slice());var h = n.tooltip;return h && h.length ? a = h.slice() : a.length || (a = r.slice()), n.defaultedLabel = r, n.defaultedTooltip = a, e;
  }function Vu(t, e) {
    return t.hasOwnProperty(e) || (t[e] = []), t[e];
  }function Hu(t) {
    return "category" === t ? "ordinal" : "time" === t ? "time" : "float";
  }function Wu(t) {
    return !("ordinal" === t || "time" === t);
  }function Gu(t) {
    null != t && o(this, t), this.otherDims = {};
  }function Xu(t) {
    return t._rawCount > 65535 ? lw : hw;
  }function Uu(t) {
    var e = t.constructor;return e === Array ? t.slice() : new e(t);
  }function Yu(t, e) {
    f(cw.concat(e.__wrappedMethods || []), function (n) {
      e.hasOwnProperty(n) && (t[n] = e[n]);
    }), t.__wrappedMethods = e.__wrappedMethods, f(dw, function (n) {
      t[n] = i(e[n]);
    }), t._calculationInfo = o(e._calculationInfo);
  }function qu(t, e, n, i, r) {
    var a = sw[e.type],
        o = i - 1,
        s = e.name,
        l = t[s][o];if (l && l.length < n) {
      for (var u = new a(Math.min(r - o * n, n)), h = 0; h < l.length; h++) {
        u[h] = l[h];
      }t[s][o] = u;
    }for (var c = i * n; r > c; c += n) {
      t[s].push(new a(Math.min(r - c, n)));
    }
  }function ju(t) {
    var e = t._invertedIndicesMap;f(e, function (n, i) {
      var r = t._dimensionInfos[i],
          a = r.ordinalMeta;if (a) {
        n = e[i] = new uw(a.categories.length);for (var o = 0; o < n.length; o++) {
          n[o] = aw;
        }for (var o = 0; o < t._count; o++) {
          n[t.get(i, o)] = o;
        }
      }
    });
  }function Zu(t, e, n) {
    var i;if (null != e) {
      var r = t._chunkSize,
          a = Math.floor(n / r),
          o = n % r,
          s = t.dimensions[e],
          l = t._storage[s][a];if (l) {
        i = l[o];var u = t._dimensionInfos[s].ordinalMeta;u && u.categories.length && (i = u.categories[i]);
      }
    }return i;
  }function Ku(t) {
    return t;
  }function $u(t) {
    return t < this._count && t >= 0 ? this._indices[t] : -1;
  }function Qu(t, e) {
    var n = t._idList[e];return null == n && (n = Zu(t, t._idDimIdx, e)), null == n && (n = ow + e), n;
  }function Ju(t) {
    return _(t) || (t = [t]), t;
  }function th(t, e) {
    for (var n = 0; n < e.length; n++) {
      t._dimensionInfos[e[n]] || console.error("Unkown dimension " + e[n]);
    }
  }function eh(t, e) {
    var n = t.dimensions,
        i = new fw(p(n, t.getDimensionInfo, t), t.hostModel);Yu(i, t);for (var r = i._storage = {}, a = t._storage, o = 0; o < n.length; o++) {
      var s = n[o];a[s] && (u(e, s) >= 0 ? (r[s] = nh(a[s]), i._rawExtent[s] = ih(), i._extent[s] = null) : r[s] = a[s]);
    }return i;
  }function nh(t) {
    for (var e = new Array(t.length), n = 0; n < t.length; n++) {
      e[n] = Uu(t[n]);
    }return e;
  }function ih() {
    return [1 / 0, -1 / 0];
  }function rh(t, e, n) {
    function r(t, e, n) {
      null != nw.get(e) ? t.otherDims[e] = n : (t.coordDim = e, t.coordDimIndex = n, u.set(e, !0));
    }es.isInstance(e) || (e = es.seriesDataToSource(e)), n = n || {}, t = (t || []).slice();for (var a = (n.dimsDef || []).slice(), l = N(), u = N(), h = [], c = ah(e, t, a, n.dimCount), d = 0; c > d; d++) {
      var p = a[d] = o({}, S(a[d]) ? a[d] : { name: a[d] }),
          g = p.name,
          v = h[d] = new Gu();null != g && null == l.get(g) && (v.name = v.displayName = g, l.set(g, d)), null != p.type && (v.type = p.type), null != p.displayName && (v.displayName = p.displayName);
    }var m = n.encodeDef;!m && n.encodeDefaulter && (m = n.encodeDefaulter(e, c)), m = N(m), m.each(function (t, e) {
      if (t = Qi(t).slice(), 1 === t.length && !b(t[0]) && t[0] < 0) return void m.set(e, !1);var n = m.set(e, []);f(t, function (t, i) {
        b(t) && (t = l.get(t)), null != t && c > t && (n[i] = t, r(h[t], e, i));
      });
    });var y = 0;f(t, function (t) {
      var e, t, n, a;if (b(t)) e = t, t = {};else {
        e = t.name;var o = t.ordinalMeta;t.ordinalMeta = null, t = i(t), t.ordinalMeta = o, n = t.dimsDef, a = t.otherDims, t.name = t.coordDim = t.coordDimIndex = t.dimsDef = t.otherDims = null;
      }var l = m.get(e);if (l !== !1) {
        var l = Qi(l);if (!l.length) for (var u = 0; u < (n && n.length || 1); u++) {
          for (; y < h.length && null != h[y].coordDim;) {
            y++;
          }y < h.length && l.push(y++);
        }f(l, function (i, o) {
          var l = h[i];if (r(s(l, t), e, o), null == l.name && n) {
            var u = n[o];!S(u) && (u = { name: u }), l.name = l.displayName = u.name, l.defaultTooltip = u.defaultTooltip;
          }a && s(l.otherDims, a);
        });
      }
    });var x = n.generateCoord,
        _ = n.generateCoordCount,
        w = null != _;_ = x ? _ || 1 : 0;for (var M = x || "value", A = 0; c > A; A++) {
      var v = h[A] = h[A] || new Gu(),
          I = v.coordDim;null == I && (v.coordDim = oh(M, u, w), v.coordDimIndex = 0, (!x || 0 >= _) && (v.isExtraCoord = !0), _--), null == v.name && (v.name = oh(v.coordDim, l)), null != v.type || fs(e, A, v.name) !== ex.Must && (!v.isExtraCoord || null == v.otherDims.itemName && null == v.otherDims.seriesName) || (v.type = "ordinal");
    }return h;
  }function ah(t, e, n, i) {
    var r = Math.max(t.dimensionsDetectCount || 1, e.length, n.length, i || 0);return f(e, function (t) {
      var e = t.dimsDef;e && (r = Math.max(r, e.length));
    }), r;
  }function oh(t, e, n) {
    if (n || null != e.get(t)) {
      for (var i = 0; null != e.get(t + i);) {
        i++;
      }t += i;
    }return e.set(t, !0), t;
  }function sh(t) {
    this.coordSysName = t, this.coordSysDims = [], this.axisMap = N(), this.categoryAxisMap = N(), this.firstCategoryDimIndex = null;
  }function lh(t) {
    var e = t.get("coordinateSystem"),
        n = new sh(e),
        i = mw[e];return i ? (i(t, n, n.axisMap, n.categoryAxisMap), n) : void 0;
  }function uh(t) {
    return "category" === t.get("type");
  }function hh(t, e, n) {
    n = n || {};var i,
        r,
        a,
        o,
        s = n.byIndex,
        l = n.stackedCoordDimension,
        u = !(!t || !t.get("stack"));if (f(e, function (t, n) {
      b(t) && (e[n] = t = { name: t }), u && !t.isExtraCoord && (s || i || !t.ordinalMeta || (i = t), r || "ordinal" === t.type || "time" === t.type || l && l !== t.coordDim || (r = t));
    }), !r || s || i || (s = !0), r) {
      a = "__\x00ecstackresult", o = "__\x00ecstackedover", i && (i.createInvertedIndices = !0);var h = r.coordDim,
          c = r.type,
          d = 0;f(e, function (t) {
        t.coordDim === h && d++;
      }), e.push({ name: a, coordDim: h, coordDimIndex: d, type: c, isExtraCoord: !0, isCalculationCoord: !0 }), d++, e.push({ name: o, coordDim: o, coordDimIndex: d, type: c, isExtraCoord: !0, isCalculationCoord: !0 });
    }return { stackedDimension: r && r.name, stackedByDimension: i && i.name, isStackedByIndex: s, stackedOverDimension: o, stackResultDimension: a };
  }function ch(t, e) {
    return !!e && e === t.getCalculationInfo("stackedDimension");
  }function dh(t, e) {
    return ch(t, e) ? t.getCalculationInfo("stackResultDimension") : e;
  }function fh(t, e, n) {
    n = n || {}, es.isInstance(t) || (t = es.seriesDataToSource(t));var i,
        r = e.get("coordinateSystem"),
        a = Ms.get(r),
        o = lh(e);o && (i = p(o.coordSysDims, function (t) {
      var e = { name: t },
          n = o.axisMap.get(t);if (n) {
        var i = n.get("type");e.type = Hu(i);
      }return e;
    })), i || (i = a && (a.getDimensionsInfo ? a.getDimensionsInfo() : a.dimensions.slice()) || ["x", "y"]);var s,
        l,
        u = vw(t, { coordDimensions: i, generateCoord: n.generateCoord, encodeDefaulter: n.useEncodeDefaulter ? x(hs, i, e) : null });o && f(u, function (t, e) {
      var n = t.coordDim,
          i = o.categoryAxisMap.get(n);i && (null == s && (s = e), t.ordinalMeta = i.getOrdinalMeta()), null != t.otherDims.itemName && (l = !0);
    }), l || null == s || (u[s].otherDims.itemName = 0);var h = hh(e, u),
        c = new fw(u, e);c.setCalculationInfo(h);var d = null != s && ph(t) ? function (t, e, n, i) {
      return i === s ? n : this.defaultDimValueGetter(t, e, n, i);
    } : null;return c.hasItemOption = !1, c.initData(t, null, d), c;
  }function ph(t) {
    if (t.sourceFormat === qy) {
      var e = gh(t.data || []);return null != e && !_(tr(e));
    }
  }function gh(t) {
    for (var e = 0; e < t.length && null == t[e];) {
      e++;
    }return t[e];
  }function vh(t) {
    this._setting = t || {}, this._extent = [1 / 0, -1 / 0], this._interval = 0, this.init && this.init.apply(this, arguments);
  }function mh(t) {
    this.categories = t.categories || [], this._needCollect = t.needCollect, this._deduplication = t.deduplication, this._map;
  }function yh(t) {
    return t._map || (t._map = N(t.categories));
  }function xh(t) {
    return S(t) && null != t.value ? t.value : t + "";
  }function _h(t, e, n, i) {
    var r = {},
        a = t[1] - t[0],
        o = r.interval = Lo(a / e, !0);null != n && n > o && (o = r.interval = n), null != i && o > i && (o = r.interval = i);var s = r.intervalPrecision = wh(o),
        l = r.niceTickExtent = [ww(Math.ceil(t[0] / o) * o, s), ww(Math.floor(t[1] / o) * o, s)];return Sh(l, t), r;
  }function wh(t) {
    return Mo(t) + 2;
  }function bh(t, e, n) {
    t[e] = Math.max(Math.min(t[e], n[1]), n[0]);
  }function Sh(t, e) {
    !isFinite(t[0]) && (t[0] = e[0]), !isFinite(t[1]) && (t[1] = e[1]), bh(t, 0, e), bh(t, 1, e), t[0] > t[1] && (t[0] = t[1]);
  }function Mh(t) {
    return t.get("stack") || Mw + t.seriesIndex;
  }function Ah(t) {
    return t.dim + t.index;
  }function Ih(t, e) {
    var n = [];return e.eachSeriesByType(t, function (t) {
      Lh(t) && !Oh(t) && n.push(t);
    }), n;
  }function Th(t) {
    var e = {};f(t, function (t) {
      var n = t.coordinateSystem,
          i = n.getBaseAxis();if ("time" === i.type || "value" === i.type) for (var r = t.getData(), a = i.dim + "_" + i.index, o = r.mapDimension(i.dim), s = 0, l = r.count(); l > s; ++s) {
        var u = r.get(o, s);e[a] ? e[a].push(u) : e[a] = [u];
      }
    });var n = [];for (var i in e) {
      if (e.hasOwnProperty(i)) {
        var r = e[i];if (r) {
          r.sort(function (t, e) {
            return t - e;
          });for (var a = null, o = 1; o < r.length; ++o) {
            var s = r[o] - r[o - 1];s > 0 && (a = null === a ? s : Math.min(a, s));
          }n[i] = a;
        }
      }
    }return n;
  }function Ch(t) {
    var e = Th(t),
        n = [];return f(t, function (t) {
      var i,
          r = t.coordinateSystem,
          a = r.getBaseAxis(),
          o = a.getExtent();if ("category" === a.type) i = a.getBandWidth();else if ("value" === a.type || "time" === a.type) {
        var s = a.dim + "_" + a.index,
            l = e[s],
            u = Math.abs(o[1] - o[0]),
            h = a.scale.getExtent(),
            c = Math.abs(h[1] - h[0]);i = l ? u / c * l : u;
      } else {
        var d = t.getData();i = Math.abs(o[1] - o[0]) / d.count();
      }var f = _o(t.get("barWidth"), i),
          p = _o(t.get("barMaxWidth"), i),
          g = _o(t.get("barMinWidth") || 1, i),
          v = t.get("barGap"),
          m = t.get("barCategoryGap");n.push({ bandWidth: i, barWidth: f, barMaxWidth: p, barMinWidth: g, barGap: v, barCategoryGap: m, axisKey: Ah(a), stackId: Mh(t) });
    }), Dh(n);
  }function Dh(t) {
    var e = {};f(t, function (t) {
      var n = t.axisKey,
          i = t.bandWidth,
          r = e[n] || { bandWidth: i, remainedWidth: i, autoWidthCount: 0, categoryGap: "20%", gap: "30%", stacks: {} },
          a = r.stacks;e[n] = r;var o = t.stackId;a[o] || r.autoWidthCount++, a[o] = a[o] || { width: 0, maxWidth: 0 };var s = t.barWidth;s && !a[o].width && (a[o].width = s, s = Math.min(r.remainedWidth, s), r.remainedWidth -= s);var l = t.barMaxWidth;l && (a[o].maxWidth = l);var u = t.barMinWidth;u && (a[o].minWidth = u);var h = t.barGap;null != h && (r.gap = h);var c = t.barCategoryGap;null != c && (r.categoryGap = c);
    });var n = {};return f(e, function (t, e) {
      n[e] = {};var i = t.stacks,
          r = t.bandWidth,
          a = _o(t.categoryGap, r),
          o = _o(t.gap, 1),
          s = t.remainedWidth,
          l = t.autoWidthCount,
          u = (s - a) / (l + (l - 1) * o);u = Math.max(u, 0), f(i, function (t) {
        var e = t.maxWidth,
            n = t.minWidth;if (t.width) {
          var i = t.width;e && (i = Math.min(i, e)), n && (i = Math.max(i, n)), t.width = i, s -= i + o * i, l--;
        } else {
          var i = u;e && i > e && (i = Math.min(e, s)), n && n > i && (i = n), i !== u && (t.width = i, s -= i + o * i, l--);
        }
      }), u = (s - a) / (l + (l - 1) * o), u = Math.max(u, 0);var h,
          c = 0;f(i, function (t) {
        t.width || (t.width = u), h = t, c += t.width * (1 + o);
      }), h && (c -= h.width * o);var d = -c / 2;f(i, function (t, i) {
        n[e][i] = n[e][i] || { bandWidth: r, offset: d, width: t.width }, d += t.width * (1 + o);
      });
    }), n;
  }function kh(t, e, n) {
    if (t && e) {
      var i = t[Ah(e)];return null != i && null != n && (i = i[Mh(n)]), i;
    }
  }function Ph(t, e) {
    var n = Ih(t, e),
        i = Ch(n),
        r = {};f(n, function (t) {
      var e = t.getData(),
          n = t.coordinateSystem,
          a = n.getBaseAxis(),
          o = Mh(t),
          s = i[Ah(a)][o],
          l = s.offset,
          u = s.width,
          h = n.getOtherAxis(a),
          c = t.get("barMinHeight") || 0;r[o] = r[o] || [], e.setLayout({ bandWidth: s.bandWidth, offset: l, size: u });for (var d = e.mapDimension(h.dim), f = e.mapDimension(a.dim), p = ch(e, d), g = h.isHorizontal(), v = Eh(a, h, p), m = 0, y = e.count(); y > m; m++) {
        var x = e.get(d, m),
            _ = e.get(f, m),
            w = x >= 0 ? "p" : "n",
            b = v;p && (r[o][_] || (r[o][_] = { p: v, n: v }), b = r[o][_][w]);var S, M, A, I;if (g) {
          var T = n.dataToPoint([x, _]);S = b, M = T[1] + l, A = T[0] - v, I = u, Math.abs(A) < c && (A = (0 > A ? -1 : 1) * c), isNaN(A) || p && (r[o][_][w] += A);
        } else {
          var T = n.dataToPoint([_, x]);S = T[0] + l, M = b, A = u, I = T[1] - v, Math.abs(I) < c && (I = (0 >= I ? -1 : 1) * c), isNaN(I) || p && (r[o][_][w] += I);
        }e.setItemLayout(m, { x: S, y: M, width: A, height: I });
      }
    }, this);
  }function Lh(t) {
    return t.coordinateSystem && "cartesian2d" === t.coordinateSystem.type;
  }function Oh(t) {
    return t.pipelineContext && t.pipelineContext.large;
  }function Eh(t, e) {
    return e.toGlobalCoord(e.dataToCoord("log" === e.type ? 1 : 0));
  }function Bh(t, e) {
    return Hw(t, Vw(e));
  }function zh(t, e) {
    var n,
        i,
        r,
        a = t.type,
        o = e.getMin(),
        s = e.getMax(),
        l = t.getExtent();"ordinal" === a ? n = e.getCategories().length : (i = e.get("boundaryGap"), _(i) || (i = [i || 0, i || 0]), "boolean" == typeof i[0] && (ip && console.warn('Boolean type for boundaryGap is only allowed for ordinal axis. Please use string in percentage instead, e.g., "20%". Currently, boundaryGap is set to be 0.'), i = [0, 0]), i[0] = _o(i[0], 1), i[1] = _o(i[1], 1), r = l[1] - l[0] || Math.abs(l[0])), "dataMin" === o ? o = l[0] : "function" == typeof o && (o = o({ min: l[0], max: l[1] })), "dataMax" === s ? s = l[1] : "function" == typeof s && (s = s({ min: l[0], max: l[1] }));var u = null != o,
        h = null != s;null == o && (o = "ordinal" === a ? n ? 0 : 0 / 0 : l[0] - i[0] * r), null == s && (s = "ordinal" === a ? n ? n - 1 : 0 / 0 : l[1] + i[1] * r), (null == o || !isFinite(o)) && (o = 0 / 0), (null == s || !isFinite(s)) && (s = 0 / 0), t.setBlank(T(o) || T(s) || "ordinal" === a && !t.getOrdinalMeta().categories.length), e.getNeedCrossZero() && (o > 0 && s > 0 && !u && (o = 0), 0 > o && 0 > s && !h && (s = 0));var c = e.ecModel;if (c && "time" === a) {
      var d,
          p = Ih("bar", c);if (f(p, function (t) {
        d |= t.getBaseAxis() === e.axis;
      }), d) {
        var g = Ch(p),
            v = Rh(o, s, e, g);o = v.min, s = v.max;
      }
    }return { extent: [o, s], fixMin: u, fixMax: h };
  }function Rh(t, e, n, i) {
    var r = n.axis.getExtent(),
        a = r[1] - r[0],
        o = kh(i, n.axis);if (void 0 === o) return { min: t, max: e };var s = 1 / 0;f(o, function (t) {
      s = Math.min(t.offset, s);
    });var l = -1 / 0;f(o, function (t) {
      l = Math.max(t.offset + t.width, l);
    }), s = Math.abs(s), l = Math.abs(l);var u = s + l,
        h = e - t,
        c = 1 - (s + l) / a,
        d = h / c - h;return e += d * (l / u), t -= d * (s / u), { min: t, max: e };
  }function Nh(t, e) {
    var n = zh(t, e),
        i = n.extent,
        r = e.get("splitNumber");"log" === t.type && (t.base = e.get("logBase"));var a = t.type;t.setExtent(i[0], i[1]), t.niceExtent({ splitNumber: r, fixMin: n.fixMin, fixMax: n.fixMax, minInterval: "interval" === a || "time" === a ? e.get("minInterval") : null, maxInterval: "interval" === a || "time" === a ? e.get("maxInterval") : null });var o = e.get("interval");null != o && t.setInterval && t.setInterval(o);
  }function Fh(t, e) {
    if (e = e || t.get("type")) switch (e) {case "category":
        return new _w(t.getOrdinalMeta ? t.getOrdinalMeta() : t.getCategories(), [1 / 0, -1 / 0]);case "value":
        return new Sw();default:
        return (vh.getClass(e) || Sw).create(t);}
  }function Vh(t) {
    var e = t.scale.getExtent(),
        n = e[0],
        i = e[1];return !(n > 0 && i > 0 || 0 > n && 0 > i);
  }function Hh(t) {
    var e = t.getLabelModel().get("formatter"),
        n = "category" === t.type ? t.scale.getExtent()[0] : null;return "string" == typeof e ? e = function (e) {
      return function (n) {
        return n = t.scale.getLabel(n), e.replace("{value}", null != n ? n : "");
      };
    }(e) : "function" == typeof e ? function (i, r) {
      return null != n && (r = i - n), e(Wh(t, i), r);
    } : function (e) {
      return t.scale.getLabel(e);
    };
  }function Wh(t, e) {
    return "category" === t.type ? t.scale.getLabel(e) : e;
  }function Gh(t) {
    var e = t.model,
        n = t.scale;if (e.get("axisLabel.show") && !n.isBlank()) {
      var i,
          r,
          a = "category" === t.type,
          o = n.getExtent();a ? r = n.count() : (i = n.getTicks(), r = i.length);var s,
          l = t.getLabelModel(),
          u = Hh(t),
          h = 1;r > 40 && (h = Math.ceil(r / 40));for (var c = 0; r > c; c += h) {
        var d = i ? i[c] : o[0] + c,
            f = u(d),
            p = l.getTextRect(f),
            g = Xh(p, l.get("rotate") || 0);s ? s.union(g) : s = g;
      }return s;
    }
  }function Xh(t, e) {
    var n = e * Math.PI / 180,
        i = t.plain(),
        r = i.width,
        a = i.height,
        o = r * Math.abs(Math.cos(n)) + Math.abs(a * Math.sin(n)),
        s = r * Math.abs(Math.sin(n)) + Math.abs(a * Math.cos(n)),
        l = new An(i.x, i.y, o, s);return l;
  }function Uh(t) {
    var e = t.get("interval");return null == e ? "auto" : e;
  }function Yh(t) {
    return "category" === t.type && 0 === Uh(t.getLabelModel());
  }function qh(t, e) {
    if ("image" !== this.type) {
      var n = this.style,
          i = this.shape;i && "line" === i.symbolType ? n.stroke = t : this.__isEmptyBrush ? (n.stroke = t, n.fill = e || "#fff") : (n.fill && (n.fill = t), n.stroke && (n.stroke = t)), this.dirty(!1);
    }
  }function jh(t, e, n, i, r, a, o) {
    var s = 0 === t.indexOf("empty");s && (t = t.substr(5, 1).toLowerCase() + t.substr(6));var l;return l = 0 === t.indexOf("image://") ? ya(t.slice(8), new An(e, n, i, r), o ? "center" : "cover") : 0 === t.indexOf("path://") ? ma(t.slice(7), {}, new An(e, n, i, r), o ? "center" : "cover") : new eb({ shape: { symbolType: t, x: e, y: n, width: i, height: r } }), l.__isEmptyBrush = s, l.setColor = qh, l.setColor(a), l;
  }function Zh(t) {
    return fh(t.getSource(), t);
  }function Kh(t, e) {
    var n = e;co.isInstance(e) || (n = new co(e), c(n, qw));var i = Fh(n);return i.setExtent(t[0], t[1]), Nh(i, n), i;
  }function $h(t) {
    c(t, qw);
  }function Qh(t, e) {
    return Math.abs(t - e) < rb;
  }function Jh(t, e, n) {
    var i = 0,
        r = t[0];if (!r) return !1;for (var a = 1; a < t.length; a++) {
      var o = t[a];i += Xr(r[0], r[1], o[0], o[1], e, n), r = o;
    }var s = t[0];return Qh(r[0], s[0]) && Qh(r[1], s[1]) || (i += Xr(r[0], r[1], s[0], s[1], e, n)), 0 !== i;
  }function tc(t, e, n) {
    if (this.name = t, this.geometries = e, n) n = [n[0], n[1]];else {
      var i = this.getBoundingRect();n = [i.x + i.width / 2, i.y + i.height / 2];
    }this.center = n;
  }function ec(t) {
    if (!t.UTF8Encoding) return t;var e = t.UTF8Scale;null == e && (e = 1024);for (var n = t.features, i = 0; i < n.length; i++) {
      for (var r = n[i], a = r.geometry, o = a.coordinates, s = a.encodeOffsets, l = 0; l < o.length; l++) {
        var u = o[l];if ("Polygon" === a.type) o[l] = nc(u, s[l], e);else if ("MultiPolygon" === a.type) for (var h = 0; h < u.length; h++) {
          var c = u[h];u[h] = nc(c, s[l][h], e);
        }
      }
    }return t.UTF8Encoding = !1, t;
  }function nc(t, e, n) {
    for (var i = [], r = e[0], a = e[1], o = 0; o < t.length; o += 2) {
      var s = t.charCodeAt(o) - 64,
          l = t.charCodeAt(o + 1) - 64;s = s >> 1 ^ -(1 & s), l = l >> 1 ^ -(1 & l), s += r, l += a, r = s, a = l, i.push([s / n, l / n]);
    }return i;
  }function ic(t) {
    return "category" === t.type ? ac(t) : lc(t);
  }function rc(t, e) {
    return "category" === t.type ? sc(t, e) : { ticks: t.scale.getTicks() };
  }function ac(t) {
    var e = t.getLabelModel(),
        n = oc(t, e);return !e.get("show") || t.scale.isBlank() ? { labels: [], labelCategoryInterval: n.labelCategoryInterval } : n;
  }function oc(t, e) {
    var n = uc(t, "labels"),
        i = Uh(e),
        r = hc(n, i);if (r) return r;var a, o;return w(i) ? a = vc(t, i) : (o = "auto" === i ? dc(t) : i, a = gc(t, o)), cc(n, i, { labels: a, labelCategoryInterval: o });
  }function sc(t, e) {
    var n = uc(t, "ticks"),
        i = Uh(e),
        r = hc(n, i);if (r) return r;var a, o;if ((!e.get("show") || t.scale.isBlank()) && (a = []), w(i)) a = vc(t, i, !0);else if ("auto" === i) {
      var s = oc(t, t.getLabelModel());o = s.labelCategoryInterval, a = p(s.labels, function (t) {
        return t.tickValue;
      });
    } else o = i, a = gc(t, o, !0);return cc(n, i, { ticks: a, tickCategoryInterval: o });
  }function lc(t) {
    var e = t.scale.getTicks(),
        n = Hh(t);return { labels: p(e, function (e, i) {
        return { formattedLabel: n(e, i), rawLabel: t.scale.getLabel(e), tickValue: e };
      }) };
  }function uc(t, e) {
    return ob(t)[e] || (ob(t)[e] = []);
  }function hc(t, e) {
    for (var n = 0; n < t.length; n++) {
      if (t[n].key === e) return t[n].value;
    }
  }function cc(t, e, n) {
    return t.push({ key: e, value: n }), n;
  }function dc(t) {
    var e = ob(t).autoInterval;return null != e ? e : ob(t).autoInterval = t.calculateCategoryInterval();
  }function fc(t) {
    var e = pc(t),
        n = Hh(t),
        i = (e.axisRotate - e.labelRotate) / 180 * Math.PI,
        r = t.scale,
        a = r.getExtent(),
        o = r.count();if (a[1] - a[0] < 1) return 0;var s = 1;o > 40 && (s = Math.max(1, Math.floor(o / 40)));for (var l = a[0], u = t.dataToCoord(l + 1) - t.dataToCoord(l), h = Math.abs(u * Math.cos(i)), c = Math.abs(u * Math.sin(i)), d = 0, f = 0; l <= a[1]; l += s) {
      var p = 0,
          g = 0,
          v = Xn(n(l), e.font, "center", "top");p = 1.3 * v.width, g = 1.3 * v.height, d = Math.max(d, p, 7), f = Math.max(f, g, 7);
    }var m = d / h,
        y = f / c;isNaN(m) && (m = 1 / 0), isNaN(y) && (y = 1 / 0);var x = Math.max(0, Math.floor(Math.min(m, y))),
        _ = ob(t.model),
        w = t.getExtent(),
        b = _.lastAutoInterval,
        S = _.lastTickCount;return null != b && null != S && Math.abs(b - x) <= 1 && Math.abs(S - o) <= 1 && b > x && _.axisExtend0 === w[0] && _.axisExtend1 === w[1] ? x = b : (_.lastTickCount = o, _.lastAutoInterval = x, _.axisExtend0 = w[0], _.axisExtend1 = w[1]), x;
  }function pc(t) {
    var e = t.getLabelModel();return { axisRotate: t.getRotate ? t.getRotate() : t.isHorizontal && !t.isHorizontal() ? 90 : 0, labelRotate: e.get("rotate") || 0, font: e.getFont() };
  }function gc(t, e, n) {
    function i(t) {
      l.push(n ? t : { formattedLabel: r(t), rawLabel: a.getLabel(t), tickValue: t });
    }var r = Hh(t),
        a = t.scale,
        o = a.getExtent(),
        s = t.getLabelModel(),
        l = [],
        u = Math.max((e || 0) + 1, 1),
        h = o[0],
        c = a.count();0 !== h && u > 1 && c / u > 2 && (h = Math.round(Math.ceil(h / u) * u));var d = Yh(t),
        f = s.get("showMinLabel") || d,
        p = s.get("showMaxLabel") || d;f && h !== o[0] && i(o[0]);for (var g = h; g <= o[1]; g += u) {
      i(g);
    }return p && g - u !== o[1] && i(o[1]), l;
  }function vc(t, e, n) {
    var i = t.scale,
        r = Hh(t),
        a = [];return f(i.getTicks(), function (t) {
      var o = i.getLabel(t);e(t, o) && a.push(n ? t : { formattedLabel: r(t), rawLabel: o, tickValue: t });
    }), a;
  }function mc(t, e) {
    var n = t[1] - t[0],
        i = e,
        r = n / i / 2;t[0] += r, t[1] -= r;
  }function yc(t, e, n, i) {
    function r(t, e) {
      return t = wo(t), e = wo(e), d ? t > e : e > t;
    }var a = e.length;if (t.onBand && !n && a) {
      var o,
          s,
          l = t.getExtent();if (1 === a) e[0].coord = l[0], o = e[1] = { coord: l[0] };else {
        var u = e[a - 1].tickValue - e[0].tickValue,
            h = (e[a - 1].coord - e[0].coord) / u;f(e, function (t) {
          t.coord -= h / 2;
        });var c = t.scale.getExtent();s = 1 + c[1] - e[a - 1].tickValue, o = { coord: e[a - 1].coord + h * s }, e.push(o);
      }var d = l[0] > l[1];r(e[0].coord, l[0]) && (i ? e[0].coord = l[0] : e.shift()), i && r(l[0], e[0].coord) && e.unshift({ coord: l[0] }), r(l[1], o.coord) && (i ? o.coord = l[1] : e.pop()), i && r(o.coord, l[1]) && e.push({ coord: l[1] });
    }
  }function xc(t) {
    return this._axes[t];
  }function _c(t) {
    db.call(this, t);
  }function wc(t, e) {
    return e.type || (e.data ? "category" : "value");
  }function bc(t, e) {
    return t.getCoordSysModel() === e;
  }function Sc(t, e, n) {
    this._coordsMap = {}, this._coordsList = [], this._axesMap = {}, this._axesList = [], this._initCartesian(t, e, n), this.model = t;
  }function Mc(t, e, n, i) {
    function r(t) {
      return t.dim + "_" + t.index;
    }n.getAxesOnZeroOf = function () {
      return a ? [a] : [];
    };var a,
        o = t[e],
        s = n.model,
        l = s.get("axisLine.onZero"),
        u = s.get("axisLine.onZeroAxisIndex");if (l) {
      if (null != u) Ac(o[u]) && (a = o[u]);else for (var h in o) {
        if (o.hasOwnProperty(h) && Ac(o[h]) && !i[r(o[h])]) {
          a = o[h];break;
        }
      }a && (i[r(a)] = !0);
    }
  }function Ac(t) {
    return t && "category" !== t.type && "time" !== t.type && Vh(t);
  }function Ic(t, e) {
    var n = t.getExtent(),
        i = n[0] + n[1];t.toGlobalCoord = "x" === t.dim ? function (t) {
      return t + e;
    } : function (t) {
      return i - t + e;
    }, t.toLocalCoord = "x" === t.dim ? function (t) {
      return t - e;
    } : function (t) {
      return i - t + e;
    };
  }function Tc(t) {
    return p(wb, function (e) {
      var n = t.getReferringComponents(e)[0];if (ip && !n) throw new Error(e + ' "' + C(t.get(e + "Index"), t.get(e + "Id"), 0) + '" not found');return n;
    });
  }function Cc(t) {
    return "cartesian2d" === t.get("coordinateSystem");
  }function Dc(t, e) {
    var n = t.mapDimension("defaultedLabel", !0),
        i = n.length;if (1 === i) return Ks(t, e, n[0]);if (i) {
      for (var r = [], a = 0; a < n.length; a++) {
        var o = Ks(t, e, n[a]);r.push(o);
      }return r.join(" ");
    }
  }function kc(t, e, n, i, r, a) {
    var o = n.getModel("label"),
        s = n.getModel("emphasis.label");Va(t, e, o, s, { labelFetcher: r, labelDataIndex: a, defaultText: Dc(r.getData(), a), isRectText: !0, autoColor: i }), Pc(t), Pc(e);
  }function Pc(t, e) {
    "outside" === t.textPosition && (t.textPosition = e);
  }function Lc(t, e, n) {
    var i = t.getArea(),
        r = t.getBaseAxis().isHorizontal(),
        a = i.x,
        o = i.y,
        s = i.width,
        l = i.height,
        u = n.get("lineStyle.width") || 2;a -= u / 2, o -= u / 2, s += u, l += u, a = Math.floor(a), s = Math.round(s);var h = new qm({ shape: { x: a, y: o, width: s, height: l } });return e && (h.shape[r ? "width" : "height"] = 0, Ja(h, { shape: { width: s, height: l } }, n)), h;
  }function Oc(t, e, n) {
    var i = t.getArea(),
        r = new Fm({ shape: { cx: wo(t.cx, 1), cy: wo(t.cy, 1), r0: wo(i.r0, 1), r: wo(i.r, 1), startAngle: i.startAngle, endAngle: i.endAngle, clockwise: i.clockwise } });return e && (r.shape.endAngle = i.startAngle, Ja(r, { shape: { endAngle: i.endAngle } }, n)), r;
  }function Ec(t, e, n) {
    return t ? "polar" === t.type ? Oc(t, e, n) : "cartesian2d" === t.type ? Lc(t, e, n) : null : null;
  }function Bc(t, e) {
    var n = t.getArea && t.getArea();if ("cartesian2d" === t.type) {
      var i = t.getBaseAxis();if ("category" !== i.type || !i.onBand) {
        var r = e.getLayout("bandWidth");i.isHorizontal() ? (n.x -= r, n.width += 2 * r) : (n.y -= r, n.height += 2 * r);
      }
    }return n;
  }function zc(t, e, n) {
    n.style.text = null, Qa(n, { shape: { width: 0 } }, e, t, function () {
      n.parent && n.parent.remove(n);
    });
  }function Rc(t, e, n) {
    n.style.text = null, Qa(n, { shape: { r: n.shape.r0 } }, e, t, function () {
      n.parent && n.parent.remove(n);
    });
  }function Nc(t) {
    return null != t.startAngle && null != t.endAngle && t.startAngle === t.endAngle;
  }function Fc(t, e, n, i, r, a, o, l) {
    var u = e.getItemVisual(n, "color"),
        h = e.getItemVisual(n, "opacity"),
        c = e.getVisual("borderColor"),
        d = i.getModel("itemStyle"),
        f = i.getModel("emphasis.itemStyle").getBarItemStyle();l || t.setShape("r", d.get("barBorderRadius") || 0), t.useStyle(s({ stroke: Nc(r) ? "none" : c, fill: Nc(r) ? "none" : u, opacity: h }, d.getBarItemStyle()));var p = i.getShallow("cursor");p && t.attr("cursor", p);var g = o ? r.height > 0 ? "bottom" : "top" : r.width > 0 ? "left" : "right";l || kc(t.style, f, i, u, a, n, g), Nc(r) && (f.fill = f.stroke = "none"), za(t, f);
  }function Vc(t, e) {
    var n = t.get(Ib) || 0,
        i = isNaN(e.width) ? Number.MAX_VALUE : Math.abs(e.width),
        r = isNaN(e.height) ? Number.MAX_VALUE : Math.abs(e.height);return Math.min(n, i, r);
  }function Hc(t, e, n) {
    var i = t.getData(),
        r = [],
        a = i.getLayout("valueAxisHorizontal") ? 1 : 0;r[1 - a] = i.getLayout("valueAxisStart");var o = i.getLayout("largeDataIndices"),
        s = i.getLayout("barWidth"),
        l = t.getModel("backgroundStyle"),
        u = t.get("showBackground", !0);if (u) {
      var h = i.getLayout("largeBackgroundPoints"),
          c = [];c[1 - a] = i.getLayout("backgroundStart");var d = new Ob({ shape: { points: h }, incremental: !!n, __startPoint: c, __baseDimIdx: a, __largeDataIndices: o, __barWidth: s, silent: !0, z2: 0 });Xc(d, l, i), e.add(d);
    }var f = new Ob({ shape: { points: i.getLayout("largePoints") }, incremental: !!n, __startPoint: r, __baseDimIdx: a, __largeDataIndices: o, __barWidth: s });e.add(f), Gc(f, t, i), f.seriesIndex = t.seriesIndex, t.get("silent") || (f.on("mousedown", Eb), f.on("mousemove", Eb));
  }function Wc(t, e, n) {
    var i = t.__baseDimIdx,
        r = 1 - i,
        a = t.shape.points,
        o = t.__largeDataIndices,
        s = Math.abs(t.__barWidth / 2),
        l = t.__startPoint[r];Tb[0] = e, Tb[1] = n;for (var u = Tb[i], h = Tb[1 - i], c = u - s, d = u + s, f = 0, p = a.length / 2; p > f; f++) {
      var g = 2 * f,
          v = a[g + i],
          m = a[g + r];if (v >= c && d >= v && (m >= l ? h >= l && m >= h : h >= m && l >= h)) return o[f];
    }return -1;
  }function Gc(t, e, n) {
    var i = n.getVisual("borderColor") || n.getVisual("color"),
        r = e.getModel("itemStyle").getItemStyle(["color", "borderColor"]);t.useStyle(r), t.style.fill = null, t.style.stroke = i, t.style.lineWidth = n.getLayout("barWidth");
  }function Xc(t, e, n) {
    var i = e.get("borderColor") || e.get("color"),
        r = e.getItemStyle(["color", "borderColor"]);t.useStyle(r), t.style.fill = null, t.style.stroke = i, t.style.lineWidth = n.getLayout("barWidth");
  }function Uc(t, e, n) {
    var i,
        r = "polar" === n.type;return i = r ? n.getArea() : n.grid.getRect(), r ? { cx: i.cx, cy: i.cy, r0: t ? i.r0 : e.r0, r: t ? i.r : e.r, startAngle: t ? e.startAngle : 0, endAngle: t ? e.endAngle : 2 * Math.PI } : { x: t ? e.x : i.x, y: t ? i.y : e.y, width: t ? e.width : i.width, height: t ? i.height : e.height };
  }function Yc(t, e, n) {
    var i = "polar" === t.type ? Fm : qm;return new i({ shape: Uc(e, n, t), silent: !0, z2: 0 });
  }function qc(t, e, n, i) {
    var r,
        a,
        o = To(n - t.rotation),
        s = i[0] > i[1],
        l = "start" === e && !s || "start" !== e && s;return Co(o - Bb / 2) ? (a = l ? "bottom" : "top", r = "center") : Co(o - 1.5 * Bb) ? (a = l ? "top" : "bottom", r = "center") : (a = "middle", r = 1.5 * Bb > o && o > Bb / 2 ? l ? "left" : "right" : l ? "right" : "left"), { rotation: o, textAlign: r, textVerticalAlign: a };
  }function jc(t, e, n) {
    if (!Yh(t.axis)) {
      var i = t.get("axisLabel.showMinLabel"),
          r = t.get("axisLabel.showMaxLabel");e = e || [], n = n || [];var a = e[0],
          o = e[1],
          s = e[e.length - 1],
          l = e[e.length - 2],
          u = n[0],
          h = n[1],
          c = n[n.length - 1],
          d = n[n.length - 2];i === !1 ? (Zc(a), Zc(u)) : Kc(a, o) && (i ? (Zc(o), Zc(h)) : (Zc(a), Zc(u))), r === !1 ? (Zc(s), Zc(c)) : Kc(l, s) && (r ? (Zc(l), Zc(d)) : (Zc(s), Zc(c)));
    }
  }function Zc(t) {
    t && (t.ignore = !0);
  }function Kc(t, e) {
    var n = t && t.getBoundingRect().clone(),
        i = e && e.getBoundingRect().clone();if (n && i) {
      var r = Le([]);return ze(r, r, -t.rotation), n.applyTransform(Ee([], r, t.getLocalTransform())), i.applyTransform(Ee([], r, e.getLocalTransform())), n.intersect(i);
    }
  }function $c(t) {
    return "middle" === t || "center" === t;
  }function Qc(t, e, n, i, r) {
    for (var a = [], o = [], s = [], l = 0; l < t.length; l++) {
      var u = t[l].coord;o[0] = u, o[1] = 0, s[0] = u, s[1] = n, e && (ae(o, o, e), ae(s, s, e));var h = new Zm({ anid: r + "_" + t[l].tickValue, subPixelOptimize: !0, shape: { x1: o[0], y1: o[1], x2: s[0], y2: s[1] }, style: i, z2: 2, silent: !0 });a.push(h);
    }return a;
  }function Jc(t, e, n) {
    var i = e.axis,
        r = e.getModel("axisTick");if (r.get("show") && !i.scale.isBlank()) {
      for (var a = r.getModel("lineStyle"), o = n.tickDirection * r.get("length"), l = i.getTicksCoords(), u = Qc(l, t._transform, o, s(a.getLineStyle(), { stroke: e.get("axisLine.lineStyle.color") }), "ticks"), h = 0; h < u.length; h++) {
        t.group.add(u[h]);
      }return u;
    }
  }function td(t, e, n) {
    var i = e.axis,
        r = e.getModel("minorTick");if (r.get("show") && !i.scale.isBlank()) {
      var a = i.getMinorTicksCoords();if (a.length) for (var o = r.getModel("lineStyle"), l = n.tickDirection * r.get("length"), u = s(o.getLineStyle(), s(e.getModel("axisTick").getLineStyle(), { stroke: e.get("axisLine.lineStyle.color") })), h = 0; h < a.length; h++) {
        for (var c = Qc(a[h], t._transform, l, u, "minorticks_" + h), d = 0; d < c.length; d++) {
          t.group.add(c[d]);
        }
      }
    }
  }function ed(t, e, n) {
    var i = e.axis,
        r = C(n.axisLabelShow, e.get("axisLabel.show"));if (r && !i.scale.isBlank()) {
      var a = e.getModel("axisLabel"),
          o = a.get("margin"),
          s = i.getViewLabels(),
          l = (C(n.labelRotate, a.get("rotate")) || 0) * Bb / 180,
          u = Fb(n.rotation, l, n.labelDirection),
          h = e.getCategories && e.getCategories(!0),
          c = [],
          d = Vb(e),
          p = e.get("triggerEvent");return f(s, function (r, s) {
        var l = r.tickValue,
            f = r.formattedLabel,
            g = r.rawLabel,
            v = a;h && h[l] && h[l].textStyle && (v = new co(h[l].textStyle, a, e.ecModel));var m = v.getTextColor() || e.get("axisLine.lineStyle.color"),
            y = i.dataToCoord(l),
            x = [y, n.labelOffset + n.labelDirection * o],
            _ = new Bm({ anid: "label_" + l, position: x, rotation: u.rotation, silent: d, z2: 10 });Wa(_.style, v, { text: f, textAlign: v.getShallow("align", !0) || u.textAlign, textVerticalAlign: v.getShallow("verticalAlign", !0) || v.getShallow("baseline", !0) || u.textVerticalAlign, textFill: "function" == typeof m ? m("category" === i.type ? g : "value" === i.type ? l + "" : l, s) : m }), p && (_.eventData = Nb(e), _.eventData.targetType = "axisLabel", _.eventData.value = g), t._dumbGroup.add(_), _.updateTransform(), c.push(_), t.group.add(_), _.decomposeTransform();
      }), c;
    }
  }function nd(t, e) {
    var n = { axesInfo: {}, seriesInvolved: !1, coordSysAxesInfo: {}, coordSysMap: {} };return id(n, t, e), n.seriesInvolved && ad(n, t), n;
  }function id(t, e, n) {
    var i = e.getComponent("tooltip"),
        r = e.getComponent("axisPointer"),
        a = r.get("link", !0) || [],
        o = [];Hb(n.getCoordinateSystems(), function (n) {
      function s(i, s, l) {
        var h = l.model.getModel("axisPointer", r),
            d = h.get("show");if (d && ("auto" !== d || i || cd(h))) {
          null == s && (s = h.get("triggerTooltip")), h = i ? rd(l, c, r, e, i, s) : h;var f = h.get("snap"),
              p = dd(l.model),
              g = s || f || "category" === l.type,
              v = t.axesInfo[p] = { key: p, axis: l, coordSys: n, axisPointerModel: h, triggerTooltip: s, involveSeries: g, snap: f, useHandle: cd(h), seriesModels: [] };u[p] = v, t.seriesInvolved |= g;var m = od(a, l);if (null != m) {
            var y = o[m] || (o[m] = { axesInfo: {} });y.axesInfo[p] = v, y.mapper = a[m].mapper, v.linkGroup = y;
          }
        }
      }if (n.axisPointerEnabled) {
        var l = dd(n.model),
            u = t.coordSysAxesInfo[l] = {};
        t.coordSysMap[l] = n;var h = n.model,
            c = h.getModel("tooltip", i);if (Hb(n.getAxes(), Wb(s, !1, null)), n.getTooltipAxes && i && c.get("show")) {
          var d = "axis" === c.get("trigger"),
              f = "cross" === c.get("axisPointer.type"),
              p = n.getTooltipAxes(c.get("axisPointer.axis"));(d || f) && Hb(p.baseAxes, Wb(s, f ? "cross" : !0, d)), f && Hb(p.otherAxes, Wb(s, "cross", !1));
        }
      }
    });
  }function rd(t, e, n, r, a, o) {
    var l = e.getModel("axisPointer"),
        u = {};Hb(["type", "snap", "lineStyle", "shadowStyle", "label", "animation", "animationDurationUpdate", "animationEasingUpdate", "z"], function (t) {
      u[t] = i(l.get(t));
    }), u.snap = "category" !== t.type && !!o, "cross" === l.get("type") && (u.type = "line");var h = u.label || (u.label = {});if (null == h.show && (h.show = !1), "cross" === a) {
      var c = l.get("label.show");if (h.show = null != c ? c : !0, !o) {
        var d = u.lineStyle = l.get("crossStyle");d && s(h, d.textStyle);
      }
    }return t.model.getModel("axisPointer", new co(u, n, r));
  }function ad(t, e) {
    e.eachSeries(function (e) {
      var n = e.coordinateSystem,
          i = e.get("tooltip.trigger", !0),
          r = e.get("tooltip.show", !0);n && "none" !== i && i !== !1 && "item" !== i && r !== !1 && e.get("axisPointer.show", !0) !== !1 && Hb(t.coordSysAxesInfo[dd(n.model)], function (t) {
        var i = t.axis;n.getAxis(i.dim) === i && (t.seriesModels.push(e), null == t.seriesDataCount && (t.seriesDataCount = 0), t.seriesDataCount += e.getData().count());
      });
    }, this);
  }function od(t, e) {
    for (var n = e.model, i = e.dim, r = 0; r < t.length; r++) {
      var a = t[r] || {};if (sd(a[i + "AxisId"], n.id) || sd(a[i + "AxisIndex"], n.componentIndex) || sd(a[i + "AxisName"], n.name)) return r;
    }
  }function sd(t, e) {
    return "all" === t || _(t) && u(t, e) >= 0 || t === e;
  }function ld(t) {
    var e = ud(t);if (e) {
      var n = e.axisPointerModel,
          i = e.axis.scale,
          r = n.option,
          a = n.get("status"),
          o = n.get("value");null != o && (o = i.parse(o));var s = cd(n);null == a && (r.status = s ? "show" : "hide");var l = i.getExtent().slice();l[0] > l[1] && l.reverse(), (null == o || o > l[1]) && (o = l[1]), o < l[0] && (o = l[0]), r.value = o, s && (r.status = e.axis.scale.isBlank() ? "hide" : "show");
    }
  }function ud(t) {
    var e = (t.ecModel.getComponent("axisPointer") || {}).coordSysAxesInfo;return e && e.axesInfo[dd(t)];
  }function hd(t) {
    var e = ud(t);return e && e.axisPointerModel;
  }function cd(t) {
    return !!t.get("handle.show");
  }function dd(t) {
    return t.type + "||" + t.id;
  }function fd(t, e, n, i, r, a) {
    var o = Gb.getAxisPointerClass(t.axisPointerClass);if (o) {
      var s = hd(e);s ? (t._axisPointer || (t._axisPointer = new o())).render(e, s, i, a) : pd(t, i);
    }
  }function pd(t, e, n) {
    var i = t._axisPointer;i && i.dispose(e, n), t._axisPointer = null;
  }function gd(t, e, n) {
    n = n || {};var i = t.coordinateSystem,
        r = e.axis,
        a = {},
        o = r.getAxesOnZeroOf()[0],
        s = r.position,
        l = o ? "onZero" : s,
        u = r.dim,
        h = i.getRect(),
        c = [h.x, h.x + h.width, h.y, h.y + h.height],
        d = { left: 0, right: 1, top: 0, bottom: 1, onZero: 2 },
        f = e.get("offset") || 0,
        p = "x" === u ? [c[2] - f, c[3] + f] : [c[0] - f, c[1] + f];if (o) {
      var g = o.toGlobalCoord(o.dataToCoord(0));p[d.onZero] = Math.max(Math.min(g, p[1]), p[0]);
    }a.position = ["y" === u ? p[d[l]] : c[0], "x" === u ? p[d[l]] : c[3]], a.rotation = Math.PI / 2 * ("x" === u ? 0 : 1);var v = { top: -1, bottom: 1, left: -1, right: 1 };a.labelDirection = a.tickDirection = a.nameDirection = v[s], a.labelOffset = o ? p[d[s]] - p[d.onZero] : 0, e.get("axisTick.inside") && (a.tickDirection = -a.tickDirection), C(n.labelInside, e.get("axisLabel.inside")) && (a.labelDirection = -a.labelDirection);var m = e.get("axisLabel.rotate");return a.labelRotate = "top" === l ? -m : m, a.z2 = 1, a;
  }function vd(t, e, n, i) {
    var r = n.axis;if (!r.scale.isBlank()) {
      var a = n.getModel("splitArea"),
          o = a.getModel("areaStyle"),
          l = o.get("color"),
          u = i.coordinateSystem.getRect(),
          h = r.getTicksCoords({ tickModel: a, clamp: !0 });if (h.length) {
        var c = l.length,
            d = t.__splitAreaColors,
            f = N(),
            p = 0;if (d) for (var g = 0; g < h.length; g++) {
          var v = d.get(h[g].tickValue);if (null != v) {
            p = (v + (c - 1) * g) % c;break;
          }
        }var m = r.toGlobalCoord(h[0].coord),
            y = o.getAreaStyle();l = _(l) ? l : [l];for (var g = 1; g < h.length; g++) {
          var x,
              w,
              b,
              S,
              M = r.toGlobalCoord(h[g].coord);r.isHorizontal() ? (x = m, w = u.y, b = M - x, S = u.height, m = x + b) : (x = u.x, w = m, b = u.width, S = M - w, m = w + S);var A = h[g - 1].tickValue;null != A && f.set(A, p), e.add(new qm({ anid: null != A ? "area_" + A : null, shape: { x: x, y: w, width: b, height: S }, style: s({ fill: l[p] }, y), silent: !0 })), p = (p + 1) % c;
        }t.__splitAreaColors = f;
      }
    }
  }function md(t) {
    t.__splitAreaColors = null;
  }function yd(t, e, n) {
    _g.call(this), this.updateData(t, e, n);
  }function xd(t) {
    return [t[0] / 2, t[1] / 2];
  }function _d(t, e) {
    this.parent.drift(t, e);
  }function wd(t, e) {
    if (!this.incremental && !this.useHoverLayer) if ("emphasis" === e) {
      var n = this.__symbolOriginalScale,
          i = n[1] / n[0],
          r = { scale: [Math.max(1.1 * n[0], n[0] + 3), Math.max(1.1 * n[1], n[1] + 3 * i)] };this.animateTo(r, 400, "elasticOut");
    } else "normal" === e && this.animateTo({ scale: this.__symbolOriginalScale }, 400, "elasticOut");
  }function bd(t) {
    this.group = new _g(), this._symbolCtor = t || yd;
  }function Sd(t, e, n, i) {
    return !(!e || isNaN(e[0]) || isNaN(e[1]) || i.isIgnore && i.isIgnore(n) || i.clipShape && !i.clipShape.contain(e[0], e[1]) || "none" === t.getItemVisual(n, "symbol"));
  }function Md(t) {
    return null == t || S(t) || (t = { isIgnore: t }), t || {};
  }function Ad(t) {
    var e = t.hostModel;return { itemStyle: e.getModel("itemStyle").getItemStyle(["color"]), hoverItemStyle: e.getModel("emphasis.itemStyle").getItemStyle(), symbolRotate: e.get("symbolRotate"), symbolOffset: e.get("symbolOffset"), hoverAnimation: e.get("hoverAnimation"), labelModel: e.getModel("label"), hoverLabelModel: e.getModel("emphasis.label"), cursorStyle: e.get("cursor") };
  }function Id(t, e, n) {
    var i,
        r = t.getBaseAxis(),
        a = t.getOtherAxis(r),
        o = Td(a, n),
        s = r.dim,
        l = a.dim,
        u = e.mapDimension(l),
        h = e.mapDimension(s),
        c = "x" === l || "radius" === l ? 1 : 0,
        d = p(t.dimensions, function (t) {
      return e.mapDimension(t);
    }),
        f = e.getCalculationInfo("stackResultDimension");return (i |= ch(e, d[0])) && (d[0] = f), (i |= ch(e, d[1])) && (d[1] = f), { dataDimsForPoint: d, valueStart: o, valueAxisDim: l, baseAxisDim: s, stacked: !!i, valueDim: u, baseDim: h, baseDataOffset: c, stackedOverDimension: e.getCalculationInfo("stackedOverDimension") };
  }function Td(t, e) {
    var n = 0,
        i = t.scale.getExtent();return "start" === e ? n = i[0] : "end" === e ? n = i[1] : i[0] > 0 ? n = i[0] : i[1] < 0 && (n = i[1]), n;
  }function Cd(t, e, n, i) {
    var r = 0 / 0;t.stacked && (r = n.get(n.getCalculationInfo("stackedOverDimension"), i)), isNaN(r) && (r = t.valueStart);var a = t.baseDataOffset,
        o = [];return o[a] = n.get(t.baseDim, i), o[1 - a] = r, e.dataToPoint(o);
  }function Dd(t, e) {
    var n = [];return e.diff(t).add(function (t) {
      n.push({ cmd: "+", idx: t });
    }).update(function (t, e) {
      n.push({ cmd: "=", idx: e, idx1: t });
    }).remove(function (t) {
      n.push({ cmd: "-", idx: t });
    }).execute(), n;
  }function kd(t) {
    return isNaN(t[0]) || isNaN(t[1]);
  }function Pd(t, e, n, i, r, a, o, s, l, u) {
    return "none" !== u && u ? Ld.apply(this, arguments) : Od.apply(this, arguments);
  }function Ld(t, e, n, i, r, a, o, s, l, u, h) {
    for (var c = 0, d = n, f = 0; i > f; f++) {
      var p = e[d];if (d >= r || 0 > d) break;if (kd(p)) {
        if (h) {
          d += a;continue;
        }break;
      }if (d === n) t[a > 0 ? "moveTo" : "lineTo"](p[0], p[1]);else if (l > 0) {
        var g = e[c],
            v = "y" === u ? 1 : 0,
            m = (p[v] - g[v]) * l;aS(sS, g), sS[v] = g[v] + m, aS(lS, p), lS[v] = p[v] - m, t.bezierCurveTo(sS[0], sS[1], lS[0], lS[1], p[0], p[1]);
      } else t.lineTo(p[0], p[1]);c = d, d += a;
    }return f;
  }function Od(t, e, n, i, r, a, o, s, l, u, h) {
    for (var c = 0, d = n, f = 0; i > f; f++) {
      var p = e[d];if (d >= r || 0 > d) break;if (kd(p)) {
        if (h) {
          d += a;continue;
        }break;
      }if (d === n) t[a > 0 ? "moveTo" : "lineTo"](p[0], p[1]), aS(sS, p);else if (l > 0) {
        var g = d + a,
            v = e[g];if (h) for (; v && kd(e[g]);) {
          g += a, v = e[g];
        }var m = .5,
            y = e[c],
            v = e[g];if (!v || kd(v)) aS(lS, p);else {
          kd(v) && !h && (v = p), q(oS, v, y);var x, _;if ("x" === u || "y" === u) {
            var w = "x" === u ? 0 : 1;x = Math.abs(p[w] - y[w]), _ = Math.abs(p[w] - v[w]);
          } else x = Ap(p, y), _ = Ap(p, v);m = _ / (_ + x), rS(lS, p, oS, -l * (1 - m));
        }nS(sS, sS, s), iS(sS, sS, o), nS(lS, lS, s), iS(lS, lS, o), t.bezierCurveTo(sS[0], sS[1], lS[0], lS[1], p[0], p[1]), rS(sS, p, oS, l * m);
      } else t.lineTo(p[0], p[1]);c = d, d += a;
    }return f;
  }function Ed(t, e) {
    var n = [1 / 0, 1 / 0],
        i = [-1 / 0, -1 / 0];if (e) for (var r = 0; r < t.length; r++) {
      var a = t[r];a[0] < n[0] && (n[0] = a[0]), a[1] < n[1] && (n[1] = a[1]), a[0] > i[0] && (i[0] = a[0]), a[1] > i[1] && (i[1] = a[1]);
    }return { min: e ? n : i, max: e ? i : n };
  }function Bd(t, e) {
    if (t.length === e.length) {
      for (var n = 0; n < t.length; n++) {
        var i = t[n],
            r = e[n];if (i[0] !== r[0] || i[1] !== r[1]) return;
      }return !0;
    }
  }function zd(t, e) {
    var n = [],
        i = [],
        r = [],
        a = [];return Er(t, n, i), Er(e, r, a), Math.max(Math.abs(n[0] - r[0]), Math.abs(n[1] - r[1]), Math.abs(i[0] - a[0]), Math.abs(i[1] - a[1]));
  }function Rd(t) {
    return "number" == typeof t ? t : t ? .5 : 0;
  }function Nd(t, e, n) {
    if (!n.valueDim) return [];for (var i = [], r = 0, a = e.count(); a > r; r++) {
      i.push(Cd(n, t, e, r));
    }return i;
  }function Fd(t, e, n) {
    for (var i = e.getBaseAxis(), r = "x" === i.dim || "radius" === i.dim ? 0 : 1, a = [], o = 0; o < t.length - 1; o++) {
      var s = t[o + 1],
          l = t[o];a.push(l);var u = [];switch (n) {case "end":
          u[r] = s[r], u[1 - r] = l[1 - r], a.push(u);break;case "middle":
          var h = (l[r] + s[r]) / 2,
              c = [];u[r] = c[r] = h, u[1 - r] = l[1 - r], c[1 - r] = s[1 - r], a.push(u), a.push(c);break;default:
          u[r] = l[r], u[1 - r] = s[1 - r], a.push(u);}
    }return t[o] && a.push(t[o]), a;
  }function Vd(t, e) {
    var n = t.getVisual("visualMeta");if (n && n.length && t.count()) {
      if ("cartesian2d" !== e.type) return void (ip && console.warn("Visual map on line style is only supported on cartesian2d."));for (var i, r, a = n.length - 1; a >= 0; a--) {
        var o = n[a].dimension,
            s = t.dimensions[o],
            l = t.getDimensionInfo(s);if (i = l && l.coordDim, "x" === i || "y" === i) {
          r = n[a];break;
        }
      }if (!r) return void (ip && console.warn("Visual map on line style only support x or y dimension."));var u = e.getAxis(i),
          h = p(r.stops, function (t) {
        return { coord: u.toGlobalCoord(u.dataToCoord(t.value)), color: t.color };
      }),
          c = h.length,
          d = r.outerColors.slice();c && h[0].coord > h[c - 1].coord && (h.reverse(), d.reverse());var g = 10,
          v = h[0].coord - g,
          m = h[c - 1].coord + g,
          y = m - v;if (.001 > y) return "transparent";f(h, function (t) {
        t.offset = (t.coord - v) / y;
      }), h.push({ offset: c ? h[c - 1].offset : .5, color: d[1] || "transparent" }), h.unshift({ offset: c ? h[0].offset : .5, color: d[0] || "transparent" });var x = new ey(0, 0, 0, 0, h, !0);return x[i] = v, x[i + "2"] = m, x;
    }
  }function Hd(t, e, n) {
    var i = t.get("showAllSymbol"),
        r = "auto" === i;if (!i || r) {
      var a = n.getAxesByScale("ordinal")[0];if (a && (!r || !Wd(a, e))) {
        var o = e.mapDimension(a.dim),
            s = {};return f(a.getViewLabels(), function (t) {
          s[t.tickValue] = 1;
        }), function (t) {
          return !s.hasOwnProperty(e.get(o, t));
        };
      }
    }
  }function Wd(t, e) {
    var n = t.getExtent(),
        i = Math.abs(n[1] - n[0]) / t.scale.count();isNaN(i) && (i = 0);for (var r = e.count(), a = Math.max(1, Math.round(r / 5)), o = 0; r > o; o += a) {
      if (1.5 * yd.getSymbolSize(e, o)[t.isHorizontal() ? 1 : 0] > i) return !1;
    }return !0;
  }function Gd(t, e, n) {
    if ("cartesian2d" === t.type) {
      var i = t.getBaseAxis().isHorizontal(),
          r = Lc(t, e, n);if (!n.get("clip", !0)) {
        var a = r.shape,
            o = Math.max(a.width, a.height);i ? (a.y -= o, a.height += 2 * o) : (a.x -= o, a.width += 2 * o);
      }return r;
    }return Oc(t, e, n);
  }function Xd(t, e) {
    this.getAllNames = function () {
      var t = e();return t.mapArray(t.getName);
    }, this.containName = function (t) {
      var n = e();return n.indexOfName(t) >= 0;
    }, this.indexOfName = function (e) {
      var n = t();return n.indexOfName(e);
    }, this.getItemVisual = function (e, n) {
      var i = t();return i.getItemVisual(e, n);
    };
  }function Ud(t, e, n, i) {
    var r = e.getData(),
        a = this.dataIndex,
        o = r.getName(a),
        s = e.get("selectedOffset");i.dispatchAction({ type: "pieToggleSelect", from: t, name: o, seriesId: e.id }), r.each(function (t) {
      Yd(r.getItemGraphicEl(t), r.getItemLayout(t), e.isSelected(r.getName(t)), s, n);
    });
  }function Yd(t, e, n, i, r) {
    var a = (e.startAngle + e.endAngle) / 2,
        o = Math.cos(a),
        s = Math.sin(a),
        l = n ? i : 0,
        u = [o * l, s * l];r ? t.animate().when(200, { position: u }).start("bounceOut") : t.attr("position", u);
  }function qd(t, e) {
    _g.call(this);var n = new Fm({ z2: 2 }),
        i = new Xm(),
        r = new Bm();this.add(n), this.add(i), this.add(r), this.updateData(t, e, !0);
  }function jd(t, e, n, i, r, a, o, s, l, u) {
    function h(e, n, i) {
      for (var r = e; n > r && !(t[r].y + i > l + o); r++) {
        if (t[r].y += i, r > e && n > r + 1 && t[r + 1].y > t[r].y + t[r].height) return void c(r, i / 2);
      }c(n - 1, i / 2);
    }function c(e, n) {
      for (var i = e; i >= 0 && !(t[i].y - n < l) && (t[i].y -= n, !(i > 0 && t[i].y > t[i - 1].y + t[i - 1].height)); i--) {}
    }function d(t, e, n, i, r, a) {
      for (var o = a > 0 ? e ? Number.MAX_VALUE : 0 : e ? Number.MAX_VALUE : 0, s = 0, l = t.length; l > s; s++) {
        if ("none" === t[s].labelAlignTo) {
          var u = Math.abs(t[s].y - i),
              h = t[s].len,
              c = t[s].len2,
              d = r + h > u ? Math.sqrt((r + h + c) * (r + h + c) - u * u) : Math.abs(t[s].x - n);e && d >= o && (d = o - 10), !e && o >= d && (d = o + 10), t[s].x = n + d * a, o = d;
        }
      }
    }t.sort(function (t, e) {
      return t.y - e.y;
    });for (var f, p = 0, g = t.length, v = [], m = [], y = 0; g > y; y++) {
      if ("outer" === t[y].position && "labelLine" === t[y].labelAlignTo) {
        var x = t[y].x - u;t[y].linePoints[1][0] += x, t[y].x = u;
      }f = t[y].y - p, 0 > f && h(y, g, -f, r), p = t[y].y + t[y].height;
    }0 > o - p && c(g - 1, p - o);for (var y = 0; g > y; y++) {
      t[y].y >= n ? m.push(t[y]) : v.push(t[y]);
    }d(v, !1, e, n, i, r), d(m, !0, e, n, i, r);
  }function Zd(t, e, n, i, r, a, o, s) {
    for (var l = [], u = [], h = Number.MAX_VALUE, c = -Number.MAX_VALUE, d = 0; d < t.length; d++) {
      Kd(t[d]) || (t[d].x < e ? (h = Math.min(h, t[d].x), l.push(t[d])) : (c = Math.max(c, t[d].x), u.push(t[d])));
    }jd(u, e, n, i, 1, r, a, o, s, c), jd(l, e, n, i, -1, r, a, o, s, h);for (var d = 0; d < t.length; d++) {
      var f = t[d];if (!Kd(f)) {
        var p = f.linePoints;if (p) {
          var g,
              v = "edge" === f.labelAlignTo,
              m = f.textRect.width;g = v ? f.x < e ? p[2][0] - f.labelDistance - o - f.labelMargin : o + r - f.labelMargin - p[2][0] - f.labelDistance : f.x < e ? f.x - o - f.bleedMargin : o + r - f.x - f.bleedMargin, g < f.textRect.width && (f.text = Kn(f.text, g, f.font), "edge" === f.labelAlignTo && (m = Gn(f.text, f.font)));var y = p[1][0] - p[2][0];v ? p[2][0] = f.x < e ? o + f.labelMargin + m + f.labelDistance : o + r - f.labelMargin - m - f.labelDistance : (p[2][0] = f.x < e ? f.x + f.labelDistance : f.x - f.labelDistance, p[1][0] = p[2][0] + y), p[1][1] = p[2][1] = f.y;
        }
      }
    }
  }function Kd(t) {
    return "center" === t.position;
  }function $d(t, e) {
    return Zo(t.getBoxLayoutParams(), { width: e.getWidth(), height: e.getHeight() });
  }function Qd(t, e, n) {
    lb.call(this, t, e, n), this.type = "value", this.angle = 0, this.name = "", this.model;
  }function Jd(t, e, n) {
    this._model = t, this.dimensions = [], this._indicatorAxes = p(t.getIndicatorModels(), function (t, e) {
      var n = "indicator_" + e,
          i = new Qd(n, "log" === t.get("axisType") ? new Yw() : new Sw());return i.name = t.get("name"), i.model = t, t.axis = i, this.dimensions.push(n), i;
    }, this), this.resize(t, n), this.cx, this.cy, this.r, this.r0, this.startAngle;
  }function tf(t, e) {
    return s({ show: e }, t);
  }function ef(t) {
    return _(t) || (t = [+t, +t]), t;
  }function nf(t) {
    return !isNaN(t[0]) && !isNaN(t[1]);
  }function rf(t) {
    return [t.cx, t.cy];
  }function af(t, e) {
    var n = t.get("center"),
        i = e.getWidth(),
        r = e.getHeight(),
        a = Math.min(i, r),
        o = _o(n[0], e.getWidth()),
        s = _o(n[1], e.getHeight()),
        l = _o(t.get("radius"), a / 2);return { cx: o, cy: s, r: l };
  }function of(t, e) {
    return e && ("string" == typeof e ? t = e.replace("{value}", null != t ? t : "") : "function" == typeof e && (t = e(t))), t;
  }function sf(t) {
    return t.get("stack") || "__ec_stack_" + t.seriesIndex;
  }function lf(t, e) {
    return e.dim + t.model.componentIndex;
  }function uf(t, e) {
    var n = {},
        i = hf(v(e.getSeriesByType(t), function (t) {
      return !e.isSeriesFiltered(t) && t.coordinateSystem && "polar" === t.coordinateSystem.type;
    }));e.eachSeriesByType(t, function (t) {
      if ("polar" === t.coordinateSystem.type) {
        var e = t.getData(),
            r = t.coordinateSystem,
            a = r.getBaseAxis(),
            o = lf(r, a),
            s = sf(t),
            l = i[o][s],
            u = l.offset,
            h = l.width,
            c = r.getOtherAxis(a),
            d = t.coordinateSystem.cx,
            f = t.coordinateSystem.cy,
            p = t.get("barMinHeight") || 0,
            g = t.get("barMinAngle") || 0;n[s] = n[s] || [];for (var v = e.mapDimension(c.dim), m = e.mapDimension(a.dim), y = ch(e, v), x = "radius" !== a.dim || !t.get("roundCap", !0), _ = "radius" === c.dim ? c.dataToRadius(0) : c.dataToAngle(0), w = 0, b = e.count(); b > w; w++) {
          var S = e.get(v, w),
              M = e.get(m, w),
              A = S >= 0 ? "p" : "n",
              I = _;y && (n[s][M] || (n[s][M] = { p: _, n: _ }), I = n[s][M][A]);var T, C, D, k;if ("radius" === c.dim) {
            var P = c.dataToRadius(S) - _,
                L = a.dataToAngle(M);Math.abs(P) < p && (P = (0 > P ? -1 : 1) * p), T = I, C = I + P, D = L - u, k = D - h, y && (n[s][M][A] = C);
          } else {
            var O = c.dataToAngle(S, x) - _,
                E = a.dataToRadius(M);Math.abs(O) < g && (O = (0 > O ? -1 : 1) * g), T = E + u, C = T + h, D = I, k = I + O, y && (n[s][M][A] = k);
          }e.setItemLayout(w, { cx: d, cy: f, r0: T, r: C, startAngle: -D * Math.PI / 180, endAngle: -k * Math.PI / 180 });
        }
      }
    }, this);
  }function hf(t) {
    var e = {};f(t, function (t) {
      var n = t.getData(),
          i = t.coordinateSystem,
          r = i.getBaseAxis(),
          a = lf(i, r),
          o = r.getExtent(),
          s = "category" === r.type ? r.getBandWidth() : Math.abs(o[1] - o[0]) / n.count(),
          l = e[a] || { bandWidth: s, remainedWidth: s, autoWidthCount: 0, categoryGap: "20%", gap: "30%", stacks: {} },
          u = l.stacks;e[a] = l;var h = sf(t);u[h] || l.autoWidthCount++, u[h] = u[h] || { width: 0, maxWidth: 0 };var c = _o(t.get("barWidth"), s),
          d = _o(t.get("barMaxWidth"), s),
          f = t.get("barGap"),
          p = t.get("barCategoryGap");c && !u[h].width && (c = Math.min(l.remainedWidth, c), u[h].width = c, l.remainedWidth -= c), d && (u[h].maxWidth = d), null != f && (l.gap = f), null != p && (l.categoryGap = p);
    });var n = {};return f(e, function (t, e) {
      n[e] = {};var i = t.stacks,
          r = t.bandWidth,
          a = _o(t.categoryGap, r),
          o = _o(t.gap, 1),
          s = t.remainedWidth,
          l = t.autoWidthCount,
          u = (s - a) / (l + (l - 1) * o);u = Math.max(u, 0), f(i, function (t) {
        var e = t.maxWidth;e && u > e && (e = Math.min(e, s), t.width && (e = Math.min(e, t.width)), s -= e, t.width = e, l--);
      }), u = (s - a) / (l + (l - 1) * o), u = Math.max(u, 0);var h,
          c = 0;f(i, function (t) {
        t.width || (t.width = u), h = t, c += t.width * (1 + o);
      }), h && (c -= h.width * o);var d = -c / 2;f(i, function (t, i) {
        n[e][i] = n[e][i] || { offset: d, width: t.width }, d += t.width * (1 + o);
      });
    }), n;
  }function cf(t, e) {
    lb.call(this, "radius", t, e), this.type = "category";
  }function df(t, e) {
    e = e || [0, 360], lb.call(this, "angle", t, e), this.type = "category";
  }function ff(t, e) {
    return e.type || (e.data ? "category" : "value");
  }function pf(t, e, n) {
    var i = e.get("center"),
        r = n.getWidth(),
        a = n.getHeight();t.cx = _o(i[0], r), t.cy = _o(i[1], a);var o = t.getRadiusAxis(),
        s = Math.min(r, a) / 2,
        l = e.get("radius");null == l ? l = [0, "100%"] : _(l) || (l = [0, l]), l = [_o(l[0], s), _o(l[1], s)], o.inverse ? o.setExtent(l[1], l[0]) : o.setExtent(l[0], l[1]);
  }function gf(t) {
    var e = this,
        n = e.getAngleAxis(),
        i = e.getRadiusAxis();if (n.scale.setExtent(1 / 0, -1 / 0), i.scale.setExtent(1 / 0, -1 / 0), t.eachSeries(function (t) {
      if (t.coordinateSystem === e) {
        var r = t.getData();f(r.mapDimension("radius", !0), function (t) {
          i.scale.unionExtentFromData(r, dh(r, t));
        }), f(r.mapDimension("angle", !0), function (t) {
          n.scale.unionExtentFromData(r, dh(r, t));
        });
      }
    }), Nh(n.scale, n.model), Nh(i.scale, i.model), "category" === n.type && !n.onBand) {
      var r = n.getExtent(),
          a = 360 / n.scale.count();n.inverse ? r[1] += a : r[1] -= a, n.setExtent(r[0], r[1]);
    }
  }function vf(t, e) {
    if (t.type = e.get("type"), t.scale = Fh(e), t.onBand = e.get("boundaryGap") && "category" === t.type, t.inverse = e.get("inverse"), "angleAxis" === e.mainType) {
      t.inverse ^= e.get("clockwise");var n = e.get("startAngle");t.setExtent(n, n + (t.inverse ? -360 : 360));
    }e.axis = t, t.model = e;
  }function mf(t, e, n) {
    e[1] > e[0] && (e = e.slice().reverse());var i = t.coordToPoint([e[0], n]),
        r = t.coordToPoint([e[1], n]);return { x1: i[0], y1: i[1], x2: r[0], y2: r[1] };
  }function yf(t) {
    var e = t.getRadiusAxis();return e.inverse ? 0 : 1;
  }function xf(t) {
    var e = t[0],
        n = t[t.length - 1];e && n && Math.abs(Math.abs(e.coord - n.coord) - 360) < 1e-4 && t.pop();
  }function _f(t, e, n) {
    return { position: [t.cx, t.cy], rotation: n / 180 * Math.PI, labelDirection: -1, tickDirection: -1, nameDirection: 1, labelRotate: e.getModel("axisLabel").get("rotate"), z2: 1 };
  }function wf(t, e, n, i, r) {
    var a = t.axis;if (!a.scale.isBlank() && a.containData(e)) {
      if (!t.involveSeries) return void n.showPointer(t, e);var s = bf(e, t),
          l = s.payloadBatch,
          u = s.snapToValue;l[0] && null == r.seriesIndex && o(r, l[0]), !i && t.snap && a.containData(u) && null != u && (e = u), n.showPointer(t, e, l, r), n.showTooltip(t, s, u);
    }
  }function bf(t, e) {
    var n = e.axis,
        i = n.dim,
        r = t,
        a = [],
        o = Number.MAX_VALUE,
        s = -1;return XS(e.seriesModels, function (e) {
      var l,
          u,
          h = e.getData().mapDimension(i, !0);if (e.getAxisTooltipData) {
        var c = e.getAxisTooltipData(h, t, n);u = c.dataIndices, l = c.nestestValue;
      } else {
        if (u = e.getData().indicesOfNearest(h[0], t, "category" === n.type ? .5 : null), !u.length) return;l = e.getData().get(h[0], u[0]);
      }if (null != l && isFinite(l)) {
        var d = t - l,
            f = Math.abs(d);o >= f && ((o > f || d >= 0 && 0 > s) && (o = f, s = d, r = l, a.length = 0), XS(u, function (t) {
          a.push({ seriesIndex: e.seriesIndex, dataIndexInside: t, dataIndex: e.getData().getRawIndex(t) });
        }));
      }
    }), { payloadBatch: a, snapToValue: r };
  }function Sf(t, e, n, i) {
    t[e.key] = { value: n, payloadBatch: i };
  }function Mf(t, e, n, i) {
    var r = n.payloadBatch,
        a = e.axis,
        o = a.model,
        s = e.axisPointerModel;if (e.triggerTooltip && r.length) {
      var l = e.coordSys.model,
          u = dd(l),
          h = t.map[u];h || (h = t.map[u] = { coordSysId: l.id, coordSysIndex: l.componentIndex, coordSysType: l.type, coordSysMainType: l.mainType, dataByAxis: [] }, t.list.push(h)), h.dataByAxis.push({ axisDim: a.dim, axisIndex: o.componentIndex, axisType: o.type, axisId: o.id, value: i, valueLabelOpt: { precision: s.get("label.precision"), formatter: s.get("label.formatter") }, seriesDataIndices: r.slice() });
    }
  }function Af(t, e, n) {
    var i = n.axesInfo = [];XS(e, function (e, n) {
      var r = e.axisPointerModel.option,
          a = t[n];a ? (!e.useHandle && (r.status = "show"), r.value = a.value, r.seriesDataIndices = (a.payloadBatch || []).slice()) : !e.useHandle && (r.status = "hide"), "show" === r.status && i.push({ axisDim: e.axis.dim, axisIndex: e.axis.model.componentIndex, value: r.value });
    });
  }function If(t, e, n, i) {
    if (kf(e) || !t.list.length) return void i({ type: "hideTip" });var r = ((t.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};i({ type: "showTip", escapeConnect: !0, x: e[0], y: e[1], tooltipOption: n.tooltipOption, position: n.position, dataIndexInside: r.dataIndexInside, dataIndex: r.dataIndex, seriesIndex: r.seriesIndex, dataByCoordSys: t.list });
  }function Tf(t, e, n) {
    var i = n.getZr(),
        r = "axisPointerLastHighlights",
        a = YS(i)[r] || {},
        o = YS(i)[r] = {};XS(t, function (t) {
      var e = t.axisPointerModel.option;"show" === e.status && XS(e.seriesDataIndices, function (t) {
        var e = t.seriesIndex + " | " + t.dataIndex;o[e] = t;
      });
    });var s = [],
        l = [];f(a, function (t, e) {
      !o[e] && l.push(t);
    }), f(o, function (t, e) {
      !a[e] && s.push(t);
    }), l.length && n.dispatchAction({ type: "downplay", escapeConnect: !0, batch: l }), s.length && n.dispatchAction({ type: "highlight", escapeConnect: !0, batch: s });
  }function Cf(t, e) {
    for (var n = 0; n < (t || []).length; n++) {
      var i = t[n];if (e.axis.dim === i.axisDim && e.axis.model.componentIndex === i.axisIndex) return i;
    }
  }function Df(t) {
    var e = t.axis.model,
        n = {},
        i = n.axisDim = t.axis.dim;return n.axisIndex = n[i + "AxisIndex"] = e.componentIndex, n.axisName = n[i + "AxisName"] = e.name, n.axisId = n[i + "AxisId"] = e.id, n;
  }function kf(t) {
    return !t || null == t[0] || isNaN(t[0]) || null == t[1] || isNaN(t[1]);
  }function Pf(t, e, n) {
    if (!sp.node) {
      var i = e.getZr();jS(i).records || (jS(i).records = {}), Lf(i, e);var r = jS(i).records[t] || (jS(i).records[t] = {});r.handler = n;
    }
  }function Lf(t, e) {
    function n(n, i) {
      t.on(n, function (n) {
        var r = zf(e);ZS(jS(t).records, function (t) {
          t && i(t, n, r.dispatchAction);
        }), Of(r.pendings, e);
      });
    }jS(t).initialized || (jS(t).initialized = !0, n("click", x(Bf, "click")), n("mousemove", x(Bf, "mousemove")), n("globalout", Ef));
  }function Of(t, e) {
    var n,
        i = t.showTip.length,
        r = t.hideTip.length;i ? n = t.showTip[i - 1] : r && (n = t.hideTip[r - 1]), n && (n.dispatchAction = null, e.dispatchAction(n));
  }function Ef(t, e, n) {
    t.handler("leave", null, n);
  }function Bf(t, e, n, i) {
    e.handler(t, n, i);
  }function zf(t) {
    var e = { showTip: [], hideTip: [] },
        n = function n(i) {
      var r = e[i.type];r ? r.push(i) : (i.dispatchAction = n, t.dispatchAction(i));
    };return { dispatchAction: n, pendings: e };
  }function Rf(t, e) {
    if (!sp.node) {
      var n = e.getZr(),
          i = (jS(n).records || {})[t];i && (jS(n).records[t] = null);
    }
  }function Nf() {}function Ff(t, e, n, i) {
    Vf($S(n).lastProp, i) || ($S(n).lastProp = i, e ? Qa(n, i, t) : (n.stopAnimation(), n.attr(i)));
  }function Vf(t, e) {
    if (S(t) && S(e)) {
      var n = !0;return f(e, function (e, i) {
        n = n && Vf(t[i], e);
      }), !!n;
    }return t === e;
  }function Hf(t, e) {
    t[e.get("label.show") ? "show" : "hide"]();
  }function Wf(t) {
    return { position: t.position.slice(), rotation: t.rotation || 0 };
  }function Gf(t, e, n) {
    var i = e.get("z"),
        r = e.get("zlevel");t && t.traverse(function (t) {
      "group" !== t.type && (null != i && (t.z = i), null != r && (t.zlevel = r), t.silent = n);
    });
  }function Xf(t) {
    var e,
        n = t.get("type"),
        i = t.getModel(n + "Style");return "line" === n ? (e = i.getLineStyle(), e.fill = null) : "shadow" === n && (e = i.getAreaStyle(), e.stroke = null), e;
  }function Uf(t, e, n, i, r) {
    var a = n.get("value"),
        o = qf(a, e.axis, e.ecModel, n.get("seriesDataIndices"), { precision: n.get("label.precision"), formatter: n.get("label.formatter") }),
        s = n.getModel("label"),
        l = ky(s.get("padding") || 0),
        u = s.getFont(),
        h = Xn(o, u),
        c = r.position,
        d = h.width + l[1] + l[3],
        f = h.height + l[0] + l[2],
        p = r.align;"right" === p && (c[0] -= d), "center" === p && (c[0] -= d / 2);var g = r.verticalAlign;"bottom" === g && (c[1] -= f), "middle" === g && (c[1] -= f / 2), Yf(c, d, f, i);var v = s.get("backgroundColor");v && "auto" !== v || (v = e.get("axisLine.lineStyle.color")), t.label = { shape: { x: 0, y: 0, width: d, height: f, r: s.get("borderRadius") }, position: c.slice(), style: { text: o, textFont: u, textFill: s.getTextColor(), textPosition: "inside", textPadding: l, fill: v, stroke: s.get("borderColor") || "transparent", lineWidth: s.get("borderWidth") || 0, shadowBlur: s.get("shadowBlur"), shadowColor: s.get("shadowColor"), shadowOffsetX: s.get("shadowOffsetX"), shadowOffsetY: s.get("shadowOffsetY") }, z2: 10 };
  }function Yf(t, e, n, i) {
    var r = i.getWidth(),
        a = i.getHeight();t[0] = Math.min(t[0] + e, r) - e, t[1] = Math.min(t[1] + n, a) - n, t[0] = Math.max(t[0], 0), t[1] = Math.max(t[1], 0);
  }function qf(t, e, n, i, r) {
    t = e.scale.parse(t);var a = e.scale.getLabel(t, { precision: r.precision }),
        o = r.formatter;if (o) {
      var s = { value: Wh(e, t), axisDimension: e.dim, axisIndex: e.index, seriesData: [] };f(i, function (t) {
        var e = n.getSeriesByIndex(t.seriesIndex),
            i = t.dataIndexInside,
            r = e && e.getDataParams(i);r && s.seriesData.push(r);
      }), b(o) ? a = o.replace("{value}", a) : w(o) && (a = o(s));
    }return a;
  }function jf(t, e, n) {
    var i = Pe();return ze(i, i, n.rotation), Be(i, i, n.position), eo([t.dataToCoord(e), (n.labelOffset || 0) + (n.labelDirection || 1) * (n.labelMargin || 0)], i);
  }function Zf(t, e, n, i, r, a) {
    var o = zb.innerTextLayout(n.rotation, 0, n.labelDirection);n.labelMargin = r.get("label.margin"), Uf(e, i, r, a, { position: jf(i.axis, t, n), align: o.textAlign, verticalAlign: o.textVerticalAlign });
  }function Kf(t, e, n) {
    return n = n || 0, { x1: t[n], y1: t[1 - n], x2: e[n], y2: e[1 - n] };
  }function $f(t, e, n) {
    return n = n || 0, { x: t[n], y: t[1 - n], width: e[n], height: e[1 - n] };
  }function Qf(t, e, n, i, r, a) {
    return { cx: t, cy: e, r0: n, r: i, startAngle: r, endAngle: a, clockwise: !0 };
  }function Jf(t, e) {
    var n = {};return n[e.dim + "AxisIndex"] = e.index, t.getCartesian(n);
  }function tp(t) {
    return "x" === t.dim ? 0 : 1;
  }function ep(t, e, n, i, r) {
    var a = e.axis,
        o = a.dataToCoord(t),
        s = i.getAngleAxis().getExtent()[0];s = s / 180 * Math.PI;var l,
        u,
        h,
        c = i.getRadiusAxis().getExtent();if ("radius" === a.dim) {
      var d = Pe();ze(d, d, s), Be(d, d, [i.cx, i.cy]), l = eo([o, -r], d);var f = e.getModel("axisLabel").get("rotate") || 0,
          p = zb.innerTextLayout(s, f * Math.PI / 180, -1);u = p.textAlign, h = p.textVerticalAlign;
    } else {
      var g = c[1];l = i.coordToPoint([g + r, o]);var v = i.cx,
          m = i.cy;u = Math.abs(l[0] - v) / g < .3 ? "center" : l[0] > v ? "left" : "right", h = Math.abs(l[1] - m) / g < .3 ? "middle" : l[1] > m ? "top" : "bottom";
    }return { position: l, align: u, verticalAlign: h };
  }var np;"undefined" != typeof window ? np = window.__DEV__ : "undefined" != typeof global && (np = global.__DEV__), "undefined" == typeof np && (np = !0);var ip = np,
      rp = 2311,
      ap = function ap() {
    return rp++;
  },
      op = {};op = "object" == (typeof wx === "undefined" ? "undefined" : _typeof(wx)) && "function" == typeof wx.getSystemInfoSync ? { browser: {}, os: {}, node: !1, wxa: !0, canvasSupported: !0, svgSupported: !1, touchEventsSupported: !0, domSupported: !1 } : "undefined" == typeof document && "undefined" != typeof self ? { browser: {}, os: {}, node: !1, worker: !0, canvasSupported: !0, domSupported: !1 } : "undefined" == typeof navigator ? { browser: {}, os: {}, node: !0, worker: !1, canvasSupported: !0, svgSupported: !0, domSupported: !1 } : e(navigator.userAgent);var sp = op,
      lp = { "[object Function]": 1, "[object RegExp]": 1, "[object Date]": 1, "[object Error]": 1, "[object CanvasGradient]": 1, "[object CanvasPattern]": 1, "[object Image]": 1, "[object Canvas]": 1 },
      up = { "[object Int8Array]": 1, "[object Uint8Array]": 1, "[object Uint8ClampedArray]": 1, "[object Int16Array]": 1, "[object Uint16Array]": 1, "[object Int32Array]": 1, "[object Uint32Array]": 1, "[object Float32Array]": 1, "[object Float64Array]": 1 },
      hp = Object.prototype.toString,
      cp = Array.prototype,
      dp = cp.forEach,
      fp = cp.filter,
      pp = cp.slice,
      gp = cp.map,
      vp = cp.reduce,
      mp = {},
      yp = function yp() {
    return mp.createCanvas();
  };mp.createCanvas = function () {
    return document.createElement("canvas");
  };var xp,
      _p = "__ec_primitive__";R.prototype = { constructor: R, get: function get(t) {
      return this.data.hasOwnProperty(t) ? this.data[t] : null;
    }, set: function set(t, e) {
      return this.data[t] = e;
    }, each: function each(t, e) {
      void 0 !== e && (t = y(t, e));for (var n in this.data) {
        this.data.hasOwnProperty(n) && t(this.data[n], n);
      }
    }, removeKey: function removeKey(t) {
      delete this.data[t];
    } };var wp = (Object.freeze || Object)({ $override: n, clone: i, merge: r, mergeAll: a, extend: o, defaults: s, createCanvas: yp, getContext: l, indexOf: u, inherits: h, mixin: c, isArrayLike: d, each: f, map: p, reduce: g, filter: v, find: m, bind: y, curry: x, isArray: _, isFunction: w, isString: b, isObject: S, isBuiltInObject: M, isTypedArray: A, isDom: I, eqNaN: T, retrieve: C, retrieve2: D, retrieve3: k, slice: P, normalizeCssArray: L, assert: O, trim: E, setAsPrimitive: B, isPrimitive: z, createHashMap: N, concatArray: F, noop: V }),
      bp = "undefined" == typeof Float32Array ? Array : Float32Array,
      Sp = j,
      Mp = Z,
      Ap = ee,
      Ip = ne,
      Tp = (Object.freeze || Object)({ create: H, copy: W, clone: G, set: X, add: U, scaleAndAdd: Y, sub: q, len: j, length: Sp, lenSquare: Z, lengthSquare: Mp, mul: K, div: $, dot: Q, scale: J, normalize: te, distance: ee, dist: Ap, distanceSquare: ne, distSquare: Ip, negate: ie, lerp: re, applyTransform: ae, min: oe, max: se });le.prototype = { constructor: le, _dragStart: function _dragStart(t) {
      for (var e = t.target; e && !e.draggable;) {
        e = e.parent;
      }e && (this._draggingTarget = e, e.dragging = !0, this._x = t.offsetX, this._y = t.offsetY, this.dispatchToElement(ue(e, t), "dragstart", t.event));
    }, _drag: function _drag(t) {
      var e = this._draggingTarget;if (e) {
        var n = t.offsetX,
            i = t.offsetY,
            r = n - this._x,
            a = i - this._y;this._x = n, this._y = i, e.drift(r, a, t), this.dispatchToElement(ue(e, t), "drag", t.event);var o = this.findHover(n, i, e).target,
            s = this._dropTarget;this._dropTarget = o, e !== o && (s && o !== s && this.dispatchToElement(ue(s, t), "dragleave", t.event), o && o !== s && this.dispatchToElement(ue(o, t), "dragenter", t.event));
      }
    }, _dragEnd: function _dragEnd(t) {
      var e = this._draggingTarget;e && (e.dragging = !1), this.dispatchToElement(ue(e, t), "dragend", t.event), this._dropTarget && this.dispatchToElement(ue(this._dropTarget, t), "drop", t.event), this._draggingTarget = null, this._dropTarget = null;
    } };var Cp = Array.prototype.slice,
      Dp = function Dp(t) {
    this._$handlers = {}, this._$eventProcessor = t;
  };Dp.prototype = { constructor: Dp, one: function one(t, e, n, i) {
      return ce(this, t, e, n, i, !0);
    }, on: function on(t, e, n, i) {
      return ce(this, t, e, n, i, !1);
    }, isSilent: function isSilent(t) {
      var e = this._$handlers;return !e[t] || !e[t].length;
    }, off: function off(t, e) {
      var n = this._$handlers;if (!t) return this._$handlers = {}, this;if (e) {
        if (n[t]) {
          for (var i = [], r = 0, a = n[t].length; a > r; r++) {
            n[t][r].h !== e && i.push(n[t][r]);
          }n[t] = i;
        }n[t] && 0 === n[t].length && delete n[t];
      } else delete n[t];return this;
    }, trigger: function trigger(t) {
      var e = this._$handlers[t],
          n = this._$eventProcessor;if (e) {
        var i = arguments,
            r = i.length;r > 3 && (i = Cp.call(i, 1));for (var a = e.length, o = 0; a > o;) {
          var s = e[o];if (n && n.filter && null != s.query && !n.filter(t, s.query)) o++;else {
            switch (r) {case 1:
                s.h.call(s.ctx);break;case 2:
                s.h.call(s.ctx, i[1]);break;case 3:
                s.h.call(s.ctx, i[1], i[2]);break;default:
                s.h.apply(s.ctx, i);}s.one ? (e.splice(o, 1), a--) : o++;
          }
        }
      }return n && n.afterTrigger && n.afterTrigger(t), this;
    }, triggerWithContext: function triggerWithContext(t) {
      var e = this._$handlers[t],
          n = this._$eventProcessor;if (e) {
        var i = arguments,
            r = i.length;r > 4 && (i = Cp.call(i, 1, i.length - 1));for (var a = i[i.length - 1], o = e.length, s = 0; o > s;) {
          var l = e[s];if (n && n.filter && null != l.query && !n.filter(t, l.query)) s++;else {
            switch (r) {case 1:
                l.h.call(a);break;case 2:
                l.h.call(a, i[1]);break;case 3:
                l.h.call(a, i[1], i[2]);break;default:
                l.h.apply(a, i);}l.one ? (e.splice(s, 1), o--) : s++;
          }
        }
      }return n && n.afterTrigger && n.afterTrigger(t), this;
    } };var kp = Math.log(2),
      Pp = "___zrEVENTSAVED",
      Lp = "undefined" != typeof window && !!window.addEventListener,
      Op = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      Ep = [],
      Bp = Lp ? function (t) {
    t.preventDefault(), t.stopPropagation(), t.cancelBubble = !0;
  } : function (t) {
    t.returnValue = !1, t.cancelBubble = !0;
  },
      zp = function zp() {
    this._track = [];
  };zp.prototype = { constructor: zp, recognize: function recognize(t, e, n) {
      return this._doTrack(t, e, n), this._recognize(t);
    }, clear: function clear() {
      return this._track.length = 0, this;
    }, _doTrack: function _doTrack(t, e, n) {
      var i = t.touches;if (i) {
        for (var r = { points: [], touches: [], target: e, event: t }, a = 0, o = i.length; o > a; a++) {
          var s = i[a],
              l = ye(n, s, {});r.points.push([l.zrX, l.zrY]), r.touches.push(s);
        }this._track.push(r);
      }
    }, _recognize: function _recognize(t) {
      for (var e in Rp) {
        if (Rp.hasOwnProperty(e)) {
          var n = Rp[e](this._track, t);if (n) return n;
        }
      }
    } };var Rp = { pinch: function pinch(t, e) {
      var n = t.length;if (n) {
        var i = (t[n - 1] || {}).points,
            r = (t[n - 2] || {}).points || i;if (r && r.length > 1 && i && i.length > 1) {
          var a = Me(i) / Me(r);!isFinite(a) && (a = 1), e.pinchScale = a;var o = Ae(i);return e.pinchX = o[0], e.pinchY = o[1], { type: "pinch", target: t[0].target, event: e };
        }
      }
    } },
      Np = "silent";Ce.prototype.dispose = function () {};var Fp = ["click", "dblclick", "mousewheel", "mouseout", "mouseup", "mousedown", "mousemove", "contextmenu"],
      Vp = function Vp(t, e, n, i) {
    Dp.call(this), this.storage = t, this.painter = e, this.painterRoot = i, n = n || new Ce(), this.proxy = null, this._hovered = {}, this._lastTouchMoment, this._lastX, this._lastY, this._gestureMgr, le.call(this), this.setHandlerProxy(n);
  };Vp.prototype = { constructor: Vp, setHandlerProxy: function setHandlerProxy(t) {
      this.proxy && this.proxy.dispose(), t && (f(Fp, function (e) {
        t.on && t.on(e, this[e], this);
      }, this), t.handler = this), this.proxy = t;
    }, mousemove: function mousemove(t) {
      var e = t.zrX,
          n = t.zrY,
          i = ke(this, e, n),
          r = this._hovered,
          a = r.target;a && !a.__zr && (r = this.findHover(r.x, r.y), a = r.target);var o = this._hovered = i ? { x: e, y: n } : this.findHover(e, n),
          s = o.target,
          l = this.proxy;l.setCursor && l.setCursor(s ? s.cursor : "default"), a && s !== a && this.dispatchToElement(r, "mouseout", t), this.dispatchToElement(o, "mousemove", t), s && s !== a && this.dispatchToElement(o, "mouseover", t);
    }, mouseout: function mouseout(t) {
      var e = t.zrEventControl,
          n = t.zrIsToLocalDOM;"only_globalout" !== e && this.dispatchToElement(this._hovered, "mouseout", t), "no_globalout" !== e && !n && this.trigger("globalout", { type: "globalout", event: t });
    }, resize: function resize() {
      this._hovered = {};
    }, dispatch: function dispatch(t, e) {
      var n = this[t];
      n && n.call(this, e);
    }, dispose: function dispose() {
      this.proxy.dispose(), this.storage = this.proxy = this.painter = null;
    }, setCursorStyle: function setCursorStyle(t) {
      var e = this.proxy;e.setCursor && e.setCursor(t);
    }, dispatchToElement: function dispatchToElement(t, e, n) {
      t = t || {};var i = t.target;if (!i || !i.silent) {
        for (var r = "on" + e, a = Ie(e, t, n); i && (i[r] && (a.cancelBubble = i[r].call(i, a)), i.trigger(e, a), i = i.parent, !a.cancelBubble);) {}a.cancelBubble || (this.trigger(e, a), this.painter && this.painter.eachOtherLayer(function (t) {
          "function" == typeof t[r] && t[r].call(t, a), t.trigger && t.trigger(e, a);
        }));
      }
    }, findHover: function findHover(t, e, n) {
      for (var i = this.storage.getDisplayList(), r = { x: t, y: e }, a = i.length - 1; a >= 0; a--) {
        var o;if (i[a] !== n && !i[a].ignore && (o = De(i[a], t, e)) && (!r.topTarget && (r.topTarget = i[a]), o !== Np)) {
          r.target = i[a];break;
        }
      }return r;
    }, processGesture: function processGesture(t, e) {
      this._gestureMgr || (this._gestureMgr = new zp());var n = this._gestureMgr;"start" === e && n.clear();var i = n.recognize(t, this.findHover(t.zrX, t.zrY, null).target, this.proxy.dom);if ("end" === e && n.clear(), i) {
        var r = i.type;t.gestureEvent = r, this.dispatchToElement({ target: i.target }, r, i.event);
      }
    } }, f(["click", "mousedown", "mouseup", "mousewheel", "dblclick", "contextmenu"], function (t) {
    Vp.prototype[t] = function (e) {
      var n,
          i,
          r = e.zrX,
          a = e.zrY,
          o = ke(this, r, a);if ("mouseup" === t && o || (n = this.findHover(r, a), i = n.target), "mousedown" === t) this._downEl = i, this._downPoint = [e.zrX, e.zrY], this._upEl = i;else if ("mouseup" === t) this._upEl = i;else if ("click" === t) {
        if (this._downEl !== this._upEl || !this._downPoint || Ap(this._downPoint, [e.zrX, e.zrY]) > 4) return;this._downPoint = null;
      }this.dispatchToElement(n, t, e);
    };
  }), c(Vp, Dp), c(Vp, le);var Hp = "undefined" == typeof Float32Array ? Array : Float32Array,
      Wp = (Object.freeze || Object)({ create: Pe, identity: Le, copy: Oe, mul: Ee, translate: Be, rotate: ze, scale: Re, invert: Ne, clone: Fe }),
      Gp = Le,
      Xp = 5e-5,
      Up = function Up(t) {
    t = t || {}, t.position || (this.position = [0, 0]), null == t.rotation && (this.rotation = 0), t.scale || (this.scale = [1, 1]), this.origin = this.origin || null;
  },
      Yp = Up.prototype;Yp.transform = null, Yp.needLocalTransform = function () {
    return Ve(this.rotation) || Ve(this.position[0]) || Ve(this.position[1]) || Ve(this.scale[0] - 1) || Ve(this.scale[1] - 1);
  };var qp = [];Yp.updateTransform = function () {
    var t = this.parent,
        e = t && t.transform,
        n = this.needLocalTransform(),
        i = this.transform;if (!n && !e) return void (i && Gp(i));i = i || Pe(), n ? this.getLocalTransform(i) : Gp(i), e && (n ? Ee(i, t.transform, i) : Oe(i, t.transform)), this.transform = i;var r = this.globalScaleRatio;if (null != r && 1 !== r) {
      this.getGlobalScale(qp);var a = qp[0] < 0 ? -1 : 1,
          o = qp[1] < 0 ? -1 : 1,
          s = ((qp[0] - a) * r + a) / qp[0] || 0,
          l = ((qp[1] - o) * r + o) / qp[1] || 0;i[0] *= s, i[1] *= s, i[2] *= l, i[3] *= l;
    }this.invTransform = this.invTransform || Pe(), Ne(this.invTransform, i);
  }, Yp.getLocalTransform = function (t) {
    return Up.getLocalTransform(this, t);
  }, Yp.setTransform = function (t) {
    var e = this.transform,
        n = t.dpr || 1;e ? t.setTransform(n * e[0], n * e[1], n * e[2], n * e[3], n * e[4], n * e[5]) : t.setTransform(n, 0, 0, n, 0, 0);
  }, Yp.restoreTransform = function (t) {
    var e = t.dpr || 1;t.setTransform(e, 0, 0, e, 0, 0);
  };var jp = [],
      Zp = Pe();Yp.setLocalTransform = function (t) {
    if (t) {
      var e = t[0] * t[0] + t[1] * t[1],
          n = t[2] * t[2] + t[3] * t[3],
          i = this.position,
          r = this.scale;Ve(e - 1) && (e = Math.sqrt(e)), Ve(n - 1) && (n = Math.sqrt(n)), t[0] < 0 && (e = -e), t[3] < 0 && (n = -n), i[0] = t[4], i[1] = t[5], r[0] = e, r[1] = n, this.rotation = Math.atan2(-t[1] / n, t[0] / e);
    }
  }, Yp.decomposeTransform = function () {
    if (this.transform) {
      var t = this.parent,
          e = this.transform;t && t.transform && (Ee(jp, t.invTransform, e), e = jp);var n = this.origin;n && (n[0] || n[1]) && (Zp[4] = n[0], Zp[5] = n[1], Ee(jp, e, Zp), jp[4] -= n[0], jp[5] -= n[1], e = jp), this.setLocalTransform(e);
    }
  }, Yp.getGlobalScale = function (t) {
    var e = this.transform;return t = t || [], e ? (t[0] = Math.sqrt(e[0] * e[0] + e[1] * e[1]), t[1] = Math.sqrt(e[2] * e[2] + e[3] * e[3]), e[0] < 0 && (t[0] = -t[0]), e[3] < 0 && (t[1] = -t[1]), t) : (t[0] = 1, t[1] = 1, t);
  }, Yp.transformCoordToLocal = function (t, e) {
    var n = [t, e],
        i = this.invTransform;return i && ae(n, n, i), n;
  }, Yp.transformCoordToGlobal = function (t, e) {
    var n = [t, e],
        i = this.transform;return i && ae(n, n, i), n;
  }, Up.getLocalTransform = function (t, e) {
    e = e || [], Gp(e);var n = t.origin,
        i = t.scale || [1, 1],
        r = t.rotation || 0,
        a = t.position || [0, 0];return n && (e[4] -= n[0], e[5] -= n[1]), Re(e, e, i), r && ze(e, e, r), n && (e[4] += n[0], e[5] += n[1]), e[4] += a[0], e[5] += a[1], e;
  };var Kp = { linear: function linear(t) {
      return t;
    }, quadraticIn: function quadraticIn(t) {
      return t * t;
    }, quadraticOut: function quadraticOut(t) {
      return t * (2 - t);
    }, quadraticInOut: function quadraticInOut(t) {
      return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1);
    }, cubicIn: function cubicIn(t) {
      return t * t * t;
    }, cubicOut: function cubicOut(t) {
      return --t * t * t + 1;
    }, cubicInOut: function cubicInOut(t) {
      return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2);
    }, quarticIn: function quarticIn(t) {
      return t * t * t * t;
    }, quarticOut: function quarticOut(t) {
      return 1 - --t * t * t * t;
    }, quarticInOut: function quarticInOut(t) {
      return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2);
    }, quinticIn: function quinticIn(t) {
      return t * t * t * t * t;
    }, quinticOut: function quinticOut(t) {
      return --t * t * t * t * t + 1;
    }, quinticInOut: function quinticInOut(t) {
      return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2);
    }, sinusoidalIn: function sinusoidalIn(t) {
      return 1 - Math.cos(t * Math.PI / 2);
    }, sinusoidalOut: function sinusoidalOut(t) {
      return Math.sin(t * Math.PI / 2);
    }, sinusoidalInOut: function sinusoidalInOut(t) {
      return .5 * (1 - Math.cos(Math.PI * t));
    }, exponentialIn: function exponentialIn(t) {
      return 0 === t ? 0 : Math.pow(1024, t - 1);
    }, exponentialOut: function exponentialOut(t) {
      return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
    }, exponentialInOut: function exponentialInOut(t) {
      return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (-Math.pow(2, -10 * (t - 1)) + 2);
    }, circularIn: function circularIn(t) {
      return 1 - Math.sqrt(1 - t * t);
    }, circularOut: function circularOut(t) {
      return Math.sqrt(1 - --t * t);
    }, circularInOut: function circularInOut(t) {
      return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    }, elasticIn: function elasticIn(t) {
      var e,
          n = .1,
          i = .4;return 0 === t ? 0 : 1 === t ? 1 : (!n || 1 > n ? (n = 1, e = i / 4) : e = i * Math.asin(1 / n) / (2 * Math.PI), -(n * Math.pow(2, 10 * (t -= 1)) * Math.sin(2 * (t - e) * Math.PI / i)));
    }, elasticOut: function elasticOut(t) {
      var e,
          n = .1,
          i = .4;return 0 === t ? 0 : 1 === t ? 1 : (!n || 1 > n ? (n = 1, e = i / 4) : e = i * Math.asin(1 / n) / (2 * Math.PI), n * Math.pow(2, -10 * t) * Math.sin(2 * (t - e) * Math.PI / i) + 1);
    }, elasticInOut: function elasticInOut(t) {
      var e,
          n = .1,
          i = .4;return 0 === t ? 0 : 1 === t ? 1 : (!n || 1 > n ? (n = 1, e = i / 4) : e = i * Math.asin(1 / n) / (2 * Math.PI), (t *= 2) < 1 ? -.5 * n * Math.pow(2, 10 * (t -= 1)) * Math.sin(2 * (t - e) * Math.PI / i) : n * Math.pow(2, -10 * (t -= 1)) * Math.sin(2 * (t - e) * Math.PI / i) * .5 + 1);
    }, backIn: function backIn(t) {
      var e = 1.70158;return t * t * ((e + 1) * t - e);
    }, backOut: function backOut(t) {
      var e = 1.70158;return --t * t * ((e + 1) * t + e) + 1;
    }, backInOut: function backInOut(t) {
      var e = 2.5949095;return (t *= 2) < 1 ? .5 * t * t * ((e + 1) * t - e) : .5 * ((t -= 2) * t * ((e + 1) * t + e) + 2);
    }, bounceIn: function bounceIn(t) {
      return 1 - Kp.bounceOut(1 - t);
    }, bounceOut: function bounceOut(t) {
      return 1 / 2.75 > t ? 7.5625 * t * t : 2 / 2.75 > t ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : 2.5 / 2.75 > t ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
    }, bounceInOut: function bounceInOut(t) {
      return .5 > t ? .5 * Kp.bounceIn(2 * t) : .5 * Kp.bounceOut(2 * t - 1) + .5;
    } };He.prototype = { constructor: He, step: function step(t, e) {
      if (this._initialized || (this._startTime = t + this._delay, this._initialized = !0), this._paused) return void (this._pausedTime += e);var n = (t - this._startTime - this._pausedTime) / this._life;if (!(0 > n)) {
        n = Math.min(n, 1);var i = this.easing,
            r = "string" == typeof i ? Kp[i] : i,
            a = "function" == typeof r ? r(n) : n;return this.fire("frame", a), 1 === n ? this.loop ? (this.restart(t), "restart") : (this._needsRemove = !0, "destroy") : null;
      }
    }, restart: function restart(t) {
      var e = (t - this._startTime - this._pausedTime) % this._life;this._startTime = t - e + this.gap, this._pausedTime = 0, this._needsRemove = !1;
    }, fire: function fire(t, e) {
      t = "on" + t, this[t] && this[t](this._target, e);
    }, pause: function pause() {
      this._paused = !0;
    }, resume: function resume() {
      this._paused = !1;
    } };var $p = function $p() {
    this.head = null, this.tail = null, this._len = 0;
  },
      Qp = $p.prototype;Qp.insert = function (t) {
    var e = new Jp(t);return this.insertEntry(e), e;
  }, Qp.insertEntry = function (t) {
    this.head ? (this.tail.next = t, t.prev = this.tail, t.next = null, this.tail = t) : this.head = this.tail = t, this._len++;
  }, Qp.remove = function (t) {
    var e = t.prev,
        n = t.next;e ? e.next = n : this.head = n, n ? n.prev = e : this.tail = e, t.next = t.prev = null, this._len--;
  }, Qp.len = function () {
    return this._len;
  }, Qp.clear = function () {
    this.head = this.tail = null, this._len = 0;
  };var Jp = function Jp(t) {
    this.value = t, this.next, this.prev;
  },
      tg = function tg(t) {
    this._list = new $p(), this._map = {}, this._maxSize = t || 10, this._lastRemovedEntry = null;
  },
      eg = tg.prototype;eg.put = function (t, e) {
    var n = this._list,
        i = this._map,
        r = null;if (null == i[t]) {
      var a = n.len(),
          o = this._lastRemovedEntry;if (a >= this._maxSize && a > 0) {
        var s = n.head;n.remove(s), delete i[s.key], r = s.value, this._lastRemovedEntry = s;
      }o ? o.value = e : o = new Jp(e), o.key = t, n.insertEntry(o), i[t] = o;
    }return r;
  }, eg.get = function (t) {
    var e = this._map[t],
        n = this._list;return null != e ? (e !== n.tail && (n.remove(e), n.insertEntry(e)), e.value) : void 0;
  }, eg.clear = function () {
    this._list.clear(), this._map = {};
  };var ng = { transparent: [0, 0, 0, 0], aliceblue: [240, 248, 255, 1], antiquewhite: [250, 235, 215, 1], aqua: [0, 255, 255, 1], aquamarine: [127, 255, 212, 1], azure: [240, 255, 255, 1], beige: [245, 245, 220, 1], bisque: [255, 228, 196, 1], black: [0, 0, 0, 1], blanchedalmond: [255, 235, 205, 1], blue: [0, 0, 255, 1], blueviolet: [138, 43, 226, 1], brown: [165, 42, 42, 1], burlywood: [222, 184, 135, 1], cadetblue: [95, 158, 160, 1], chartreuse: [127, 255, 0, 1], chocolate: [210, 105, 30, 1], coral: [255, 127, 80, 1], cornflowerblue: [100, 149, 237, 1], cornsilk: [255, 248, 220, 1], crimson: [220, 20, 60, 1], cyan: [0, 255, 255, 1], darkblue: [0, 0, 139, 1], darkcyan: [0, 139, 139, 1], darkgoldenrod: [184, 134, 11, 1], darkgray: [169, 169, 169, 1], darkgreen: [0, 100, 0, 1], darkgrey: [169, 169, 169, 1], darkkhaki: [189, 183, 107, 1], darkmagenta: [139, 0, 139, 1], darkolivegreen: [85, 107, 47, 1], darkorange: [255, 140, 0, 1], darkorchid: [153, 50, 204, 1], darkred: [139, 0, 0, 1], darksalmon: [233, 150, 122, 1], darkseagreen: [143, 188, 143, 1], darkslateblue: [72, 61, 139, 1], darkslategray: [47, 79, 79, 1], darkslategrey: [47, 79, 79, 1], darkturquoise: [0, 206, 209, 1], darkviolet: [148, 0, 211, 1], deeppink: [255, 20, 147, 1], deepskyblue: [0, 191, 255, 1], dimgray: [105, 105, 105, 1], dimgrey: [105, 105, 105, 1], dodgerblue: [30, 144, 255, 1], firebrick: [178, 34, 34, 1], floralwhite: [255, 250, 240, 1], forestgreen: [34, 139, 34, 1], fuchsia: [255, 0, 255, 1], gainsboro: [220, 220, 220, 1], ghostwhite: [248, 248, 255, 1], gold: [255, 215, 0, 1], goldenrod: [218, 165, 32, 1], gray: [128, 128, 128, 1], green: [0, 128, 0, 1], greenyellow: [173, 255, 47, 1], grey: [128, 128, 128, 1], honeydew: [240, 255, 240, 1], hotpink: [255, 105, 180, 1], indianred: [205, 92, 92, 1], indigo: [75, 0, 130, 1], ivory: [255, 255, 240, 1], khaki: [240, 230, 140, 1], lavender: [230, 230, 250, 1], lavenderblush: [255, 240, 245, 1], lawngreen: [124, 252, 0, 1], lemonchiffon: [255, 250, 205, 1], lightblue: [173, 216, 230, 1], lightcoral: [240, 128, 128, 1], lightcyan: [224, 255, 255, 1], lightgoldenrodyellow: [250, 250, 210, 1], lightgray: [211, 211, 211, 1], lightgreen: [144, 238, 144, 1], lightgrey: [211, 211, 211, 1], lightpink: [255, 182, 193, 1], lightsalmon: [255, 160, 122, 1], lightseagreen: [32, 178, 170, 1], lightskyblue: [135, 206, 250, 1], lightslategray: [119, 136, 153, 1], lightslategrey: [119, 136, 153, 1], lightsteelblue: [176, 196, 222, 1], lightyellow: [255, 255, 224, 1], lime: [0, 255, 0, 1], limegreen: [50, 205, 50, 1], linen: [250, 240, 230, 1], magenta: [255, 0, 255, 1], maroon: [128, 0, 0, 1], mediumaquamarine: [102, 205, 170, 1], mediumblue: [0, 0, 205, 1], mediumorchid: [186, 85, 211, 1], mediumpurple: [147, 112, 219, 1], mediumseagreen: [60, 179, 113, 1], mediumslateblue: [123, 104, 238, 1], mediumspringgreen: [0, 250, 154, 1], mediumturquoise: [72, 209, 204, 1], mediumvioletred: [199, 21, 133, 1], midnightblue: [25, 25, 112, 1], mintcream: [245, 255, 250, 1], mistyrose: [255, 228, 225, 1], moccasin: [255, 228, 181, 1], navajowhite: [255, 222, 173, 1], navy: [0, 0, 128, 1], oldlace: [253, 245, 230, 1], olive: [128, 128, 0, 1], olivedrab: [107, 142, 35, 1], orange: [255, 165, 0, 1], orangered: [255, 69, 0, 1], orchid: [218, 112, 214, 1], palegoldenrod: [238, 232, 170, 1], palegreen: [152, 251, 152, 1], paleturquoise: [175, 238, 238, 1], palevioletred: [219, 112, 147, 1], papayawhip: [255, 239, 213, 1], peachpuff: [255, 218, 185, 1], peru: [205, 133, 63, 1], pink: [255, 192, 203, 1], plum: [221, 160, 221, 1], powderblue: [176, 224, 230, 1], purple: [128, 0, 128, 1], red: [255, 0, 0, 1], rosybrown: [188, 143, 143, 1], royalblue: [65, 105, 225, 1], saddlebrown: [139, 69, 19, 1], salmon: [250, 128, 114, 1], sandybrown: [244, 164, 96, 1], seagreen: [46, 139, 87, 1], seashell: [255, 245, 238, 1], sienna: [160, 82, 45, 1], silver: [192, 192, 192, 1], skyblue: [135, 206, 235, 1], slateblue: [106, 90, 205, 1], slategray: [112, 128, 144, 1], slategrey: [112, 128, 144, 1], snow: [255, 250, 250, 1], springgreen: [0, 255, 127, 1], steelblue: [70, 130, 180, 1], tan: [210, 180, 140, 1], teal: [0, 128, 128, 1], thistle: [216, 191, 216, 1], tomato: [255, 99, 71, 1], turquoise: [64, 224, 208, 1], violet: [238, 130, 238, 1], wheat: [245, 222, 179, 1], white: [255, 255, 255, 1], whitesmoke: [245, 245, 245, 1], yellow: [255, 255, 0, 1], yellowgreen: [154, 205, 50, 1] },
      ig = new tg(20),
      rg = null,
      ag = rn,
      og = an,
      sg = (Object.freeze || Object)({ parse: Qe, lift: en, toHex: nn, fastLerp: rn, fastMapToColor: ag, lerp: an, mapToColor: og, modifyHSL: on, modifyAlpha: sn, stringify: ln }),
      lg = Array.prototype.slice,
      ug = function ug(t, e, n, i) {
    this._tracks = {}, this._target = t, this._loop = e || !1, this._getter = n || un, this._setter = i || hn, this._clipCount = 0, this._delay = 0, this._doneList = [], this._onframeList = [], this._clipList = [];
  };ug.prototype = { when: function when(t, e) {
      var n = this._tracks;for (var i in e) {
        if (e.hasOwnProperty(i)) {
          if (!n[i]) {
            n[i] = [];var r = this._getter(this._target, i);if (null == r) continue;0 !== t && n[i].push({ time: 0, value: yn(r) });
          }n[i].push({ time: t, value: e[i] });
        }
      }return this;
    }, during: function during(t) {
      return this._onframeList.push(t), this;
    }, pause: function pause() {
      for (var t = 0; t < this._clipList.length; t++) {
        this._clipList[t].pause();
      }this._paused = !0;
    }, resume: function resume() {
      for (var t = 0; t < this._clipList.length; t++) {
        this._clipList[t].resume();
      }this._paused = !1;
    }, isPaused: function isPaused() {
      return !!this._paused;
    }, _doneCallback: function _doneCallback() {
      this._tracks = {}, this._clipList.length = 0;for (var t = this._doneList, e = t.length, n = 0; e > n; n++) {
        t[n].call(this);
      }
    }, start: function start(t, e) {
      var n,
          i = this,
          r = 0,
          a = function a() {
        r--, r || i._doneCallback();
      };for (var o in this._tracks) {
        if (this._tracks.hasOwnProperty(o)) {
          var s = wn(this, t, a, this._tracks[o], o, e);s && (this._clipList.push(s), r++, this.animation && this.animation.addClip(s), n = s);
        }
      }if (n) {
        var l = n.onframe;n.onframe = function (t, e) {
          l(t, e);for (var n = 0; n < i._onframeList.length; n++) {
            i._onframeList[n](t, e);
          }
        };
      }return r || this._doneCallback(), this;
    }, stop: function stop(t) {
      for (var e = this._clipList, n = this.animation, i = 0; i < e.length; i++) {
        var r = e[i];t && r.onframe(this._target, 1), n && n.removeClip(r);
      }e.length = 0;
    }, delay: function delay(t) {
      return this._delay = t, this;
    }, done: function done(t) {
      return t && this._doneList.push(t), this;
    }, getClips: function getClips() {
      return this._clipList;
    } };var hg = 1;"undefined" != typeof window && (hg = Math.max(window.devicePixelRatio || 1, 1));var cg = 0,
      dg = hg,
      fg = function fg() {};1 === cg && (fg = console.error);var pg = fg,
      gg = function gg() {
    this.animators = [];
  };gg.prototype = { constructor: gg, animate: function animate(t, e) {
      var n,
          i = !1,
          r = this,
          a = this.__zr;if (t) {
        var o = t.split("."),
            s = r;i = "shape" === o[0];for (var l = 0, h = o.length; h > l; l++) {
          s && (s = s[o[l]]);
        }s && (n = s);
      } else n = r;if (!n) return void pg('Property "' + t + '" is not existed in element ' + r.id);var c = r.animators,
          d = new ug(n, e);return d.during(function () {
        r.dirty(i);
      }).done(function () {
        c.splice(u(c, d), 1);
      }), c.push(d), a && a.animation.addAnimator(d), d;
    }, stopAnimation: function stopAnimation(t) {
      for (var e = this.animators, n = e.length, i = 0; n > i; i++) {
        e[i].stop(t);
      }return e.length = 0, this;
    }, animateTo: function animateTo(t, e, n, i, r, a) {
      bn(this, t, e, n, i, r, a);
    }, animateFrom: function animateFrom(t, e, n, i, r, a) {
      bn(this, t, e, n, i, r, a, !0);
    } };var vg = function vg(t) {
    Up.call(this, t), Dp.call(this, t), gg.call(this, t), this.id = t.id || ap();
  };vg.prototype = { type: "element", name: "", __zr: null, ignore: !1, clipPath: null, isGroup: !1, drift: function drift(t, e) {
      switch (this.draggable) {case "horizontal":
          e = 0;break;case "vertical":
          t = 0;}var n = this.transform;n || (n = this.transform = [1, 0, 0, 1, 0, 0]), n[4] += t, n[5] += e, this.decomposeTransform(), this.dirty(!1);
    }, beforeUpdate: function beforeUpdate() {}, afterUpdate: function afterUpdate() {}, update: function update() {
      this.updateTransform();
    }, traverse: function traverse() {}, attrKV: function attrKV(t, e) {
      if ("position" === t || "scale" === t || "origin" === t) {
        if (e) {
          var n = this[t];n || (n = this[t] = []), n[0] = e[0], n[1] = e[1];
        }
      } else this[t] = e;
    }, hide: function hide() {
      this.ignore = !0, this.__zr && this.__zr.refresh();
    }, show: function show() {
      this.ignore = !1, this.__zr && this.__zr.refresh();
    }, attr: function attr(t, e) {
      if ("string" == typeof t) this.attrKV(t, e);else if (S(t)) for (var n in t) {
        t.hasOwnProperty(n) && this.attrKV(n, t[n]);
      }return this.dirty(!1), this;
    }, setClipPath: function setClipPath(t) {
      var e = this.__zr;e && t.addSelfToZr(e), this.clipPath && this.clipPath !== t && this.removeClipPath(), this.clipPath = t, t.__zr = e, t.__clipTarget = this, this.dirty(!1);
    }, removeClipPath: function removeClipPath() {
      var t = this.clipPath;t && (t.__zr && t.removeSelfFromZr(t.__zr), t.__zr = null, t.__clipTarget = null, this.clipPath = null, this.dirty(!1));
    }, addSelfToZr: function addSelfToZr(t) {
      this.__zr = t;var e = this.animators;if (e) for (var n = 0; n < e.length; n++) {
        t.animation.addAnimator(e[n]);
      }this.clipPath && this.clipPath.addSelfToZr(t);
    }, removeSelfFromZr: function removeSelfFromZr(t) {
      this.__zr = null;var e = this.animators;if (e) for (var n = 0; n < e.length; n++) {
        t.animation.removeAnimator(e[n]);
      }this.clipPath && this.clipPath.removeSelfFromZr(t);
    } }, c(vg, gg), c(vg, Up), c(vg, Dp);var mg = ae,
      yg = Math.min,
      xg = Math.max;An.prototype = { constructor: An, union: function union(t) {
      var e = yg(t.x, this.x),
          n = yg(t.y, this.y);this.width = xg(t.x + t.width, this.x + this.width) - e, this.height = xg(t.y + t.height, this.y + this.height) - n, this.x = e, this.y = n;
    }, applyTransform: function () {
      var t = [],
          e = [],
          n = [],
          i = [];return function (r) {
        if (r) {
          t[0] = n[0] = this.x, t[1] = i[1] = this.y, e[0] = i[0] = this.x + this.width, e[1] = n[1] = this.y + this.height, mg(t, t, r), mg(e, e, r), mg(n, n, r), mg(i, i, r), this.x = yg(t[0], e[0], n[0], i[0]), this.y = yg(t[1], e[1], n[1], i[1]);var a = xg(t[0], e[0], n[0], i[0]),
              o = xg(t[1], e[1], n[1], i[1]);this.width = a - this.x, this.height = o - this.y;
        }
      };
    }(), calculateTransform: function calculateTransform(t) {
      var e = this,
          n = t.width / e.width,
          i = t.height / e.height,
          r = Pe();return Be(r, r, [-e.x, -e.y]), Re(r, r, [n, i]), Be(r, r, [t.x, t.y]), r;
    }, intersect: function intersect(t) {
      if (!t) return !1;t instanceof An || (t = An.create(t));var e = this,
          n = e.x,
          i = e.x + e.width,
          r = e.y,
          a = e.y + e.height,
          o = t.x,
          s = t.x + t.width,
          l = t.y,
          u = t.y + t.height;return !(o > i || n > s || l > a || r > u);
    }, contain: function contain(t, e) {
      var n = this;return t >= n.x && t <= n.x + n.width && e >= n.y && e <= n.y + n.height;
    }, clone: function clone() {
      return new An(this.x, this.y, this.width, this.height);
    }, copy: function copy(t) {
      this.x = t.x, this.y = t.y, this.width = t.width, this.height = t.height;
    }, plain: function plain() {
      return { x: this.x, y: this.y, width: this.width, height: this.height };
    } }, An.create = function (t) {
    return new An(t.x, t.y, t.width, t.height);
  };var _g = function _g(t) {
    t = t || {}, vg.call(this, t);for (var e in t) {
      t.hasOwnProperty(e) && (this[e] = t[e]);
    }this._children = [], this.__storage = null, this.__dirty = !0;
  };_g.prototype = { constructor: _g, isGroup: !0, type: "group", silent: !1, children: function children() {
      return this._children.slice();
    }, childAt: function childAt(t) {
      return this._children[t];
    }, childOfName: function childOfName(t) {
      for (var e = this._children, n = 0; n < e.length; n++) {
        if (e[n].name === t) return e[n];
      }
    }, childCount: function childCount() {
      return this._children.length;
    }, add: function add(t) {
      return t && t !== this && t.parent !== this && (this._children.push(t), this._doAdd(t)), this;
    }, addBefore: function addBefore(t, e) {
      if (t && t !== this && t.parent !== this && e && e.parent === this) {
        var n = this._children,
            i = n.indexOf(e);i >= 0 && (n.splice(i, 0, t), this._doAdd(t));
      }return this;
    }, _doAdd: function _doAdd(t) {
      t.parent && t.parent.remove(t), t.parent = this;var e = this.__storage,
          n = this.__zr;e && e !== t.__storage && (e.addToStorage(t), t instanceof _g && t.addChildrenToStorage(e)), n && n.refresh();
    }, remove: function remove(t) {
      var e = this.__zr,
          n = this.__storage,
          i = this._children,
          r = u(i, t);return 0 > r ? this : (i.splice(r, 1), t.parent = null, n && (n.delFromStorage(t), t instanceof _g && t.delChildrenFromStorage(n)), e && e.refresh(), this);
    }, removeAll: function removeAll() {
      var t,
          e,
          n = this._children,
          i = this.__storage;for (e = 0; e < n.length; e++) {
        t = n[e], i && (i.delFromStorage(t), t instanceof _g && t.delChildrenFromStorage(i)), t.parent = null;
      }return n.length = 0, this;
    }, eachChild: function eachChild(t, e) {
      for (var n = this._children, i = 0; i < n.length; i++) {
        var r = n[i];t.call(e, r, i);
      }return this;
    }, traverse: function traverse(t, e) {
      for (var n = 0; n < this._children.length; n++) {
        var i = this._children[n];t.call(e, i), "group" === i.type && i.traverse(t, e);
      }return this;
    }, addChildrenToStorage: function addChildrenToStorage(t) {
      for (var e = 0; e < this._children.length; e++) {
        var n = this._children[e];t.addToStorage(n), n instanceof _g && n.addChildrenToStorage(t);
      }
    }, delChildrenFromStorage: function delChildrenFromStorage(t) {
      for (var e = 0; e < this._children.length; e++) {
        var n = this._children[e];t.delFromStorage(n), n instanceof _g && n.delChildrenFromStorage(t);
      }
    }, dirty: function dirty() {
      return this.__dirty = !0, this.__zr && this.__zr.refresh(), this;
    }, getBoundingRect: function getBoundingRect(t) {
      for (var e = null, n = new An(0, 0, 0, 0), i = t || this._children, r = [], a = 0; a < i.length; a++) {
        var o = i[a];if (!o.ignore && !o.invisible) {
          var s = o.getBoundingRect(),
              l = o.getLocalTransform(r);l ? (n.copy(s), n.applyTransform(l), e = e || n.clone(), e.union(n)) : (e = e || s.clone(), e.union(s));
        }
      }return e || n;
    } }, h(_g, vg);var wg = 32,
      bg = 7,
      Sg = function Sg() {
    this._roots = [], this._displayList = [], this._displayListLen = 0;
  };Sg.prototype = { constructor: Sg, traverse: function traverse(t, e) {
      for (var n = 0; n < this._roots.length; n++) {
        this._roots[n].traverse(t, e);
      }
    }, getDisplayList: function getDisplayList(t, e) {
      return e = e || !1, t && this.updateDisplayList(e), this._displayList;
    }, updateDisplayList: function updateDisplayList(t) {
      this._displayListLen = 0;for (var e = this._roots, n = this._displayList, i = 0, r = e.length; r > i; i++) {
        this._updateAndAddDisplayable(e[i], null, t);
      }n.length = this._displayListLen, sp.canvasSupported && On(n, En);
    }, _updateAndAddDisplayable: function _updateAndAddDisplayable(t, e, n) {
      if (!t.ignore || n) {
        t.beforeUpdate(), t.__dirty && t.update(), t.afterUpdate();var i = t.clipPath;if (i) {
          e = e ? e.slice() : [];for (var r = i, a = t; r;) {
            r.parent = a, r.updateTransform(), e.push(r), a = r, r = r.clipPath;
          }
        }if (t.isGroup) {
          for (var o = t._children, s = 0; s < o.length; s++) {
            var l = o[s];t.__dirty && (l.__dirty = !0), this._updateAndAddDisplayable(l, e, n);
          }t.__dirty = !1;
        } else t.__clipPaths = e, this._displayList[this._displayListLen++] = t;
      }
    }, addRoot: function addRoot(t) {
      t.__storage !== this && (t instanceof _g && t.addChildrenToStorage(this), this.addToStorage(t), this._roots.push(t));
    }, delRoot: function delRoot(t) {
      if (null == t) {
        for (var e = 0; e < this._roots.length; e++) {
          var n = this._roots[e];n instanceof _g && n.delChildrenFromStorage(this);
        }return this._roots = [], this._displayList = [], void (this._displayListLen = 0);
      }if (t instanceof Array) for (var e = 0, i = t.length; i > e; e++) {
        this.delRoot(t[e]);
      } else {
        var r = u(this._roots, t);r >= 0 && (this.delFromStorage(t), this._roots.splice(r, 1), t instanceof _g && t.delChildrenFromStorage(this));
      }
    }, addToStorage: function addToStorage(t) {
      return t && (t.__storage = this, t.dirty(!1)), this;
    }, delFromStorage: function delFromStorage(t) {
      return t && (t.__storage = null), this;
    }, dispose: function dispose() {
      this._renderList = this._roots = null;
    }, displayableSortFunc: En };var Mg = { shadowBlur: 1, shadowOffsetX: 1, shadowOffsetY: 1, textShadowBlur: 1, textShadowOffsetX: 1, textShadowOffsetY: 1, textBoxShadowBlur: 1, textBoxShadowOffsetX: 1, textBoxShadowOffsetY: 1 },
      Ag = function Ag(t, e, n) {
    return Mg.hasOwnProperty(e) ? n *= t.dpr : n;
  },
      Ig = { NONE: 0, STYLE_BIND: 1, PLAIN_TEXT: 2 },
      Tg = 9,
      Cg = [["shadowBlur", 0], ["shadowOffsetX", 0], ["shadowOffsetY", 0], ["shadowColor", "#000"], ["lineCap", "butt"], ["lineJoin", "miter"], ["miterLimit", 10]],
      Dg = function Dg(t) {
    this.extendFrom(t, !1);
  };Dg.prototype = { constructor: Dg, fill: "#000", stroke: null, opacity: 1, fillOpacity: null, strokeOpacity: null, lineDash: null, lineDashOffset: 0, shadowBlur: 0, shadowOffsetX: 0, shadowOffsetY: 0, lineWidth: 1, strokeNoScale: !1, text: null, font: null, textFont: null, fontStyle: null, fontWeight: null, fontSize: null, fontFamily: null, textTag: null, textFill: "#000", textStroke: null, textWidth: null, textHeight: null, textStrokeWidth: 0, textLineHeight: null, textPosition: "inside", textRect: null, textOffset: null, textAlign: null, textVerticalAlign: null, textDistance: 5, textShadowColor: "transparent", textShadowBlur: 0, textShadowOffsetX: 0, textShadowOffsetY: 0, textBoxShadowColor: "transparent", textBoxShadowBlur: 0, textBoxShadowOffsetX: 0, textBoxShadowOffsetY: 0, transformText: !1, textRotation: 0, textOrigin: null, textBackgroundColor: null, textBorderColor: null, textBorderWidth: 0, textBorderRadius: 0, textPadding: null, rich: null, truncate: null, blend: null, bind: function bind(t, e, n) {
      var i = this,
          r = n && n.style,
          a = !r || t.__attrCachedBy !== Ig.STYLE_BIND;t.__attrCachedBy = Ig.STYLE_BIND;for (var o = 0; o < Cg.length; o++) {
        var s = Cg[o],
            l = s[0];(a || i[l] !== r[l]) && (t[l] = Ag(t, l, i[l] || s[1]));
      }if ((a || i.fill !== r.fill) && (t.fillStyle = i.fill), (a || i.stroke !== r.stroke) && (t.strokeStyle = i.stroke), (a || i.opacity !== r.opacity) && (t.globalAlpha = null == i.opacity ? 1 : i.opacity), (a || i.blend !== r.blend) && (t.globalCompositeOperation = i.blend || "source-over"), this.hasStroke()) {
        var u = i.lineWidth;t.lineWidth = u / (this.strokeNoScale && e && e.getLineScale ? e.getLineScale() : 1);
      }
    }, hasFill: function hasFill() {
      var t = this.fill;return null != t && "none" !== t;
    }, hasStroke: function hasStroke() {
      var t = this.stroke;return null != t && "none" !== t && this.lineWidth > 0;
    }, extendFrom: function extendFrom(t, e) {
      if (t) for (var n in t) {
        !t.hasOwnProperty(n) || e !== !0 && (e === !1 ? this.hasOwnProperty(n) : null == t[n]) || (this[n] = t[n]);
      }
    }, set: function set(t, e) {
      "string" == typeof t ? this[t] = e : this.extendFrom(t, !0);
    }, clone: function clone() {
      var t = new this.constructor();return t.extendFrom(this, !0), t;
    }, getGradient: function getGradient(t, e, n) {
      for (var i = "radial" === e.type ? zn : Bn, r = i(t, e, n), a = e.colorStops, o = 0; o < a.length; o++) {
        r.addColorStop(a[o].offset, a[o].color);
      }return r;
    } };for (var kg = Dg.prototype, Pg = 0; Pg < Cg.length; Pg++) {
    var Lg = Cg[Pg];Lg[0] in kg || (kg[Lg[0]] = Lg[1]);
  }Dg.getGradient = kg.getGradient;var Og = function Og(t, e) {
    this.image = t, this.repeat = e, this.type = "pattern";
  };Og.prototype.getCanvasPattern = function (t) {
    return t.createPattern(this.image, this.repeat || "repeat");
  };var Eg = function Eg(t, e, n) {
    var i;n = n || dg, "string" == typeof t ? i = Nn(t, e, n) : S(t) && (i = t, t = i.id), this.id = t, this.dom = i;var r = i.style;r && (i.onselectstart = Rn, r["-webkit-user-select"] = "none", r["user-select"] = "none", r["-webkit-touch-callout"] = "none", r["-webkit-tap-highlight-color"] = "rgba(0,0,0,0)", r.padding = 0, r.margin = 0, r["border-width"] = 0), this.domBack = null, this.ctxBack = null, this.painter = e, this.config = null, this.clearColor = 0, this.motionBlur = !1, this.lastFrameAlpha = .7, this.dpr = n;
  };Eg.prototype = { constructor: Eg, __dirty: !0, __used: !1, __drawIndex: 0, __startIndex: 0, __endIndex: 0, incremental: !1, getElementCount: function getElementCount() {
      return this.__endIndex - this.__startIndex;
    }, initContext: function initContext() {
      this.ctx = this.dom.getContext("2d"), this.ctx.dpr = this.dpr;
    }, createBackBuffer: function createBackBuffer() {
      var t = this.dpr;this.domBack = Nn("back-" + this.id, this.painter, t), this.ctxBack = this.domBack.getContext("2d"), 1 !== t && this.ctxBack.scale(t, t);
    }, resize: function resize(t, e) {
      var n = this.dpr,
          i = this.dom,
          r = i.style,
          a = this.domBack;r && (r.width = t + "px", r.height = e + "px"), i.width = t * n, i.height = e * n, a && (a.width = t * n, a.height = e * n, 1 !== n && this.ctxBack.scale(n, n));
    }, clear: function clear(t, e) {
      var n = this.dom,
          i = this.ctx,
          r = n.width,
          a = n.height,
          e = e || this.clearColor,
          o = this.motionBlur && !t,
          s = this.lastFrameAlpha,
          l = this.dpr;if (o && (this.domBack || this.createBackBuffer(), this.ctxBack.globalCompositeOperation = "copy", this.ctxBack.drawImage(n, 0, 0, r / l, a / l)), i.clearRect(0, 0, r, a), e && "transparent" !== e) {
        var u;e.colorStops ? (u = e.__canvasGradient || Dg.getGradient(i, e, { x: 0, y: 0, width: r, height: a }), e.__canvasGradient = u) : e.image && (u = Og.prototype.getCanvasPattern.call(e, i)), i.save(), i.fillStyle = u || e, i.fillRect(0, 0, r, a), i.restore();
      }if (o) {
        var h = this.domBack;i.save(), i.globalAlpha = s, i.drawImage(h, 0, 0, r, a), i.restore();
      }
    } };var Bg = "undefined" != typeof window && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (t) {
    setTimeout(t, 16);
  },
      zg = new tg(50),
      Rg = {},
      Ng = 0,
      Fg = 5e3,
      Vg = /\{([a-zA-Z0-9_]+)\|([^}]*)\}/g,
      Hg = "12px sans-serif",
      Wg = {};Wg.measureText = function (t, e) {
    var n = l();return n.font = e || Hg, n.measureText(t);
  };var Gg = Hg,
      Xg = { left: 1, right: 1, center: 1 },
      Ug = { top: 1, bottom: 1, middle: 1 },
      Yg = [["textShadowBlur", "shadowBlur", 0], ["textShadowOffsetX", "shadowOffsetX", 0], ["textShadowOffsetY", "shadowOffsetY", 0], ["textShadowColor", "shadowColor", "transparent"]],
      qg = {},
      jg = {},
      Zg = new An(),
      Kg = function Kg() {};Kg.prototype = { constructor: Kg, drawRectText: function drawRectText(t, e) {
      var n = this.style;e = n.textRect || e, this.__dirty && si(n, !0);var i = n.text;if (null != i && (i += ""), Mi(i, n)) {
        t.save();var r = this.transform;n.transformText ? this.setTransform(t) : r && (Zg.copy(e), Zg.applyTransform(r), e = Zg), ui(this, t, i, n, e, Tg), t.restore();
      }
    } }, Ai.prototype = { constructor: Ai, type: "displayable", __dirty: !0, invisible: !1, z: 0, z2: 0, zlevel: 0, draggable: !1, dragging: !1, silent: !1, culling: !1, cursor: "pointer", rectHover: !1, progressive: !1, incremental: !1, globalScaleRatio: 1, beforeBrush: function beforeBrush() {}, afterBrush: function afterBrush() {}, brush: function brush() {}, getBoundingRect: function getBoundingRect() {}, contain: function contain(t, e) {
      return this.rectContain(t, e);
    }, traverse: function traverse(t, e) {
      t.call(e, this);
    }, rectContain: function rectContain(t, e) {
      var n = this.transformCoordToLocal(t, e),
          i = this.getBoundingRect();return i.contain(n[0], n[1]);
    }, dirty: function dirty() {
      this.__dirty = this.__dirtyText = !0, this._rect = null, this.__zr && this.__zr.refresh();
    }, animateStyle: function animateStyle(t) {
      return this.animate("style", t);
    }, attrKV: function attrKV(t, e) {
      "style" !== t ? vg.prototype.attrKV.call(this, t, e) : this.style.set(e);
    }, setStyle: function setStyle(t, e) {
      return this.style.set(t, e), this.dirty(!1), this;
    }, useStyle: function useStyle(t) {
      return this.style = new Dg(t, this), this.dirty(!1), this;
    }, calculateTextPosition: null }, h(Ai, vg), c(Ai, Kg), Ii.prototype = { constructor: Ii, type: "image", brush: function brush(t, e) {
      var n = this.style,
          i = n.image;n.bind(t, this, e);var r = this._image = Vn(i, this._image, this, this.onload);if (r && Wn(r)) {
        var a = n.x || 0,
            o = n.y || 0,
            s = n.width,
            l = n.height,
            u = r.width / r.height;if (null == s && null != l ? s = l * u : null == l && null != s ? l = s / u : null == s && null == l && (s = r.width, l = r.height), this.setTransform(t), n.sWidth && n.sHeight) {
          var h = n.sx || 0,
              c = n.sy || 0;t.drawImage(r, h, c, n.sWidth, n.sHeight, a, o, s, l);
        } else if (n.sx && n.sy) {
          var h = n.sx,
              c = n.sy,
              d = s - h,
              f = l - c;t.drawImage(r, h, c, d, f, a, o, s, l);
        } else t.drawImage(r, a, o, s, l);null != n.text && (this.restoreTransform(t), this.drawRectText(t, this.getBoundingRect()));
      }
    }, getBoundingRect: function getBoundingRect() {
      var t = this.style;return this._rect || (this._rect = new An(t.x || 0, t.y || 0, t.width || 0, t.height || 0)), this._rect;
    } }, h(Ii, Ai);var $g = 1e5,
      Qg = 314159,
      Jg = .01,
      tv = .001,
      ev = new An(0, 0, 0, 0),
      nv = new An(0, 0, 0, 0),
      iv = function iv(t, e, n) {
    this.type = "canvas";var i = !t.nodeName || "CANVAS" === t.nodeName.toUpperCase();this._opts = n = o({}, n || {}), this.dpr = n.devicePixelRatio || dg, this._singleCanvas = i, this.root = t;var r = t.style;r && (r["-webkit-tap-highlight-color"] = "transparent", r["-webkit-user-select"] = r["user-select"] = r["-webkit-touch-callout"] = "none", t.innerHTML = ""), this.storage = e;var a = this._zlevelList = [],
        s = this._layers = {};if (this._layerConfig = {}, this._needsManuallyCompositing = !1, i) {
      var l = t.width,
          u = t.height;null != n.width && (l = n.width), null != n.height && (u = n.height), this.dpr = n.devicePixelRatio || 1, t.width = l * this.dpr, t.height = u * this.dpr, this._width = l, this._height = u;var h = new Eg(t, this, this.dpr);h.__builtin__ = !0, h.initContext(), s[Qg] = h, h.zlevel = Qg, a.push(Qg), this._domRoot = t;
    } else {
      this._width = this._getSize(0), this._height = this._getSize(1);var c = this._domRoot = Li(this._width, this._height);t.appendChild(c);
    }this._hoverlayer = null, this._hoverElements = [];
  };iv.prototype = { constructor: iv, getType: function getType() {
      return "canvas";
    }, isSingleCanvas: function isSingleCanvas() {
      return this._singleCanvas;
    }, getViewportRoot: function getViewportRoot() {
      return this._domRoot;
    }, getViewportRootOffset: function getViewportRootOffset() {
      var t = this.getViewportRoot();return t ? { offsetLeft: t.offsetLeft || 0, offsetTop: t.offsetTop || 0 } : void 0;
    }, refresh: function refresh(t) {
      var e = this.storage.getDisplayList(!0),
          n = this._zlevelList;this._redrawId = Math.random(), this._paintList(e, t, this._redrawId);for (var i = 0; i < n.length; i++) {
        var r = n[i],
            a = this._layers[r];if (!a.__builtin__ && a.refresh) {
          var o = 0 === i ? this._backgroundColor : null;a.refresh(o);
        }
      }return this.refreshHover(), this;
    }, addHover: function addHover(t, e) {
      if (!t.__hoverMir) {
        var n = new t.constructor({ style: t.style, shape: t.shape, z: t.z, z2: t.z2, silent: t.silent });return n.__from = t, t.__hoverMir = n, e && n.setStyle(e), this._hoverElements.push(n), n;
      }
    }, removeHover: function removeHover(t) {
      var e = t.__hoverMir,
          n = this._hoverElements,
          i = u(n, e);i >= 0 && n.splice(i, 1), t.__hoverMir = null;
    }, clearHover: function clearHover() {
      for (var t = this._hoverElements, e = 0; e < t.length; e++) {
        var n = t[e].__from;n && (n.__hoverMir = null);
      }t.length = 0;
    }, refreshHover: function refreshHover() {
      var t = this._hoverElements,
          e = t.length,
          n = this._hoverlayer;if (n && n.clear(), e) {
        On(t, this.storage.displayableSortFunc), n || (n = this._hoverlayer = this.getLayer($g));var i = {};n.ctx.save();for (var r = 0; e > r;) {
          var a = t[r],
              o = a.__from;o && o.__zr ? (r++, o.invisible || (a.transform = o.transform, a.invTransform = o.invTransform, a.__clipPaths = o.__clipPaths, this._doPaintEl(a, n, !0, i))) : (t.splice(r, 1), o.__hoverMir = null, e--);
        }n.ctx.restore();
      }
    }, getHoverLayer: function getHoverLayer() {
      return this.getLayer($g);
    }, _paintList: function _paintList(t, e, n) {
      if (this._redrawId === n) {
        e = e || !1, this._updateLayerStatus(t);var i = this._doPaintList(t, e);if (this._needsManuallyCompositing && this._compositeManually(), !i) {
          var r = this;Bg(function () {
            r._paintList(t, e, n);
          });
        }
      }
    }, _compositeManually: function _compositeManually() {
      var t = this.getLayer(Qg).ctx,
          e = this._domRoot.width,
          n = this._domRoot.height;t.clearRect(0, 0, e, n), this.eachBuiltinLayer(function (i) {
        i.virtual && t.drawImage(i.dom, 0, 0, e, n);
      });
    }, _doPaintList: function _doPaintList(t, e) {
      for (var n = [], i = 0; i < this._zlevelList.length; i++) {
        var r = this._zlevelList[i],
            a = this._layers[r];a.__builtin__ && a !== this._hoverlayer && (a.__dirty || e) && n.push(a);
      }for (var o = !0, s = 0; s < n.length; s++) {
        var a = n[s],
            l = a.ctx,
            u = {};l.save();var h = e ? a.__startIndex : a.__drawIndex,
            c = !e && a.incremental && Date.now,
            d = c && Date.now(),
            p = a.zlevel === this._zlevelList[0] ? this._backgroundColor : null;
        if (a.__startIndex === a.__endIndex) a.clear(!1, p);else if (h === a.__startIndex) {
          var g = t[h];g.incremental && g.notClear && !e || a.clear(!1, p);
        }-1 === h && (console.error("For some unknown reason. drawIndex is -1"), h = a.__startIndex);for (var v = h; v < a.__endIndex; v++) {
          var m = t[v];if (this._doPaintEl(m, a, e, u), m.__dirty = m.__dirtyText = !1, c) {
            var y = Date.now() - d;if (y > 15) break;
          }
        }a.__drawIndex = v, a.__drawIndex < a.__endIndex && (o = !1), u.prevElClipPaths && l.restore(), l.restore();
      }return sp.wxa && f(this._layers, function (t) {
        t && t.ctx && t.ctx.draw && t.ctx.draw();
      }), o;
    }, _doPaintEl: function _doPaintEl(t, e, n, i) {
      var r = e.ctx,
          a = t.transform;if (!(!e.__dirty && !n || t.invisible || 0 === t.style.opacity || a && !a[0] && !a[3] || t.culling && Di(t, this._width, this._height))) {
        var o = t.__clipPaths,
            s = i.prevElClipPaths;(!s || ki(o, s)) && (s && (r.restore(), i.prevElClipPaths = null, i.prevEl = null), o && (r.save(), Pi(o, r), i.prevElClipPaths = o)), t.beforeBrush && t.beforeBrush(r), t.brush(r, i.prevEl || null), i.prevEl = t, t.afterBrush && t.afterBrush(r);
      }
    }, getLayer: function getLayer(t, e) {
      this._singleCanvas && !this._needsManuallyCompositing && (t = Qg);var n = this._layers[t];return n || (n = new Eg("zr_" + t, this, this.dpr), n.zlevel = t, n.__builtin__ = !0, this._layerConfig[t] ? r(n, this._layerConfig[t], !0) : this._layerConfig[t - Jg] && r(n, this._layerConfig[t - Jg], !0), e && (n.virtual = e), this.insertLayer(t, n), n.initContext()), n;
    }, insertLayer: function insertLayer(t, e) {
      var n = this._layers,
          i = this._zlevelList,
          r = i.length,
          a = null,
          o = -1,
          s = this._domRoot;if (n[t]) return void pg("ZLevel " + t + " has been used already");if (!Ci(e)) return void pg("Layer of zlevel " + t + " is not valid");if (r > 0 && t > i[0]) {
        for (o = 0; r - 1 > o && !(i[o] < t && i[o + 1] > t); o++) {}a = n[i[o]];
      }if (i.splice(o + 1, 0, t), n[t] = e, !e.virtual) if (a) {
        var l = a.dom;l.nextSibling ? s.insertBefore(e.dom, l.nextSibling) : s.appendChild(e.dom);
      } else s.firstChild ? s.insertBefore(e.dom, s.firstChild) : s.appendChild(e.dom);
    }, eachLayer: function eachLayer(t, e) {
      var n,
          i,
          r = this._zlevelList;for (i = 0; i < r.length; i++) {
        n = r[i], t.call(e, this._layers[n], n);
      }
    }, eachBuiltinLayer: function eachBuiltinLayer(t, e) {
      var n,
          i,
          r,
          a = this._zlevelList;for (r = 0; r < a.length; r++) {
        i = a[r], n = this._layers[i], n.__builtin__ && t.call(e, n, i);
      }
    }, eachOtherLayer: function eachOtherLayer(t, e) {
      var n,
          i,
          r,
          a = this._zlevelList;for (r = 0; r < a.length; r++) {
        i = a[r], n = this._layers[i], n.__builtin__ || t.call(e, n, i);
      }
    }, getLayers: function getLayers() {
      return this._layers;
    }, _updateLayerStatus: function _updateLayerStatus(t) {
      function e(t) {
        a && (a.__endIndex !== t && (a.__dirty = !0), a.__endIndex = t);
      }if (this.eachBuiltinLayer(function (t) {
        t.__dirty = t.__used = !1;
      }), this._singleCanvas) for (var n = 1; n < t.length; n++) {
        var i = t[n];if (i.zlevel !== t[n - 1].zlevel || i.incremental) {
          this._needsManuallyCompositing = !0;break;
        }
      }for (var r, a = null, o = 0, n = 0; n < t.length; n++) {
        var s,
            i = t[n],
            l = i.zlevel;r !== l && (r = l, o = 0), i.incremental ? (s = this.getLayer(l + tv, this._needsManuallyCompositing), s.incremental = !0, o = 1) : s = this.getLayer(l + (o > 0 ? Jg : 0), this._needsManuallyCompositing), s.__builtin__ || pg("ZLevel " + l + " has been used by unkown layer " + s.id), s !== a && (s.__used = !0, s.__startIndex !== n && (s.__dirty = !0), s.__startIndex = n, s.__drawIndex = s.incremental ? -1 : n, e(n), a = s), i.__dirty && (s.__dirty = !0, s.incremental && s.__drawIndex < 0 && (s.__drawIndex = n));
      }e(n), this.eachBuiltinLayer(function (t) {
        !t.__used && t.getElementCount() > 0 && (t.__dirty = !0, t.__startIndex = t.__endIndex = t.__drawIndex = 0), t.__dirty && t.__drawIndex < 0 && (t.__drawIndex = t.__startIndex);
      });
    }, clear: function clear() {
      return this.eachBuiltinLayer(this._clearLayer), this;
    }, _clearLayer: function _clearLayer(t) {
      t.clear();
    }, setBackgroundColor: function setBackgroundColor(t) {
      this._backgroundColor = t;
    }, configLayer: function configLayer(t, e) {
      if (e) {
        var n = this._layerConfig;n[t] ? r(n[t], e, !0) : n[t] = e;for (var i = 0; i < this._zlevelList.length; i++) {
          var a = this._zlevelList[i];if (a === t || a === t + Jg) {
            var o = this._layers[a];r(o, n[t], !0);
          }
        }
      }
    }, delLayer: function delLayer(t) {
      var e = this._layers,
          n = this._zlevelList,
          i = e[t];i && (i.dom.parentNode.removeChild(i.dom), delete e[t], n.splice(u(n, t), 1));
    }, resize: function resize(t, e) {
      if (this._domRoot.style) {
        var n = this._domRoot;n.style.display = "none";var i = this._opts;if (null != t && (i.width = t), null != e && (i.height = e), t = this._getSize(0), e = this._getSize(1), n.style.display = "", this._width !== t || e !== this._height) {
          n.style.width = t + "px", n.style.height = e + "px";for (var r in this._layers) {
            this._layers.hasOwnProperty(r) && this._layers[r].resize(t, e);
          }f(this._progressiveLayers, function (n) {
            n.resize(t, e);
          }), this.refresh(!0);
        }this._width = t, this._height = e;
      } else {
        if (null == t || null == e) return;this._width = t, this._height = e, this.getLayer(Qg).resize(t, e);
      }return this;
    }, clearLayer: function clearLayer(t) {
      var e = this._layers[t];e && e.clear();
    }, dispose: function dispose() {
      this.root.innerHTML = "", this.root = this.storage = this._domRoot = this._layers = null;
    }, getRenderedCanvas: function getRenderedCanvas(t) {
      if (t = t || {}, this._singleCanvas && !this._compositeManually) return this._layers[Qg].dom;var e = new Eg("image", this, t.pixelRatio || this.dpr);if (e.initContext(), e.clear(!1, t.backgroundColor || this._backgroundColor), t.pixelRatio <= this.dpr) {
        this.refresh();var n = e.dom.width,
            i = e.dom.height,
            r = e.ctx;this.eachLayer(function (t) {
          t.__builtin__ ? r.drawImage(t.dom, 0, 0, n, i) : t.renderToCanvas && (e.ctx.save(), t.renderToCanvas(e.ctx), e.ctx.restore());
        });
      } else for (var a = {}, o = this.storage.getDisplayList(!0), s = 0; s < o.length; s++) {
        var l = o[s];this._doPaintEl(l, e, !0, a);
      }return e.dom;
    }, getWidth: function getWidth() {
      return this._width;
    }, getHeight: function getHeight() {
      return this._height;
    }, _getSize: function _getSize(t) {
      var e = this._opts,
          n = ["width", "height"][t],
          i = ["clientWidth", "clientHeight"][t],
          r = ["paddingLeft", "paddingTop"][t],
          a = ["paddingRight", "paddingBottom"][t];if (null != e[n] && "auto" !== e[n]) return parseFloat(e[n]);var o = this.root,
          s = document.defaultView.getComputedStyle(o);return (o[i] || Ti(s[n]) || Ti(o.style[n])) - (Ti(s[r]) || 0) - (Ti(s[a]) || 0) | 0;
    }, pathToImage: function pathToImage(t, e) {
      e = e || this.dpr;var n = document.createElement("canvas"),
          i = n.getContext("2d"),
          r = t.getBoundingRect(),
          a = t.style,
          o = a.shadowBlur * e,
          s = a.shadowOffsetX * e,
          l = a.shadowOffsetY * e,
          u = a.hasStroke() ? a.lineWidth : 0,
          h = Math.max(u / 2, -s + o),
          c = Math.max(u / 2, s + o),
          d = Math.max(u / 2, -l + o),
          f = Math.max(u / 2, l + o),
          p = r.width + h + c,
          g = r.height + d + f;n.width = p * e, n.height = g * e, i.scale(e, e), i.clearRect(0, 0, p, g), i.dpr = e;var v = { position: t.position, rotation: t.rotation, scale: t.scale };t.position = [h - r.x, d - r.y], t.rotation = 0, t.scale = [1, 1], t.updateTransform(), t && t.brush(i);var m = Ii,
          y = new m({ style: { x: 0, y: 0, image: n } });return null != v.position && (y.position = t.position = v.position), null != v.rotation && (y.rotation = t.rotation = v.rotation), null != v.scale && (y.scale = t.scale = v.scale), y;
    } };var rv = function rv(t) {
    t = t || {}, this.stage = t.stage || {}, this.onframe = t.onframe || function () {}, this._clips = [], this._running = !1, this._time, this._pausedTime, this._pauseStart, this._paused = !1, Dp.call(this);
  };rv.prototype = { constructor: rv, addClip: function addClip(t) {
      this._clips.push(t);
    }, addAnimator: function addAnimator(t) {
      t.animation = this;for (var e = t.getClips(), n = 0; n < e.length; n++) {
        this.addClip(e[n]);
      }
    }, removeClip: function removeClip(t) {
      var e = u(this._clips, t);e >= 0 && this._clips.splice(e, 1);
    }, removeAnimator: function removeAnimator(t) {
      for (var e = t.getClips(), n = 0; n < e.length; n++) {
        this.removeClip(e[n]);
      }t.animation = null;
    }, _update: function _update() {
      for (var t = new Date().getTime() - this._pausedTime, e = t - this._time, n = this._clips, i = n.length, r = [], a = [], o = 0; i > o; o++) {
        var s = n[o],
            l = s.step(t, e);l && (r.push(l), a.push(s));
      }for (var o = 0; i > o;) {
        n[o]._needsRemove ? (n[o] = n[i - 1], n.pop(), i--) : o++;
      }i = r.length;for (var o = 0; i > o; o++) {
        a[o].fire(r[o]);
      }this._time = t, this.onframe(e), this.trigger("frame", e), this.stage.update && this.stage.update();
    }, _startLoop: function _startLoop() {
      function t() {
        e._running && (Bg(t), !e._paused && e._update());
      }var e = this;this._running = !0, Bg(t);
    }, start: function start() {
      this._time = new Date().getTime(), this._pausedTime = 0, this._startLoop();
    }, stop: function stop() {
      this._running = !1;
    }, pause: function pause() {
      this._paused || (this._pauseStart = new Date().getTime(), this._paused = !0);
    }, resume: function resume() {
      this._paused && (this._pausedTime += new Date().getTime() - this._pauseStart, this._paused = !1);
    }, clear: function clear() {
      this._clips = [];
    }, isFinished: function isFinished() {
      return !this._clips.length;
    }, animate: function animate(t, e) {
      e = e || {};var n = new ug(t, e.loop, e.getter, e.setter);return this.addAnimator(n), n;
    } }, c(rv, Dp);var av = 300,
      ov = sp.domSupported,
      sv = function () {
    var t = ["click", "dblclick", "mousewheel", "mouseout", "mouseup", "mousedown", "mousemove", "contextmenu"],
        e = ["touchstart", "touchend", "touchmove"],
        n = { pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1 },
        i = p(t, function (t) {
      var e = t.replace("mouse", "pointer");return n.hasOwnProperty(e) ? e : t;
    });return { mouse: t, touch: e, pointer: i };
  }(),
      lv = { mouse: ["mousemove", "mouseup"], pointer: ["pointermove", "pointerup"] },
      uv = Fi.prototype;uv.stopPropagation = uv.stopImmediatePropagation = uv.preventDefault = V;var hv = { mousedown: function mousedown(t) {
      t = we(this.dom, t), this._mayPointerCapture = [t.zrX, t.zrY], this.trigger("mousedown", t);
    }, mousemove: function mousemove(t) {
      t = we(this.dom, t);var e = this._mayPointerCapture;!e || t.zrX === e[0] && t.zrY === e[1] || Xi(this, !0), this.trigger("mousemove", t);
    }, mouseup: function mouseup(t) {
      t = we(this.dom, t), Xi(this, !1), this.trigger("mouseup", t);
    }, mouseout: function mouseout(t) {
      t = we(this.dom, t), this._pointerCapturing && (t.zrEventControl = "no_globalout");var e = t.toElement || t.relatedTarget;t.zrIsToLocalDOM = Ni(this, e), this.trigger("mouseout", t);
    }, touchstart: function touchstart(t) {
      t = we(this.dom, t), zi(t), this._lastTouchMoment = new Date(), this.handler.processGesture(t, "start"), hv.mousemove.call(this, t), hv.mousedown.call(this, t);
    }, touchmove: function touchmove(t) {
      t = we(this.dom, t), zi(t), this.handler.processGesture(t, "change"), hv.mousemove.call(this, t);
    }, touchend: function touchend(t) {
      t = we(this.dom, t), zi(t), this.handler.processGesture(t, "end"), hv.mouseup.call(this, t), +new Date() - this._lastTouchMoment < av && hv.click.call(this, t);
    }, pointerdown: function pointerdown(t) {
      hv.mousedown.call(this, t);
    }, pointermove: function pointermove(t) {
      Ei(t) || hv.mousemove.call(this, t);
    }, pointerup: function pointerup(t) {
      hv.mouseup.call(this, t);
    }, pointerout: function pointerout(t) {
      Ei(t) || hv.mouseout.call(this, t);
    } };f(["click", "mousewheel", "dblclick", "contextmenu"], function (t) {
    hv[t] = function (e) {
      e = we(this.dom, e), this.trigger(t, e);
    };
  });var cv = { pointermove: function pointermove(t) {
      Ei(t) || cv.mousemove.call(this, t);
    }, pointerup: function pointerup(t) {
      cv.mouseup.call(this, t);
    }, mousemove: function mousemove(t) {
      this.trigger("mousemove", t);
    }, mouseup: function mouseup(t) {
      var e = this._pointerCapturing;Xi(this, !1), this.trigger("mouseup", t), e && (t.zrEventControl = "only_globalout", this.trigger("mouseout", t));
    } },
      dv = Yi.prototype;dv.dispose = function () {
    Gi(this._localHandlerScope), ov && Gi(this._globalHandlerScope);
  }, dv.setCursor = function (t) {
    this.dom.style && (this.dom.style.cursor = t || "default");
  }, c(Yi, Dp);var fv = !sp.canvasSupported,
      pv = { canvas: iv },
      gv = {},
      vv = "4.3.2",
      mv = function mv(t, e, n) {
    n = n || {}, this.dom = e, this.id = t;var i = this,
        r = new Sg(),
        a = n.renderer;if (fv) {
      if (!pv.vml) throw new Error("You need to require 'zrender/vml/vml' to support IE8");a = "vml";
    } else a && pv[a] || (a = "canvas");var o = new pv[a](e, r, n, t);this.storage = r, this.painter = o;var s = sp.node || sp.worker ? null : new Yi(o.getViewportRoot(), o.root);this.handler = new Vp(r, o, s, o.root), this.animation = new rv({ stage: { update: y(this.flush, this) } }), this.animation.start(), this._needsRefresh;var l = r.delFromStorage,
        u = r.addToStorage;r.delFromStorage = function (t) {
      l.call(r, t), t && t.removeSelfFromZr(i);
    }, r.addToStorage = function (t) {
      u.call(r, t), t.addSelfToZr(i);
    };
  };mv.prototype = { constructor: mv, getId: function getId() {
      return this.id;
    }, add: function add(t) {
      this.storage.addRoot(t), this._needsRefresh = !0;
    }, remove: function remove(t) {
      this.storage.delRoot(t), this._needsRefresh = !0;
    }, configLayer: function configLayer(t, e) {
      this.painter.configLayer && this.painter.configLayer(t, e), this._needsRefresh = !0;
    }, setBackgroundColor: function setBackgroundColor(t) {
      this.painter.setBackgroundColor && this.painter.setBackgroundColor(t), this._needsRefresh = !0;
    }, refreshImmediately: function refreshImmediately() {
      this._needsRefresh = this._needsRefreshHover = !1, this.painter.refresh(), this._needsRefresh = this._needsRefreshHover = !1;
    }, refresh: function refresh() {
      this._needsRefresh = !0;
    }, flush: function flush() {
      var t;this._needsRefresh && (t = !0, this.refreshImmediately()), this._needsRefreshHover && (t = !0, this.refreshHoverImmediately()), t && this.trigger("rendered");
    }, addHover: function addHover(t, e) {
      if (this.painter.addHover) {
        var n = this.painter.addHover(t, e);return this.refreshHover(), n;
      }
    }, removeHover: function removeHover(t) {
      this.painter.removeHover && (this.painter.removeHover(t), this.refreshHover());
    }, clearHover: function clearHover() {
      this.painter.clearHover && (this.painter.clearHover(), this.refreshHover());
    }, refreshHover: function refreshHover() {
      this._needsRefreshHover = !0;
    }, refreshHoverImmediately: function refreshHoverImmediately() {
      this._needsRefreshHover = !1, this.painter.refreshHover && this.painter.refreshHover();
    }, resize: function resize(t) {
      t = t || {}, this.painter.resize(t.width, t.height), this.handler.resize();
    }, clearAnimation: function clearAnimation() {
      this.animation.clear();
    }, getWidth: function getWidth() {
      return this.painter.getWidth();
    }, getHeight: function getHeight() {
      return this.painter.getHeight();
    }, pathToImage: function pathToImage(t, e) {
      return this.painter.pathToImage(t, e);
    }, setCursorStyle: function setCursorStyle(t) {
      this.handler.setCursorStyle(t);
    }, findHover: function findHover(t, e) {
      return this.handler.findHover(t, e);
    }, on: function on(t, e, n) {
      this.handler.on(t, e, n);
    }, off: function off(t, e) {
      this.handler.off(t, e);
    }, trigger: function trigger(t, e) {
      this.handler.trigger(t, e);
    }, clear: function clear() {
      this.storage.delRoot(), this.painter.clear();
    }, dispose: function dispose() {
      this.animation.stop(), this.clear(), this.storage.dispose(), this.painter.dispose(), this.handler.dispose(), this.animation = this.storage = this.painter = this.handler = null, $i(this.id);
    } };var yv = (Object.freeze || Object)({ version: vv, init: qi, dispose: ji, getInstance: Zi, registerPainter: Ki }),
      xv = f,
      _v = S,
      wv = _,
      bv = "series\x00",
      Sv = ["fontStyle", "fontWeight", "fontSize", "fontFamily", "rich", "tag", "color", "textBorderColor", "textBorderWidth", "width", "height", "lineHeight", "align", "verticalAlign", "baseline", "shadowColor", "shadowBlur", "shadowOffsetX", "shadowOffsetY", "textShadowColor", "textShadowBlur", "textShadowOffsetX", "textShadowOffsetY", "backgroundColor", "borderColor", "borderWidth", "borderRadius", "padding"],
      Mv = 0,
      Av = ".",
      Iv = "___EC__COMPONENT__CONTAINER___",
      Tv = 0,
      Cv = function Cv(t) {
    for (var e = 0; e < t.length; e++) {
      t[e][1] || (t[e][1] = t[e][0]);
    }return function (e, n, i) {
      for (var r = {}, a = 0; a < t.length; a++) {
        var o = t[a][1];if (!(n && u(n, o) >= 0 || i && u(i, o) < 0)) {
          var s = e.getShallow(o);null != s && (r[t[a][0]] = s);
        }
      }return r;
    };
  },
      Dv = Cv([["lineWidth", "width"], ["stroke", "color"], ["opacity"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["shadowColor"]]),
      kv = { getLineStyle: function getLineStyle(t) {
      var e = Dv(this, t);return e.lineDash = this.getLineDash(e.lineWidth), e;
    }, getLineDash: function getLineDash(t) {
      null == t && (t = 1);var e = this.get("type"),
          n = Math.max(t, 2),
          i = 4 * t;return "solid" === e || null == e ? !1 : "dashed" === e ? [i, i] : [n, n];
    } },
      Pv = Cv([["fill", "color"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["opacity"], ["shadowColor"]]),
      Lv = { getAreaStyle: function getAreaStyle(t, e) {
      return Pv(this, t, e);
    } },
      Ov = Math.pow,
      Ev = Math.sqrt,
      Bv = 1e-8,
      zv = 1e-4,
      Rv = Ev(3),
      Nv = 1 / 3,
      Fv = H(),
      Vv = H(),
      Hv = H(),
      Wv = Math.min,
      Gv = Math.max,
      Xv = Math.sin,
      Uv = Math.cos,
      Yv = 2 * Math.PI,
      qv = H(),
      jv = H(),
      Zv = H(),
      Kv = [],
      $v = [],
      Qv = { M: 1, L: 2, C: 3, Q: 4, A: 5, Z: 6, R: 7 },
      Jv = [],
      tm = [],
      em = [],
      nm = [],
      im = Math.min,
      rm = Math.max,
      am = Math.cos,
      om = Math.sin,
      sm = Math.sqrt,
      lm = Math.abs,
      um = "undefined" != typeof Float32Array,
      hm = function hm(t) {
    this._saveData = !t, this._saveData && (this.data = []), this._ctx = null;
  };hm.prototype = { constructor: hm, _xi: 0, _yi: 0, _x0: 0, _y0: 0, _ux: 0, _uy: 0, _len: 0, _lineDash: null, _dashOffset: 0, _dashIdx: 0, _dashSum: 0, setScale: function setScale(t, e, n) {
      n = n || 0, this._ux = lm(n / dg / t) || 0, this._uy = lm(n / dg / e) || 0;
    }, getContext: function getContext() {
      return this._ctx;
    }, beginPath: function beginPath(t) {
      return this._ctx = t, t && t.beginPath(), t && (this.dpr = t.dpr), this._saveData && (this._len = 0), this._lineDash && (this._lineDash = null, this._dashOffset = 0), this;
    }, moveTo: function moveTo(t, e) {
      return this.addData(Qv.M, t, e), this._ctx && this._ctx.moveTo(t, e), this._x0 = t, this._y0 = e, this._xi = t, this._yi = e, this;
    }, lineTo: function lineTo(t, e) {
      var n = lm(t - this._xi) > this._ux || lm(e - this._yi) > this._uy || this._len < 5;return this.addData(Qv.L, t, e), this._ctx && n && (this._needsDash() ? this._dashedLineTo(t, e) : this._ctx.lineTo(t, e)), n && (this._xi = t, this._yi = e), this;
    }, bezierCurveTo: function bezierCurveTo(t, e, n, i, r, a) {
      return this.addData(Qv.C, t, e, n, i, r, a), this._ctx && (this._needsDash() ? this._dashedBezierTo(t, e, n, i, r, a) : this._ctx.bezierCurveTo(t, e, n, i, r, a)), this._xi = r, this._yi = a, this;
    }, quadraticCurveTo: function quadraticCurveTo(t, e, n, i) {
      return this.addData(Qv.Q, t, e, n, i), this._ctx && (this._needsDash() ? this._dashedQuadraticTo(t, e, n, i) : this._ctx.quadraticCurveTo(t, e, n, i)), this._xi = n, this._yi = i, this;
    }, arc: function arc(t, e, n, i, r, a) {
      return this.addData(Qv.A, t, e, n, n, i, r - i, 0, a ? 0 : 1), this._ctx && this._ctx.arc(t, e, n, i, r, a), this._xi = am(r) * n + t, this._yi = om(r) * n + e, this;
    }, arcTo: function arcTo(t, e, n, i, r) {
      return this._ctx && this._ctx.arcTo(t, e, n, i, r), this;
    }, rect: function rect(t, e, n, i) {
      return this._ctx && this._ctx.rect(t, e, n, i), this.addData(Qv.R, t, e, n, i), this;
    }, closePath: function closePath() {
      this.addData(Qv.Z);var t = this._ctx,
          e = this._x0,
          n = this._y0;return t && (this._needsDash() && this._dashedLineTo(e, n), t.closePath()), this._xi = e, this._yi = n, this;
    }, fill: function fill(t) {
      t && t.fill(), this.toStatic();
    }, stroke: function stroke(t) {
      t && t.stroke(), this.toStatic();
    }, setLineDash: function setLineDash(t) {
      if (t instanceof Array) {
        this._lineDash = t, this._dashIdx = 0;for (var e = 0, n = 0; n < t.length; n++) {
          e += t[n];
        }this._dashSum = e;
      }return this;
    }, setLineDashOffset: function setLineDashOffset(t) {
      return this._dashOffset = t, this;
    }, len: function len() {
      return this._len;
    }, setData: function setData(t) {
      var e = t.length;this.data && this.data.length === e || !um || (this.data = new Float32Array(e));for (var n = 0; e > n; n++) {
        this.data[n] = t[n];
      }this._len = e;
    }, appendPath: function appendPath(t) {
      t instanceof Array || (t = [t]);for (var e = t.length, n = 0, i = this._len, r = 0; e > r; r++) {
        n += t[r].len();
      }um && this.data instanceof Float32Array && (this.data = new Float32Array(i + n));for (var r = 0; e > r; r++) {
        for (var a = t[r].data, o = 0; o < a.length; o++) {
          this.data[i++] = a[o];
        }
      }this._len = i;
    }, addData: function addData(t) {
      if (this._saveData) {
        var e = this.data;this._len + arguments.length > e.length && (this._expandData(), e = this.data);for (var n = 0; n < arguments.length; n++) {
          e[this._len++] = arguments[n];
        }this._prevCmd = t;
      }
    }, _expandData: function _expandData() {
      if (!(this.data instanceof Array)) {
        for (var t = [], e = 0; e < this._len; e++) {
          t[e] = this.data[e];
        }this.data = t;
      }
    }, _needsDash: function _needsDash() {
      return this._lineDash;
    }, _dashedLineTo: function _dashedLineTo(t, e) {
      var n,
          i,
          r = this._dashSum,
          a = this._dashOffset,
          o = this._lineDash,
          s = this._ctx,
          l = this._xi,
          u = this._yi,
          h = t - l,
          c = e - u,
          d = sm(h * h + c * c),
          f = l,
          p = u,
          g = o.length;for (h /= d, c /= d, 0 > a && (a = r + a), a %= r, f -= a * h, p -= a * c; h > 0 && t >= f || 0 > h && f >= t || 0 === h && (c > 0 && e >= p || 0 > c && p >= e);) {
        i = this._dashIdx, n = o[i], f += h * n, p += c * n, this._dashIdx = (i + 1) % g, h > 0 && l > f || 0 > h && f > l || c > 0 && u > p || 0 > c && p > u || s[i % 2 ? "moveTo" : "lineTo"](h >= 0 ? im(f, t) : rm(f, t), c >= 0 ? im(p, e) : rm(p, e));
      }h = f - t, c = p - e, this._dashOffset = -sm(h * h + c * c);
    }, _dashedBezierTo: function _dashedBezierTo(t, e, n, i, r, a) {
      var o,
          s,
          l,
          u,
          h,
          c = this._dashSum,
          d = this._dashOffset,
          f = this._lineDash,
          p = this._ctx,
          g = this._xi,
          v = this._yi,
          m = br,
          y = 0,
          x = this._dashIdx,
          _ = f.length,
          w = 0;for (0 > d && (d = c + d), d %= c, o = 0; 1 > o; o += .1) {
        s = m(g, t, n, r, o + .1) - m(g, t, n, r, o), l = m(v, e, i, a, o + .1) - m(v, e, i, a, o), y += sm(s * s + l * l);
      }for (; _ > x && (w += f[x], !(w > d)); x++) {}for (o = (w - d) / y; 1 >= o;) {
        u = m(g, t, n, r, o), h = m(v, e, i, a, o), x % 2 ? p.moveTo(u, h) : p.lineTo(u, h), o += f[x] / y, x = (x + 1) % _;
      }x % 2 !== 0 && p.lineTo(r, a), s = r - u, l = a - h, this._dashOffset = -sm(s * s + l * l);
    }, _dashedQuadraticTo: function _dashedQuadraticTo(t, e, n, i) {
      var r = n,
          a = i;n = (n + 2 * t) / 3, i = (i + 2 * e) / 3, t = (this._xi + 2 * t) / 3, e = (this._yi + 2 * e) / 3, this._dashedBezierTo(t, e, n, i, r, a);
    }, toStatic: function toStatic() {
      var t = this.data;t instanceof Array && (t.length = this._len, um && (this.data = new Float32Array(t)));
    }, getBoundingRect: function getBoundingRect() {
      Jv[0] = Jv[1] = em[0] = em[1] = Number.MAX_VALUE, tm[0] = tm[1] = nm[0] = nm[1] = -Number.MAX_VALUE;for (var t = this.data, e = 0, n = 0, i = 0, r = 0, a = 0; a < t.length;) {
        var o = t[a++];switch (1 === a && (e = t[a], n = t[a + 1], i = e, r = n), o) {case Qv.M:
            i = t[a++], r = t[a++], e = i, n = r, em[0] = i, em[1] = r, nm[0] = i, nm[1] = r;break;case Qv.L:
            Br(e, n, t[a], t[a + 1], em, nm), e = t[a++], n = t[a++];break;case Qv.C:
            zr(e, n, t[a++], t[a++], t[a++], t[a++], t[a], t[a + 1], em, nm), e = t[a++], n = t[a++];break;case Qv.Q:
            Rr(e, n, t[a++], t[a++], t[a], t[a + 1], em, nm), e = t[a++], n = t[a++];break;case Qv.A:
            var s = t[a++],
                l = t[a++],
                u = t[a++],
                h = t[a++],
                c = t[a++],
                d = t[a++] + c;a += 1;var f = 1 - t[a++];1 === a && (i = am(c) * u + s, r = om(c) * h + l), Nr(s, l, u, h, c, d, f, em, nm), e = am(d) * u + s, n = om(d) * h + l;break;case Qv.R:
            i = e = t[a++], r = n = t[a++];var p = t[a++],
                g = t[a++];Br(i, r, i + p, r + g, em, nm);break;case Qv.Z:
            e = i, n = r;}oe(Jv, Jv, em), se(tm, tm, nm);
      }return 0 === a && (Jv[0] = Jv[1] = tm[0] = tm[1] = 0), new An(Jv[0], Jv[1], tm[0] - Jv[0], tm[1] - Jv[1]);
    }, rebuildPath: function rebuildPath(t) {
      for (var e, n, i, r, a, o, s = this.data, l = this._ux, u = this._uy, h = this._len, c = 0; h > c;) {
        var d = s[c++];switch (1 === c && (i = s[c], r = s[c + 1], e = i, n = r), d) {case Qv.M:
            e = i = s[c++], n = r = s[c++], t.moveTo(i, r);break;case Qv.L:
            a = s[c++], o = s[c++], (lm(a - i) > l || lm(o - r) > u || c === h - 1) && (t.lineTo(a, o), i = a, r = o);break;case Qv.C:
            t.bezierCurveTo(s[c++], s[c++], s[c++], s[c++], s[c++], s[c++]), i = s[c - 2], r = s[c - 1];break;case Qv.Q:
            t.quadraticCurveTo(s[c++], s[c++], s[c++], s[c++]), i = s[c - 2], r = s[c - 1];break;case Qv.A:
            var f = s[c++],
                p = s[c++],
                g = s[c++],
                v = s[c++],
                m = s[c++],
                y = s[c++],
                x = s[c++],
                _ = s[c++],
                w = g > v ? g : v,
                b = g > v ? 1 : g / v,
                S = g > v ? v / g : 1,
                M = Math.abs(g - v) > .001,
                A = m + y;M ? (t.translate(f, p), t.rotate(x), t.scale(b, S), t.arc(0, 0, w, m, A, 1 - _), t.scale(1 / b, 1 / S), t.rotate(-x), t.translate(-f, -p)) : t.arc(f, p, w, m, A, 1 - _), 1 === c && (e = am(m) * g + f, n = om(m) * v + p), i = am(A) * g + f, r = om(A) * v + p;break;case Qv.R:
            e = i = s[c], n = r = s[c + 1], t.rect(s[c++], s[c++], s[c++], s[c++]);break;case Qv.Z:
            t.closePath(), i = e, r = n;}
      }
    } }, hm.CMD = Qv;var cm = 2 * Math.PI,
      dm = 2 * Math.PI,
      fm = hm.CMD,
      pm = 2 * Math.PI,
      gm = 1e-4,
      vm = [-1, -1, -1],
      mm = [-1, -1],
      ym = Og.prototype.getCanvasPattern,
      xm = Math.abs,
      _m = new hm(!0);Jr.prototype = { constructor: Jr, type: "path", __dirtyPath: !0, strokeContainThreshold: 5, segmentIgnoreThreshold: 0, subPixelOptimize: !1, brush: function brush(t, e) {
      var n = this.style,
          i = this.path || _m,
          r = n.hasStroke(),
          a = n.hasFill(),
          o = n.fill,
          s = n.stroke,
          l = a && !!o.colorStops,
          u = r && !!s.colorStops,
          h = a && !!o.image,
          c = r && !!s.image;if (n.bind(t, this, e), this.setTransform(t), this.__dirty) {
        var d;l && (d = d || this.getBoundingRect(), this._fillGradient = n.getGradient(t, o, d)), u && (d = d || this.getBoundingRect(), this._strokeGradient = n.getGradient(t, s, d));
      }l ? t.fillStyle = this._fillGradient : h && (t.fillStyle = ym.call(o, t)), u ? t.strokeStyle = this._strokeGradient : c && (t.strokeStyle = ym.call(s, t));var f = n.lineDash,
          p = n.lineDashOffset,
          g = !!t.setLineDash,
          v = this.getGlobalScale();if (i.setScale(v[0], v[1], this.segmentIgnoreThreshold), this.__dirtyPath || f && !g && r ? (i.beginPath(t), f && !g && (i.setLineDash(f), i.setLineDashOffset(p)), this.buildPath(i, this.shape, !1), this.path && (this.__dirtyPath = !1)) : (t.beginPath(), this.path.rebuildPath(t)), a) if (null != n.fillOpacity) {
        var m = t.globalAlpha;t.globalAlpha = n.fillOpacity * n.opacity, i.fill(t), t.globalAlpha = m;
      } else i.fill(t);if (f && g && (t.setLineDash(f), t.lineDashOffset = p), r) if (null != n.strokeOpacity) {
        var m = t.globalAlpha;t.globalAlpha = n.strokeOpacity * n.opacity, i.stroke(t), t.globalAlpha = m;
      } else i.stroke(t);f && g && t.setLineDash([]), null != n.text && (this.restoreTransform(t), this.drawRectText(t, this.getBoundingRect()));
    }, buildPath: function buildPath() {}, createPathProxy: function createPathProxy() {
      this.path = new hm();
    }, getBoundingRect: function getBoundingRect() {
      var t = this._rect,
          e = this.style,
          n = !t;if (n) {
        var i = this.path;i || (i = this.path = new hm()), this.__dirtyPath && (i.beginPath(), this.buildPath(i, this.shape, !1)), t = i.getBoundingRect();
      }if (this._rect = t, e.hasStroke()) {
        var r = this._rectWithStroke || (this._rectWithStroke = t.clone());if (this.__dirty || n) {
          r.copy(t);var a = e.lineWidth,
              o = e.strokeNoScale ? this.getLineScale() : 1;e.hasFill() || (a = Math.max(a, this.strokeContainThreshold || 4)), o > 1e-10 && (r.width += a / o, r.height += a / o, r.x -= a / o / 2, r.y -= a / o / 2);
        }return r;
      }return t;
    }, contain: function contain(t, e) {
      var n = this.transformCoordToLocal(t, e),
          i = this.getBoundingRect(),
          r = this.style;if (t = n[0], e = n[1], i.contain(t, e)) {
        var a = this.path.data;if (r.hasStroke()) {
          var o = r.lineWidth,
              s = r.strokeNoScale ? this.getLineScale() : 1;if (s > 1e-10 && (r.hasFill() || (o = Math.max(o, this.strokeContainThreshold)), Qr(a, o / s, t, e))) return !0;
        }if (r.hasFill()) return $r(a, t, e);
      }return !1;
    }, dirty: function dirty(t) {
      null == t && (t = !0), t && (this.__dirtyPath = t, this._rect = null), this.__dirty = this.__dirtyText = !0, this.__zr && this.__zr.refresh(), this.__clipTarget && this.__clipTarget.dirty();
    }, animateShape: function animateShape(t) {
      return this.animate("shape", t);
    }, attrKV: function attrKV(t, e) {
      "shape" === t ? (this.setShape(e), this.__dirtyPath = !0, this._rect = null) : Ai.prototype.attrKV.call(this, t, e);
    }, setShape: function setShape(t, e) {
      var n = this.shape;if (n) {
        if (S(t)) for (var i in t) {
          t.hasOwnProperty(i) && (n[i] = t[i]);
        } else n[t] = e;this.dirty(!0);
      }return this;
    }, getLineScale: function getLineScale() {
      var t = this.transform;return t && xm(t[0] - 1) > 1e-10 && xm(t[3] - 1) > 1e-10 ? Math.sqrt(xm(t[0] * t[3] - t[2] * t[1])) : 1;
    } }, Jr.extend = function (t) {
    var e = function e(_e2) {
      Jr.call(this, _e2), t.style && this.style.extendFrom(t.style, !1);var n = t.shape;if (n) {
        this.shape = this.shape || {};var i = this.shape;for (var r in n) {
          !i.hasOwnProperty(r) && n.hasOwnProperty(r) && (i[r] = n[r]);
        }
      }t.init && t.init.call(this, _e2);
    };h(e, Jr);for (var n in t) {
      "style" !== n && "shape" !== n && (e.prototype[n] = t[n]);
    }return e;
  }, h(Jr, Ai);var wm = hm.CMD,
      bm = [[], [], []],
      Sm = Math.sqrt,
      Mm = Math.atan2,
      Am = function Am(t, e) {
    var n,
        i,
        r,
        a,
        o,
        s,
        l = t.data,
        u = wm.M,
        h = wm.C,
        c = wm.L,
        d = wm.R,
        f = wm.A,
        p = wm.Q;for (r = 0, a = 0; r < l.length;) {
      switch (n = l[r++], a = r, i = 0, n) {case u:
          i = 1;break;case c:
          i = 1;break;case h:
          i = 3;break;case p:
          i = 2;break;case f:
          var g = e[4],
              v = e[5],
              m = Sm(e[0] * e[0] + e[1] * e[1]),
              y = Sm(e[2] * e[2] + e[3] * e[3]),
              x = Mm(-e[1] / y, e[0] / m);l[r] *= m, l[r++] += g, l[r] *= y, l[r++] += v, l[r++] *= m, l[r++] *= y, l[r++] += x, l[r++] += x, r += 2, a = r;break;case d:
          s[0] = l[r++], s[1] = l[r++], ae(s, s, e), l[a++] = s[0], l[a++] = s[1], s[0] += l[r++], s[1] += l[r++], ae(s, s, e), l[a++] = s[0], l[a++] = s[1];}for (o = 0; i > o; o++) {
        var s = bm[o];s[0] = l[r++], s[1] = l[r++], ae(s, s, e), l[a++] = s[0], l[a++] = s[1];
      }
    }
  },
      Im = Math.sqrt,
      Tm = Math.sin,
      Cm = Math.cos,
      Dm = Math.PI,
      km = function km(t) {
    return Math.sqrt(t[0] * t[0] + t[1] * t[1]);
  },
      Pm = function Pm(t, e) {
    return (t[0] * e[0] + t[1] * e[1]) / (km(t) * km(e));
  },
      Lm = function Lm(t, e) {
    return (t[0] * e[1] < t[1] * e[0] ? -1 : 1) * Math.acos(Pm(t, e));
  },
      Om = /([mlvhzcqtsa])([^mlvhzcqtsa]*)/gi,
      Em = /-?([0-9]*\.)?[0-9]+([eE]-?[0-9]+)?/g,
      Bm = function Bm(t) {
    Ai.call(this, t);
  };Bm.prototype = { constructor: Bm, type: "text", brush: function brush(t, e) {
      var n = this.style;this.__dirty && si(n, !0), n.fill = n.stroke = n.shadowBlur = n.shadowColor = n.shadowOffsetX = n.shadowOffsetY = null;var i = n.text;return null != i && (i += ""), Mi(i, n) ? (this.setTransform(t), ui(this, t, i, n, null, e), void this.restoreTransform(t)) : void (t.__attrCachedBy = Ig.NONE);
    }, getBoundingRect: function getBoundingRect() {
      var t = this.style;if (this.__dirty && si(t, !0), !this._rect) {
        var e = t.text;null != e ? e += "" : e = "";var n = Xn(t.text + "", t.font, t.textAlign, t.textVerticalAlign, t.textPadding, t.textLineHeight, t.rich);if (n.x += t.x || 0, n.y += t.y || 0, _i(t.textStroke, t.textStrokeWidth)) {
          var i = t.textStrokeWidth;n.x -= i / 2, n.y -= i / 2, n.width += i, n.height += i;
        }this._rect = n;
      }return this._rect;
    } }, h(Bm, Ai);var zm = Jr.extend({ type: "circle", shape: { cx: 0, cy: 0, r: 0 }, buildPath: function buildPath(t, e, n) {
      n && t.moveTo(e.cx + e.r, e.cy), t.arc(e.cx, e.cy, e.r, 0, 2 * Math.PI, !0);
    } }),
      Rm = [["shadowBlur", 0], ["shadowColor", "#000"], ["shadowOffsetX", 0], ["shadowOffsetY", 0]],
      Nm = function Nm(t) {
    return sp.browser.ie && sp.browser.version >= 11 ? function () {
      var e,
          n = this.__clipPaths,
          i = this.style;if (n) for (var r = 0; r < n.length; r++) {
        var a = n[r],
            o = a && a.shape,
            s = a && a.type;if (o && ("sector" === s && o.startAngle === o.endAngle || "rect" === s && (!o.width || !o.height))) {
          for (var l = 0; l < Rm.length; l++) {
            Rm[l][2] = i[Rm[l][0]], i[Rm[l][0]] = Rm[l][1];
          }e = !0;break;
        }
      }if (t.apply(this, arguments), e) for (var l = 0; l < Rm.length; l++) {
        i[Rm[l][0]] = Rm[l][2];
      }
    } : t;
  },
      Fm = Jr.extend({ type: "sector", shape: { cx: 0, cy: 0, r0: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 }, brush: Nm(Jr.prototype.brush), buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = Math.max(e.r0 || 0, 0),
          a = Math.max(e.r, 0),
          o = e.startAngle,
          s = e.endAngle,
          l = e.clockwise,
          u = Math.cos(o),
          h = Math.sin(o);t.moveTo(u * r + n, h * r + i), t.lineTo(u * a + n, h * a + i), t.arc(n, i, a, o, s, !l), t.lineTo(Math.cos(s) * r + n, Math.sin(s) * r + i), 0 !== r && t.arc(n, i, r, s, o, l), t.closePath();
    } }),
      Vm = Jr.extend({ type: "ring", shape: { cx: 0, cy: 0, r: 0, r0: 0 }, buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = 2 * Math.PI;t.moveTo(n + e.r, i), t.arc(n, i, e.r, 0, r, !1), t.moveTo(n + e.r0, i), t.arc(n, i, e.r0, 0, r, !0);
    } }),
      Hm = function Hm(t, e) {
    for (var n = t.length, i = [], r = 0, a = 1; n > a; a++) {
      r += ee(t[a - 1], t[a]);
    }var o = r / 2;o = n > o ? n : o;for (var a = 0; o > a; a++) {
      var s,
          l,
          u,
          h = a / (o - 1) * (e ? n : n - 1),
          c = Math.floor(h),
          d = h - c,
          f = t[c % n];e ? (s = t[(c - 1 + n) % n], l = t[(c + 1) % n], u = t[(c + 2) % n]) : (s = t[0 === c ? c : c - 1], l = t[c > n - 2 ? n - 1 : c + 1], u = t[c > n - 3 ? n - 1 : c + 2]);var p = d * d,
          g = d * p;i.push([oa(s[0], f[0], l[0], u[0], d, p, g), oa(s[1], f[1], l[1], u[1], d, p, g)]);
    }return i;
  },
      Wm = function Wm(t, e, n, i) {
    var r,
        a,
        o,
        s,
        l = [],
        u = [],
        h = [],
        c = [];if (i) {
      o = [1 / 0, 1 / 0], s = [-1 / 0, -1 / 0];for (var d = 0, f = t.length; f > d; d++) {
        oe(o, o, t[d]), se(s, s, t[d]);
      }oe(o, o, i[0]), se(s, s, i[1]);
    }for (var d = 0, f = t.length; f > d; d++) {
      var p = t[d];if (n) r = t[d ? d - 1 : f - 1], a = t[(d + 1) % f];else {
        if (0 === d || d === f - 1) {
          l.push(G(t[d]));continue;
        }r = t[d - 1], a = t[d + 1];
      }q(u, a, r), J(u, u, e);var g = ee(p, r),
          v = ee(p, a),
          m = g + v;0 !== m && (g /= m, v /= m), J(h, u, -g), J(c, u, v);var y = U([], p, h),
          x = U([], p, c);i && (se(y, y, o), oe(y, y, s), se(x, x, o), oe(x, x, s)), l.push(y), l.push(x);
    }return n && l.push(l.shift()), l;
  },
      Gm = Jr.extend({ type: "polygon", shape: { points: null, smooth: !1, smoothConstraint: null }, buildPath: function buildPath(t, e) {
      sa(t, e, !0);
    } }),
      Xm = Jr.extend({ type: "polyline", shape: { points: null, smooth: !1, smoothConstraint: null }, style: { stroke: "#000", fill: null }, buildPath: function buildPath(t, e) {
      sa(t, e, !1);
    } }),
      Um = Math.round,
      Ym = {},
      qm = Jr.extend({ type: "rect", shape: { r: 0, x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {
      var n, i, r, a;this.subPixelOptimize ? (ua(Ym, e, this.style), n = Ym.x, i = Ym.y, r = Ym.width, a = Ym.height, Ym.r = e.r, e = Ym) : (n = e.x, i = e.y, r = e.width, a = e.height), e.r ? oi(t, e) : t.rect(n, i, r, a), t.closePath();
    } }),
      jm = {},
      Zm = Jr.extend({ type: "line", shape: { x1: 0, y1: 0, x2: 0, y2: 0, percent: 1 }, style: { stroke: "#000", fill: null }, buildPath: function buildPath(t, e) {
      var n, i, r, a;this.subPixelOptimize ? (la(jm, e, this.style), n = jm.x1, i = jm.y1, r = jm.x2, a = jm.y2) : (n = e.x1, i = e.y1, r = e.x2, a = e.y2);var o = e.percent;0 !== o && (t.moveTo(n, i), 1 > o && (r = n * (1 - o) + r * o, a = i * (1 - o) + a * o), t.lineTo(r, a));
    }, pointAt: function pointAt(t) {
      var e = this.shape;return [e.x1 * (1 - t) + e.x2 * t, e.y1 * (1 - t) + e.y2 * t];
    } }),
      Km = [],
      $m = Jr.extend({ type: "bezier-curve", shape: { x1: 0, y1: 0, x2: 0, y2: 0, cpx1: 0, cpy1: 0, percent: 1 }, style: { stroke: "#000", fill: null }, buildPath: function buildPath(t, e) {
      var n = e.x1,
          i = e.y1,
          r = e.x2,
          a = e.y2,
          o = e.cpx1,
          s = e.cpy1,
          l = e.cpx2,
          u = e.cpy2,
          h = e.percent;0 !== h && (t.moveTo(n, i), null == l || null == u ? (1 > h && (Lr(n, o, r, h, Km), o = Km[1], r = Km[2], Lr(i, s, a, h, Km), s = Km[1], a = Km[2]), t.quadraticCurveTo(o, s, r, a)) : (1 > h && (Ir(n, o, l, r, h, Km), o = Km[1], l = Km[2], r = Km[3], Ir(i, s, u, a, h, Km), s = Km[1], u = Km[2], a = Km[3]), t.bezierCurveTo(o, s, l, u, r, a)));
    }, pointAt: function pointAt(t) {
      return ca(this.shape, t, !1);
    }, tangentAt: function tangentAt(t) {
      var e = ca(this.shape, t, !0);return te(e, e);
    } }),
      Qm = Jr.extend({ type: "arc", shape: { cx: 0, cy: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 }, style: { stroke: "#000", fill: null }, buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = Math.max(e.r, 0),
          a = e.startAngle,
          o = e.endAngle,
          s = e.clockwise,
          l = Math.cos(a),
          u = Math.sin(a);t.moveTo(l * r + n, u * r + i), t.arc(n, i, r, a, o, !s);
    } }),
      Jm = Jr.extend({ type: "compound", shape: { paths: null }, _updatePathDirty: function _updatePathDirty() {
      for (var t = this.__dirtyPath, e = this.shape.paths, n = 0; n < e.length; n++) {
        t = t || e[n].__dirtyPath;
      }this.__dirtyPath = t, this.__dirty = this.__dirty || t;
    }, beforeBrush: function beforeBrush() {
      this._updatePathDirty();for (var t = this.shape.paths || [], e = this.getGlobalScale(), n = 0; n < t.length; n++) {
        t[n].path || t[n].createPathProxy(), t[n].path.setScale(e[0], e[1], t[n].segmentIgnoreThreshold);
      }
    }, buildPath: function buildPath(t, e) {
      for (var n = e.paths || [], i = 0; i < n.length; i++) {
        n[i].buildPath(t, n[i].shape, !0);
      }
    }, afterBrush: function afterBrush() {
      for (var t = this.shape.paths || [], e = 0; e < t.length; e++) {
        t[e].__dirtyPath = !1;
      }
    }, getBoundingRect: function getBoundingRect() {
      return this._updatePathDirty(), Jr.prototype.getBoundingRect.call(this);
    } }),
      ty = function ty(t) {
    this.colorStops = t || [];
  };ty.prototype = { constructor: ty, addColorStop: function addColorStop(t, e) {
      this.colorStops.push({ offset: t, color: e });
    } };var ey = function ey(t, e, n, i, r, a) {
    this.x = null == t ? 0 : t, this.y = null == e ? 0 : e, this.x2 = null == n ? 1 : n, this.y2 = null == i ? 0 : i, this.type = "linear", this.global = a || !1, ty.call(this, r);
  };ey.prototype = { constructor: ey }, h(ey, ty);var ny = function ny(t, e, n, i, r) {
    this.x = null == t ? .5 : t, this.y = null == e ? .5 : e, this.r = null == n ? .5 : n, this.type = "radial", this.global = r || !1, ty.call(this, i);
  };ny.prototype = { constructor: ny }, h(ny, ty), da.prototype.incremental = !0, da.prototype.clearDisplaybles = function () {
    this._displayables = [], this._temporaryDisplayables = [], this._cursor = 0, this.dirty(), this.notClear = !1;
  }, da.prototype.addDisplayable = function (t, e) {
    e ? this._temporaryDisplayables.push(t) : this._displayables.push(t), this.dirty();
  }, da.prototype.addDisplayables = function (t, e) {
    e = e || !1;for (var n = 0; n < t.length; n++) {
      this.addDisplayable(t[n], e);
    }
  }, da.prototype.eachPendingDisplayable = function (t) {
    for (var e = this._cursor; e < this._displayables.length; e++) {
      t && t(this._displayables[e]);
    }for (var e = 0; e < this._temporaryDisplayables.length; e++) {
      t && t(this._temporaryDisplayables[e]);
    }
  }, da.prototype.update = function () {
    this.updateTransform();for (var t = this._cursor; t < this._displayables.length; t++) {
      var e = this._displayables[t];e.parent = this, e.update(), e.parent = null;
    }for (var t = 0; t < this._temporaryDisplayables.length; t++) {
      var e = this._temporaryDisplayables[t];e.parent = this, e.update(), e.parent = null;
    }
  }, da.prototype.brush = function (t) {
    for (var e = this._cursor; e < this._displayables.length; e++) {
      var n = this._displayables[e];
      n.beforeBrush && n.beforeBrush(t), n.brush(t, e === this._cursor ? null : this._displayables[e - 1]), n.afterBrush && n.afterBrush(t);
    }this._cursor = e;for (var e = 0; e < this._temporaryDisplayables.length; e++) {
      var n = this._temporaryDisplayables[e];n.beforeBrush && n.beforeBrush(t), n.brush(t, 0 === e ? null : this._temporaryDisplayables[e - 1]), n.afterBrush && n.afterBrush(t);
    }this._temporaryDisplayables = [], this.notClear = !0;
  };var iy = [];da.prototype.getBoundingRect = function () {
    if (!this._rect) {
      for (var t = new An(1 / 0, 1 / 0, -1 / 0, -1 / 0), e = 0; e < this._displayables.length; e++) {
        var n = this._displayables[e],
            i = n.getBoundingRect().clone();n.needLocalTransform() && i.applyTransform(n.getLocalTransform(iy)), t.union(i);
      }this._rect = t;
    }return this._rect;
  }, da.prototype.contain = function (t, e) {
    var n = this.transformCoordToLocal(t, e),
        i = this.getBoundingRect();if (i.contain(n[0], n[1])) for (var r = 0; r < this._displayables.length; r++) {
      var a = this._displayables[r];if (a.contain(t, e)) return !0;
    }return !1;
  }, h(da, Ai);var ry = Math.max,
      ay = Math.min,
      oy = {},
      sy = 1,
      ly = { color: "textFill", textBorderColor: "textStroke", textBorderWidth: "textStrokeWidth" },
      uy = "emphasis",
      hy = "normal",
      cy = 1,
      dy = {},
      fy = {},
      py = aa,
      gy = ha,
      vy = N(),
      my = 0;ga("circle", zm), ga("sector", Fm), ga("ring", Vm), ga("polygon", Gm), ga("polyline", Xm), ga("rect", qm), ga("line", Zm), ga("bezierCurve", $m), ga("arc", Qm);var yy = (Object.freeze || Object)({ Z2_EMPHASIS_LIFT: sy, CACHED_LABEL_STYLE_PROPERTIES: ly, extendShape: fa, extendPath: pa, registerShape: ga, getShapeClass: va, makePath: ma, makeImage: ya, mergePath: py, resizePath: _a, subPixelOptimizeLine: wa, subPixelOptimizeRect: ba, subPixelOptimize: gy, setElementHoverStyle: ka, setHoverStyle: za, setAsHighDownDispatcher: Ra, isHighDownDispatcher: Na, getHighlightDigit: Fa, setLabelStyle: Va, modifyLabelStyle: Ha, setTextStyle: Wa, setText: Ga, getFont: Ka, updateProps: Qa, initProps: Ja, getTransform: to, applyTransform: eo, transformDirection: no, groupTransition: io, clipPointsByRect: ro, clipRectByRect: ao, createIcon: oo, linePolygonIntersect: so, lineLineIntersect: lo, Group: _g, Image: Ii, Text: Bm, Circle: zm, Sector: Fm, Ring: Vm, Polygon: Gm, Polyline: Xm, Rect: qm, Line: Zm, BezierCurve: $m, Arc: Qm, IncrementalDisplayable: da, CompoundPath: Jm, LinearGradient: ey, RadialGradient: ny, BoundingRect: An }),
      xy = ["textStyle", "color"],
      _y = { getTextColor: function getTextColor(t) {
      var e = this.ecModel;return this.getShallow("color") || (!t && e ? e.get(xy) : null);
    }, getFont: function getFont() {
      return Ka({ fontStyle: this.getShallow("fontStyle"), fontWeight: this.getShallow("fontWeight"), fontSize: this.getShallow("fontSize"), fontFamily: this.getShallow("fontFamily") }, this.ecModel);
    }, getTextRect: function getTextRect(t) {
      return Xn(t, this.getFont(), this.getShallow("align"), this.getShallow("verticalAlign") || this.getShallow("baseline"), this.getShallow("padding"), this.getShallow("lineHeight"), this.getShallow("rich"), this.getShallow("truncateText"));
    } },
      wy = Cv([["fill", "color"], ["stroke", "borderColor"], ["lineWidth", "borderWidth"], ["opacity"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["shadowColor"], ["textPosition"], ["textAlign"]]),
      by = { getItemStyle: function getItemStyle(t, e) {
      var n = wy(this, t, e),
          i = this.getBorderLineDash();return i && (n.lineDash = i), n;
    }, getBorderLineDash: function getBorderLineDash() {
      var t = this.get("borderType");return "solid" === t || null == t ? null : "dashed" === t ? [5, 5] : [1, 1];
    } },
      Sy = c,
      My = sr();co.prototype = { constructor: co, init: null, mergeOption: function mergeOption(t) {
      r(this.option, t, !0);
    }, get: function get(t, e) {
      return null == t ? this.option : fo(this.option, this.parsePath(t), !e && po(this, t));
    }, getShallow: function getShallow(t, e) {
      var n = this.option,
          i = null == n ? n : n[t],
          r = !e && po(this, t);return null == i && r && (i = r.getShallow(t)), i;
    }, getModel: function getModel(t, e) {
      var n,
          i = null == t ? this.option : fo(this.option, t = this.parsePath(t));return e = e || (n = po(this, t)) && n.getModel(t), new co(i, e, this.ecModel);
    }, isEmpty: function isEmpty() {
      return null == this.option;
    }, restoreData: function restoreData() {}, clone: function clone() {
      var t = this.constructor;return new t(i(this.option));
    }, setReadOnly: function setReadOnly() {}, parsePath: function parsePath(t) {
      return "string" == typeof t && (t = t.split(".")), t;
    }, customizeGetParent: function customizeGetParent(t) {
      My(this).getParent = t;
    }, isAnimationEnabled: function isAnimationEnabled() {
      if (!sp.node) {
        if (null != this.option.animation) return !!this.option.animation;if (this.parentModel) return this.parentModel.isAnimationEnabled();
      }
    } }, gr(co), vr(co), Sy(co, kv), Sy(co, Lv), Sy(co, _y), Sy(co, by);var Ay = 0,
      Iy = 1e-4,
      Ty = 9007199254740991,
      Cy = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/,
      Dy = (Object.freeze || Object)({ linearMap: xo, parsePercent: _o, round: wo, asc: bo, getPrecision: So, getPrecisionSafe: Mo, getPixelPrecision: Ao, getPercentWithPrecision: Io, MAX_SAFE_INTEGER: Ty, remRadian: To, isRadianAroundZero: Co, parseDate: Do, quantity: ko, quantityExponent: Po, nice: Lo, quantile: Oo, reformIntervals: Eo, isNumeric: Bo }),
      ky = L,
      Py = /([&<>"'])/g,
      Ly = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" },
      Oy = ["a", "b", "c", "d", "e", "f", "g"],
      Ey = function Ey(t, e) {
    return "{" + t + (null == e ? "" : e) + "}";
  },
      By = Kn,
      zy = (Object.freeze || Object)({ addCommas: zo, toCamelCase: Ro, normalizeCssArray: ky, encodeHTML: No, formatTpl: Fo, formatTplSimple: Vo, getTooltipMarker: Ho, formatTime: Go, capitalFirst: Xo, truncateText: By, getTextBoundingRect: Uo, getTextRect: Yo, windowOpen: qo }),
      Ry = f,
      Ny = ["left", "right", "top", "bottom", "width", "height"],
      Fy = [["width", "left", "right"], ["height", "top", "bottom"]],
      Vy = (x(jo, "vertical"), x(jo, "horizontal"), { getBoxLayoutParams: function getBoxLayoutParams() {
      return { left: this.get("left"), top: this.get("top"), right: this.get("right"), bottom: this.get("bottom"), width: this.get("width"), height: this.get("height") };
    } }),
      Hy = sr(),
      Wy = co.extend({ type: "component", id: "", name: "", mainType: "", subType: "", componentIndex: 0, defaultOption: null, ecModel: null, dependentModels: [], uid: null, layoutMode: null, $constructor: function $constructor(t, e, n, i) {
      co.call(this, t, e, n, i), this.uid = go("ec_cpt_model");
    }, init: function init(t, e, n) {
      this.mergeDefaultAndTheme(t, n);
    }, mergeDefaultAndTheme: function mergeDefaultAndTheme(t, e) {
      var n = this.layoutMode,
          i = n ? $o(t) : {},
          a = e.getTheme();r(t, a.get(this.mainType)), r(t, this.getDefaultOption()), n && Ko(t, i, n);
    }, mergeOption: function mergeOption(t) {
      r(this.option, t, !0);var e = this.layoutMode;e && Ko(this.option, t, e);
    }, optionUpdated: function optionUpdated() {}, getDefaultOption: function getDefaultOption() {
      var t = Hy(this);if (!t.defaultOption) {
        for (var e = [], n = this.constructor; n;) {
          var i = n.prototype.defaultOption;i && e.push(i), n = n.superClass;
        }for (var a = {}, o = e.length - 1; o >= 0; o--) {
          a = r(a, e[o], !0);
        }t.defaultOption = a;
      }return t.defaultOption;
    }, getReferringComponents: function getReferringComponents(t) {
      return this.ecModel.queryComponents({ mainType: t, index: this.get(t + "Index", !0), id: this.get(t + "Id", !0) });
    } });xr(Wy, { registerWhenExtend: !0 }), vo(Wy), mo(Wy, Jo), c(Wy, Vy);var Gy = "";"undefined" != typeof navigator && (Gy = navigator.platform || "");var Xy = { color: ["#c23531", "#2f4554", "#61a0a8", "#d48265", "#91c7ae", "#749f83", "#ca8622", "#bda29a", "#6e7074", "#546570", "#c4ccd3"], gradientColor: ["#f6efa6", "#d88273", "#bf444c"], textStyle: { fontFamily: Gy.match(/^Win/) ? "Microsoft YaHei" : "sans-serif", fontSize: 12, fontStyle: "normal", fontWeight: "normal" }, blendMode: null, animation: "auto", animationDuration: 1e3, animationDurationUpdate: 300, animationEasing: "exponentialOut", animationEasingUpdate: "cubicOut", animationThreshold: 2e3, progressiveThreshold: 3e3, progressive: 400, hoverLayerThreshold: 3e3, useUTC: !1 },
      Uy = sr(),
      Yy = { clearColorPalette: function clearColorPalette() {
      Uy(this).colorIdx = 0, Uy(this).colorNameMap = {};
    }, getColorFromPalette: function getColorFromPalette(t, e, n) {
      e = e || this;var i = Uy(e),
          r = i.colorIdx || 0,
          a = i.colorNameMap = i.colorNameMap || {};if (a.hasOwnProperty(t)) return a[t];var o = Qi(this.get("color", !0)),
          s = this.get("colorLayer", !0),
          l = null != n && s ? ts(s, n) : o;if (l = l || o, l && l.length) {
        var u = l[r];return t && (a[t] = u), i.colorIdx = (r + 1) % l.length, u;
      }
    } },
      qy = "original",
      jy = "arrayRows",
      Zy = "objectRows",
      Ky = "keyedColumns",
      $y = "unknown",
      Qy = "typedArray",
      Jy = "column",
      tx = "row";es.seriesDataToSource = function (t) {
    return new es({ data: t, sourceFormat: A(t) ? Qy : qy, fromDataset: !1 });
  }, vr(es);var ex = { Must: 1, Might: 2, Not: 3 },
      nx = sr(),
      ix = "\x00_ec_inner",
      rx = co.extend({ init: function init(t, e, n, i) {
      n = n || {}, this.option = null, this._theme = new co(n), this._optionManager = i;
    }, setOption: function setOption(t, e) {
      O(!(ix in t), "please use chart.getOption()"), this._optionManager.setOption(t, e), this.resetOption(null);
    }, resetOption: function resetOption(t) {
      var e = !1,
          n = this._optionManager;if (!t || "recreate" === t) {
        var i = n.mountOption("recreate" === t);this.option && "recreate" !== t ? (this.restoreData(), this.mergeOption(i)) : ms.call(this, i), e = !0;
      }if (("timeline" === t || "media" === t) && this.restoreData(), !t || "recreate" === t || "timeline" === t) {
        var r = n.getTimelineOption(this);r && (this.mergeOption(r), e = !0);
      }if (!t || "recreate" === t || "media" === t) {
        var a = n.getMediaOption(this, this._api);a.length && f(a, function (t) {
          this.mergeOption(t, e = !0);
        }, this);
      }return e;
    }, mergeOption: function mergeOption(t) {
      function e(e, i) {
        var r = Qi(t[e]),
            s = nr(a.get(e), r);ir(s), f(s, function (t) {
          var n = t.option;S(n) && (t.keyInfo.mainType = e, t.keyInfo.subType = xs(e, n, t.exist));
        });var l = ys(a, i);n[e] = [], a.set(e, []), f(s, function (t, i) {
          var r = t.exist,
              s = t.option;if (O(S(s) || r, "Empty component definition"), s) {
            var u = Wy.getClass(e, t.keyInfo.subType, !0);if (r && r.constructor === u) r.name = t.keyInfo.name, r.mergeOption(s, this), r.optionUpdated(s, !1);else {
              var h = o({ dependentModels: l, componentIndex: i }, t.keyInfo);r = new u(s, this, this, h), o(r, h), r.init(s, this, this, h), r.optionUpdated(null, !0);
            }
          } else r.mergeOption({}, this), r.optionUpdated({}, !1);a.get(e)[i] = r, n[e][i] = r.option;
        }, this), "series" === e && _s(this, a.get("series"));
      }var n = this.option,
          a = this._componentsMap,
          s = [];rs(this), f(t, function (t, e) {
        null != t && (Wy.hasClass(e) ? e && s.push(e) : n[e] = null == n[e] ? i(t) : r(n[e], t, !0));
      }), Wy.topologicalTravel(s, Wy.getAllClassMainTypes(), e, this), this._seriesIndicesMap = N(this._seriesIndices = this._seriesIndices || []);
    }, getOption: function getOption() {
      var t = i(this.option);return f(t, function (e, n) {
        if (Wy.hasClass(n)) {
          for (var e = Qi(e), i = e.length - 1; i >= 0; i--) {
            ar(e[i]) && e.splice(i, 1);
          }t[n] = e;
        }
      }), delete t[ix], t;
    }, getTheme: function getTheme() {
      return this._theme;
    }, getComponent: function getComponent(t, e) {
      var n = this._componentsMap.get(t);return n ? n[e || 0] : void 0;
    }, queryComponents: function queryComponents(t) {
      var e = t.mainType;if (!e) return [];var n = t.index,
          i = t.id,
          r = t.name,
          a = this._componentsMap.get(e);if (!a || !a.length) return [];var o;if (null != n) _(n) || (n = [n]), o = v(p(n, function (t) {
        return a[t];
      }), function (t) {
        return !!t;
      });else if (null != i) {
        var s = _(i);o = v(a, function (t) {
          return s && u(i, t.id) >= 0 || !s && t.id === i;
        });
      } else if (null != r) {
        var l = _(r);o = v(a, function (t) {
          return l && u(r, t.name) >= 0 || !l && t.name === r;
        });
      } else o = a.slice();return ws(o, t);
    }, findComponents: function findComponents(t) {
      function e(t) {
        var e = r + "Index",
            n = r + "Id",
            i = r + "Name";return !t || null == t[e] && null == t[n] && null == t[i] ? null : { mainType: r, index: t[e], id: t[n], name: t[i] };
      }function n(e) {
        return t.filter ? v(e, t.filter) : e;
      }var i = t.query,
          r = t.mainType,
          a = e(i),
          o = a ? this.queryComponents(a) : this._componentsMap.get(r);return n(ws(o, t));
    }, eachComponent: function eachComponent(t, e, n) {
      var i = this._componentsMap;if ("function" == typeof t) n = e, e = t, i.each(function (t, i) {
        f(t, function (t, r) {
          e.call(n, i, t, r);
        });
      });else if (b(t)) f(i.get(t), e, n);else if (S(t)) {
        var r = this.findComponents(t);f(r, e, n);
      }
    }, getSeriesByName: function getSeriesByName(t) {
      var e = this._componentsMap.get("series");return v(e, function (e) {
        return e.name === t;
      });
    }, getSeriesByIndex: function getSeriesByIndex(t) {
      return this._componentsMap.get("series")[t];
    }, getSeriesByType: function getSeriesByType(t) {
      var e = this._componentsMap.get("series");return v(e, function (e) {
        return e.subType === t;
      });
    }, getSeries: function getSeries() {
      return this._componentsMap.get("series").slice();
    }, getSeriesCount: function getSeriesCount() {
      return this._componentsMap.get("series").length;
    }, eachSeries: function eachSeries(t, e) {
      bs(this), f(this._seriesIndices, function (n) {
        var i = this._componentsMap.get("series")[n];t.call(e, i, n);
      }, this);
    }, eachRawSeries: function eachRawSeries(t, e) {
      f(this._componentsMap.get("series"), t, e);
    }, eachSeriesByType: function eachSeriesByType(t, e, n) {
      bs(this), f(this._seriesIndices, function (i) {
        var r = this._componentsMap.get("series")[i];r.subType === t && e.call(n, r, i);
      }, this);
    }, eachRawSeriesByType: function eachRawSeriesByType(t, e, n) {
      return f(this.getSeriesByType(t), e, n);
    }, isSeriesFiltered: function isSeriesFiltered(t) {
      return bs(this), null == this._seriesIndicesMap.get(t.componentIndex);
    }, getCurrentSeriesIndices: function getCurrentSeriesIndices() {
      return (this._seriesIndices || []).slice();
    }, filterSeries: function filterSeries(t, e) {
      bs(this);var n = v(this._componentsMap.get("series"), t, e);_s(this, n);
    }, restoreData: function restoreData(t) {
      var e = this._componentsMap;_s(this, e.get("series"));var n = [];e.each(function (t, e) {
        n.push(e);
      }), Wy.topologicalTravel(n, Wy.getAllClassMainTypes(), function (n) {
        f(e.get(n), function (e) {
          ("series" !== n || !gs(e, t)) && e.restoreData();
        });
      });
    } });c(rx, Yy);var ax = ["getDom", "getZr", "getWidth", "getHeight", "getDevicePixelRatio", "dispatchAction", "isDisposed", "on", "off", "getDataURL", "getConnectedDataURL", "getModel", "getOption", "getViewOfComponentModel", "getViewOfSeriesModel"],
      ox = {};Ms.prototype = { constructor: Ms, create: function create(t, e) {
      var n = [];f(ox, function (i) {
        var r = i.create(t, e);n = n.concat(r || []);
      }), this._coordinateSystems = n;
    }, update: function update(t, e) {
      f(this._coordinateSystems, function (n) {
        n.update && n.update(t, e);
      });
    }, getCoordinateSystems: function getCoordinateSystems() {
      return this._coordinateSystems.slice();
    } }, Ms.register = function (t, e) {
    ox[t] = e;
  }, Ms.get = function (t) {
    return ox[t];
  };var sx = f,
      lx = i,
      ux = p,
      hx = r,
      cx = /^(min|max)?(.+)$/;As.prototype = { constructor: As, setOption: function setOption(t, e) {
      t && f(Qi(t.series), function (t) {
        t && t.data && A(t.data) && B(t.data);
      }), t = lx(t);var n = this._optionBackup,
          i = Is.call(this, t, e, !n);this._newBaseOption = i.baseOption, n ? (ks(n.baseOption, i.baseOption), i.timelineOptions.length && (n.timelineOptions = i.timelineOptions), i.mediaList.length && (n.mediaList = i.mediaList), i.mediaDefault && (n.mediaDefault = i.mediaDefault)) : this._optionBackup = i;
    }, mountOption: function mountOption(t) {
      var e = this._optionBackup;return this._timelineOptions = ux(e.timelineOptions, lx), this._mediaList = ux(e.mediaList, lx), this._mediaDefault = lx(e.mediaDefault), this._currentMediaIndices = [], lx(t ? e.baseOption : this._newBaseOption);
    }, getTimelineOption: function getTimelineOption(t) {
      var e,
          n = this._timelineOptions;if (n.length) {
        var i = t.getComponent("timeline");i && (e = lx(n[i.getCurrentIndex()], !0));
      }return e;
    }, getMediaOption: function getMediaOption() {
      var t = this._api.getWidth(),
          e = this._api.getHeight(),
          n = this._mediaList,
          i = this._mediaDefault,
          r = [],
          a = [];if (!n.length && !i) return a;for (var o = 0, s = n.length; s > o; o++) {
        Ts(n[o].query, t, e) && r.push(o);
      }return !r.length && i && (r = [-1]), r.length && !Ds(r, this._currentMediaIndices) && (a = ux(r, function (t) {
        return lx(-1 === t ? i.option : n[t].option);
      })), this._currentMediaIndices = r, a;
    } };var dx = f,
      fx = S,
      px = ["areaStyle", "lineStyle", "nodeStyle", "linkStyle", "chordStyle", "label", "labelLine"],
      gx = function gx(t, e) {
    dx(Rs(t.series), function (t) {
      fx(t) && zs(t);
    });var n = ["xAxis", "yAxis", "radiusAxis", "angleAxis", "singleAxis", "parallelAxis", "radar"];e && n.push("valueAxis", "categoryAxis", "logAxis", "timeAxis"), dx(n, function (e) {
      dx(Rs(t[e]), function (t) {
        t && (Es(t, "axisLabel"), Es(t.axisPointer, "label"));
      });
    }), dx(Rs(t.parallel), function (t) {
      var e = t && t.parallelAxisDefault;Es(e, "axisLabel"), Es(e && e.axisPointer, "label");
    }), dx(Rs(t.calendar), function (t) {
      Ls(t, "itemStyle"), Es(t, "dayLabel"), Es(t, "monthLabel"), Es(t, "yearLabel");
    }), dx(Rs(t.radar), function (t) {
      Es(t, "name");
    }), dx(Rs(t.geo), function (t) {
      fx(t) && (Bs(t), dx(Rs(t.regions), function (t) {
        Bs(t);
      }));
    }), dx(Rs(t.timeline), function (t) {
      Bs(t), Ls(t, "label"), Ls(t, "itemStyle"), Ls(t, "controlStyle", !0);var e = t.data;_(e) && f(e, function (t) {
        S(t) && (Ls(t, "label"), Ls(t, "itemStyle"));
      });
    }), dx(Rs(t.toolbox), function (t) {
      Ls(t, "iconStyle"), dx(t.feature, function (t) {
        Ls(t, "iconStyle");
      });
    }), Es(Ns(t.axisPointer), "label"), Es(Ns(t.tooltip).axisPointer, "label");
  },
      vx = [["x", "left"], ["y", "top"], ["x2", "right"], ["y2", "bottom"]],
      mx = ["grid", "geo", "parallel", "legend", "toolbox", "title", "visualMap", "dataZoom", "timeline"],
      yx = function yx(t, e) {
    gx(t, e), t.series = Qi(t.series), f(t.series, function (t) {
      if (S(t)) {
        var e = t.type;if ("line" === e) null != t.clipOverflow && (t.clip = t.clipOverflow);else if ("pie" === e || "gauge" === e) null != t.clockWise && (t.clockwise = t.clockWise);else if ("gauge" === e) {
          var n = Fs(t, "pointer.color");null != n && Vs(t, "itemStyle.color", n);
        }Hs(t);
      }
    }), t.dataRange && (t.visualMap = t.dataRange), f(mx, function (e) {
      var n = t[e];n && (_(n) || (n = [n]), f(n, function (t) {
        Hs(t);
      }));
    });
  },
      xx = function xx(t) {
    var e = N();t.eachSeries(function (t) {
      var n = t.get("stack");if (n) {
        var i = e.get(n) || e.set(n, []),
            r = t.getData(),
            a = { stackResultDimension: r.getCalculationInfo("stackResultDimension"), stackedOverDimension: r.getCalculationInfo("stackedOverDimension"), stackedDimension: r.getCalculationInfo("stackedDimension"), stackedByDimension: r.getCalculationInfo("stackedByDimension"), isStackedByIndex: r.getCalculationInfo("isStackedByIndex"), data: r, seriesModel: t };if (!a.stackedDimension || !a.isStackedByIndex && !a.stackedByDimension) return;i.length && r.setCalculationInfo("stackedOnSeries", i[i.length - 1].seriesModel), i.push(a);
      }
    }), e.each(Ws);
  },
      _x = Gs.prototype;_x.pure = !1, _x.persistent = !0, _x.getSource = function () {
    return this._source;
  };var bx = { arrayRows_column: { pure: !0, count: function count() {
        return Math.max(0, this._data.length - this._source.startIndex);
      }, getItem: function getItem(t) {
        return this._data[t + this._source.startIndex];
      }, appendData: Ys }, arrayRows_row: { pure: !0, count: function count() {
        var t = this._data[0];return t ? Math.max(0, t.length - this._source.startIndex) : 0;
      }, getItem: function getItem(t) {
        t += this._source.startIndex;for (var e = [], n = this._data, i = 0; i < n.length; i++) {
          var r = n[i];e.push(r ? r[t] : null);
        }return e;
      }, appendData: function appendData() {
        throw new Error('Do not support appendData when set seriesLayoutBy: "row".');
      } }, objectRows: { pure: !0, count: Xs, getItem: Us, appendData: Ys }, keyedColumns: { pure: !0, count: function count() {
        var t = this._source.dimensionsDefine[0].name,
            e = this._data[t];return e ? e.length : 0;
      }, getItem: function getItem(t) {
        for (var e = [], n = this._source.dimensionsDefine, i = 0; i < n.length; i++) {
          var r = this._data[n[i].name];e.push(r ? r[t] : null);
        }return e;
      }, appendData: function appendData(t) {
        var e = this._data;f(t, function (t, n) {
          for (var i = e[n] || (e[n] = []), r = 0; r < (t || []).length; r++) {
            i.push(t[r]);
          }
        });
      } }, original: { count: Xs, getItem: Us, appendData: Ys }, typedArray: { persistent: !1, pure: !0, count: function count() {
        return this._data ? this._data.length / this._dimSize : 0;
      }, getItem: function getItem(t, e) {
        t -= this._offset, e = e || [];for (var n = this._dimSize * t, i = 0; i < this._dimSize; i++) {
          e[i] = this._data[n + i];
        }return e;
      }, appendData: function appendData(t) {
        ip && O(A(t), "Added data must be TypedArray if data in initialization is TypedArray"), this._data = t;
      }, clean: function clean() {
        this._offset += this.count(), this._data = null;
      } } },
      Sx = { arrayRows: qs, objectRows: function objectRows(t, e, n, i) {
      return null != n ? t[i] : t;
    }, keyedColumns: qs, original: function original(t, e, n) {
      var i = tr(t);return null != n && i instanceof Array ? i[n] : i;
    }, typedArray: qs },
      Mx = { arrayRows: js, objectRows: function objectRows(t, e) {
      return Zs(t[e], this._dimensionInfos[e]);
    }, keyedColumns: js, original: function original(t, e, n, i) {
      var r = t && (null == t.value ? t : t.value);return !this._rawData.pure && er(t) && (this.hasItemOption = !0), Zs(r instanceof Array ? r[i] : r, this._dimensionInfos[e]);
    }, typedArray: function typedArray(t, e, n, i) {
      return t[i];
    } },
      Ax = /\{@(.+?)\}/g,
      Ix = { getDataParams: function getDataParams(t, e) {
      var n = this.getData(e),
          i = this.getRawValue(t, e),
          r = n.getRawIndex(t),
          a = n.getName(t),
          o = n.getRawDataItem(t),
          s = n.getItemVisual(t, "color"),
          l = n.getItemVisual(t, "borderColor"),
          u = this.ecModel.getComponent("tooltip"),
          h = u && u.get("renderMode"),
          c = dr(h),
          d = this.mainType,
          f = "series" === d,
          p = n.userOutput;return { componentType: d, componentSubType: this.subType, componentIndex: this.componentIndex, seriesType: f ? this.subType : null, seriesIndex: this.seriesIndex, seriesId: f ? this.id : null, seriesName: f ? this.name : null, name: a, dataIndex: r, data: o, dataType: e, value: i, color: s, borderColor: l, dimensionNames: p ? p.dimensionNames : null, encode: p ? p.encode : null, marker: Ho({ color: s, renderMode: c }), $vars: ["seriesName", "name", "value"] };
    }, getFormattedLabel: function getFormattedLabel(t, e, n, i, r) {
      e = e || "normal";var a = this.getData(n),
          o = a.getItemModel(t),
          s = this.getDataParams(t, n);null != i && s.value instanceof Array && (s.value = s.value[i]);var l = o.get("normal" === e ? [r || "label", "formatter"] : [e, r || "label", "formatter"]);if ("function" == typeof l) return s.status = e, s.dimensionIndex = i, l(s);if ("string" == typeof l) {
        var u = Fo(l, s);return u.replace(Ax, function (e, n) {
          var i = n.length;return "[" === n.charAt(0) && "]" === n.charAt(i - 1) && (n = +n.slice(1, i - 1)), Ks(a, t, n);
        });
      }
    }, getRawValue: function getRawValue(t, e) {
      return Ks(this.getData(e), t);
    }, formatTooltip: function formatTooltip() {} },
      Tx = Js.prototype;Tx.perform = function (t) {
    function e(t) {
      return !(t >= 1) && (t = 1), t;
    }var n = this._upstream,
        i = t && t.skip;if (this._dirty && n) {
      var r = this.context;r.data = r.outputData = n.context.outputData;
    }this.__pipeline && (this.__pipeline.currentTask = this);var a;this._plan && !i && (a = this._plan(this.context));var o = e(this._modBy),
        s = this._modDataCount || 0,
        l = e(t && t.modBy),
        u = t && t.modDataCount || 0;(o !== l || s !== u) && (a = "reset");var h;(this._dirty || "reset" === a) && (this._dirty = !1, h = el(this, i)), this._modBy = l, this._modDataCount = u;var c = t && t.step;if (n ? (ip && O(null != n._outputDueEnd), this._dueEnd = n._outputDueEnd) : (ip && O(!this._progress || this._count), this._dueEnd = this._count ? this._count(this.context) : 1 / 0), this._progress) {
      var d = this._dueIndex,
          f = Math.min(null != c ? this._dueIndex + c : 1 / 0, this._dueEnd);if (!i && (h || f > d)) {
        var p = this._progress;if (_(p)) for (var g = 0; g < p.length; g++) {
          tl(this, p[g], d, f, l, u);
        } else tl(this, p, d, f, l, u);
      }this._dueIndex = f;var v = null != this._settedOutputEnd ? this._settedOutputEnd : f;ip && O(v >= this._outputDueEnd), this._outputDueEnd = v;
    } else this._dueIndex = this._outputDueEnd = null != this._settedOutputEnd ? this._settedOutputEnd : this._dueEnd;return this.unfinished();
  };var Cx = function () {
    function t() {
      return n > i ? i++ : null;
    }function e() {
      var t = i % o * r + Math.ceil(i / o),
          e = i >= n ? null : a > t ? t : i;return i++, e;
    }var n,
        i,
        r,
        a,
        o,
        s = { reset: function reset(l, u, h, c) {
        i = l, n = u, r = h, a = c, o = Math.ceil(a / r), s.next = r > 1 && a > 0 ? e : t;
      } };return s;
  }();Tx.dirty = function () {
    this._dirty = !0, this._onDirty && this._onDirty(this.context);
  }, Tx.unfinished = function () {
    return this._progress && this._dueIndex < this._dueEnd;
  }, Tx.pipe = function (t) {
    ip && O(t && !t._disposed && t !== this), (this._downstream !== t || this._dirty) && (this._downstream = t, t._upstream = this, t.dirty());
  }, Tx.dispose = function () {
    this._disposed || (this._upstream && (this._upstream._downstream = null), this._downstream && (this._downstream._upstream = null), this._dirty = !1, this._disposed = !0);
  }, Tx.getUpstream = function () {
    return this._upstream;
  }, Tx.getDownstream = function () {
    return this._downstream;
  }, Tx.setOutputEnd = function (t) {
    this._outputDueEnd = this._settedOutputEnd = t;
  };var Dx = sr(),
      kx = Wy.extend({ type: "series.__base__", seriesIndex: 0, coordinateSystem: null, defaultOption: null, legendVisualProvider: null, visualColorAccessPath: "itemStyle.color", visualBorderColorAccessPath: "itemStyle.borderColor", layoutMode: null, init: function init(t, e, n) {
      this.seriesIndex = this.componentIndex, this.dataTask = Qs({ count: rl, reset: al }), this.dataTask.context = { model: this }, this.mergeDefaultAndTheme(t, n), as(this);var i = this.getInitialData(t, n);sl(i, this), this.dataTask.context.data = i, ip && O(i, "getInitialData returned invalid data."), Dx(this).dataBeforeProcessed = i, nl(this);
    }, mergeDefaultAndTheme: function mergeDefaultAndTheme(t, e) {
      var n = this.layoutMode,
          i = n ? $o(t) : {},
          a = this.subType;Wy.hasClass(a) && (a += "Series"), r(t, e.getTheme().get(this.subType)), r(t, this.getDefaultOption()), Ji(t, "label", ["show"]), this.fillDataTextStyle(t.data), n && Ko(t, i, n);
    }, mergeOption: function mergeOption(t, e) {
      t = r(this.option, t, !0), this.fillDataTextStyle(t.data);var n = this.layoutMode;n && Ko(this.option, t, n), as(this);var i = this.getInitialData(t, e);sl(i, this), this.dataTask.dirty(), this.dataTask.context.data = i, Dx(this).dataBeforeProcessed = i, nl(this);
    }, fillDataTextStyle: function fillDataTextStyle(t) {
      if (t && !A(t)) for (var e = ["show"], n = 0; n < t.length; n++) {
        t[n] && t[n].label && Ji(t[n], "label", e);
      }
    }, getInitialData: function getInitialData() {}, appendData: function appendData(t) {
      var e = this.getRawData();e.appendData(t.data);
    }, getData: function getData(t) {
      var e = ul(this);if (e) {
        var n = e.context.data;return null == t ? n : n.getLinkedData(t);
      }return Dx(this).data;
    }, setData: function setData(t) {
      var e = ul(this);if (e) {
        var n = e.context;n.data !== t && e.modifyOutputEnd && e.setOutputEnd(t.count()), n.outputData = t, e !== this.dataTask && (n.data = t);
      }Dx(this).data = t;
    }, getSource: function getSource() {
      return is(this);
    }, getRawData: function getRawData() {
      return Dx(this).dataBeforeProcessed;
    }, getBaseAxis: function getBaseAxis() {
      var t = this.coordinateSystem;return t && t.getBaseAxis && t.getBaseAxis();
    }, formatTooltip: function formatTooltip(t, e, n, i) {
      function r(n) {
        function r(t, n) {
          var r = c.getDimensionInfo(n);if (r && r.otherDims.tooltip !== !1) {
            var d = r.type,
                f = "sub" + o.seriesIndex + "at" + h,
                p = Ho({ color: y, type: "subItem", renderMode: i, markerId: f }),
                g = "string" == typeof p ? p : p.content,
                v = (a ? g + No(r.displayName || "-") + ": " : "") + No("ordinal" === d ? t + "" : "time" === d ? e ? "" : Go("yyyy/MM/dd hh:mm:ss", t) : zo(t));v && s.push(v), l && (u[f] = y, ++h);
          }
        }var a = g(n, function (t, e, n) {
          var i = c.getDimensionInfo(n);return t |= i && i.tooltip !== !1 && null != i.displayName;
        }, 0),
            s = [];d.length ? f(d, function (e) {
          r(Ks(c, t, e), e);
        }) : f(n, r);var p = a ? l ? "\n" : "<br/>" : "",
            v = p + s.join(p || ", ");return { renderMode: i, content: v, style: u };
      }function a(t) {
        return { renderMode: i, content: No(zo(t)), style: u };
      }var o = this;i = i || "html";var s = "html" === i ? "<br/>" : "\n",
          l = "richText" === i,
          u = {},
          h = 0,
          c = this.getData(),
          d = c.mapDimension("defaultedTooltip", !0),
          p = d.length,
          v = this.getRawValue(t),
          m = _(v),
          y = c.getItemVisual(t, "color");S(y) && y.colorStops && (y = (y.colorStops[0] || {}).color), y = y || "transparent";var x = p > 1 || m && !p ? r(v) : a(p ? Ks(c, t, d[0]) : m ? v[0] : v),
          w = x.content,
          b = o.seriesIndex + "at" + h,
          M = Ho({ color: y, type: "item", renderMode: i, markerId: b });u[b] = y, ++h;var A = c.getName(t),
          I = this.name;rr(this) || (I = ""), I = I ? No(I) + (e ? ": " : s) : "";var T = "string" == typeof M ? M : M.content,
          C = e ? T + I + w : I + T + (A ? No(A) + ": " + w : w);return { html: C, markers: u };
    }, isAnimationEnabled: function isAnimationEnabled() {
      if (sp.node) return !1;var t = this.getShallow("animation");return t && this.getData().count() > this.getShallow("animationThreshold") && (t = !1), t;
    }, restoreData: function restoreData() {
      this.dataTask.dirty();
    }, getColorFromPalette: function getColorFromPalette(t, e, n) {
      var i = this.ecModel,
          r = Yy.getColorFromPalette.call(this, t, e, n);return r || (r = i.getColorFromPalette(t, e, n)), r;
    }, coordDimToDataDim: function coordDimToDataDim(t) {
      return this.getRawData().mapDimension(t, !0);
    }, getProgressive: function getProgressive() {
      return this.get("progressive");
    }, getProgressiveThreshold: function getProgressiveThreshold() {
      return this.get("progressiveThreshold");
    }, getAxisTooltipData: null, getTooltipPosition: null, pipeTask: null, preventIncremental: null, pipelineContext: null });c(kx, Ix), c(kx, Yy);var Px = function Px() {
    this.group = new _g(), this.uid = go("viewComponent");
  };Px.prototype = { constructor: Px, init: function init() {}, render: function render() {}, dispose: function dispose() {}, filterForExposedEvent: null };var Lx = Px.prototype;Lx.updateView = Lx.updateLayout = Lx.updateVisual = function () {}, gr(Px), xr(Px, { registerWhenExtend: !0 });var Ox = function Ox() {
    var t = sr();return function (e) {
      var n = t(e),
          i = e.pipelineContext,
          r = n.large,
          a = n.progressiveRender,
          o = n.large = i && i.large,
          s = n.progressiveRender = i && i.progressiveRender;return !!(r ^ o || a ^ s) && "reset";
    };
  },
      Ex = sr(),
      Bx = Ox();hl.prototype = { type: "chart", init: function init() {}, render: function render() {}, highlight: function highlight(t, e, n, i) {
      dl(t.getData(), i, "emphasis");
    }, downplay: function downplay(t, e, n, i) {
      dl(t.getData(), i, "normal");
    }, remove: function remove() {
      this.group.removeAll();
    }, dispose: function dispose() {}, incrementalPrepareRender: null, incrementalRender: null, updateTransform: null, filterForExposedEvent: null };var zx = hl.prototype;zx.updateView = zx.updateLayout = zx.updateVisual = function (t, e, n, i) {
    this.render(t, e, n, i);
  }, gr(hl, ["dispose"]), xr(hl, { registerWhenExtend: !0 }), hl.markUpdateMethod = function (t, e) {
    Ex(t).updateMethod = e;
  };var Rx = { incrementalPrepareRender: { progress: function progress(t, e) {
        e.view.incrementalRender(t, e.model, e.ecModel, e.api, e.payload);
      } }, render: { forceFirstProgress: !0, progress: function progress(t, e) {
        e.view.render(e.model, e.ecModel, e.api, e.payload);
      } } },
      Nx = "\x00__throttleOriginMethod",
      Fx = "\x00__throttleRate",
      Vx = "\x00__throttleType",
      Hx = { createOnAllSeries: !0, performRawSeries: !0, reset: function reset(t, e) {
      var n = t.getData(),
          i = (t.visualColorAccessPath || "itemStyle.color").split("."),
          r = t.get(i),
          a = !w(r) || r instanceof ty ? null : r;(!r || a) && (r = t.getColorFromPalette(t.name, null, e.getSeriesCount())), n.setVisual("color", r);var o = (t.visualBorderColorAccessPath || "itemStyle.borderColor").split("."),
          s = t.get(o);if (n.setVisual("borderColor", s), !e.isSeriesFiltered(t)) {
        a && n.each(function (e) {
          n.setItemVisual(e, "color", a(t.getDataParams(e)));
        });var l = function l(t, e) {
          var n = t.getItemModel(e),
              r = n.get(i, !0),
              a = n.get(o, !0);null != r && t.setItemVisual(e, "color", r), null != a && t.setItemVisual(e, "borderColor", a);
        };return { dataEach: n.hasItemOption ? l : null };
      }
    } },
      Wx = { legend: { selector: { all: "全选", inverse: "反选" } }, toolbox: { brush: { title: { rect: "矩形选择", polygon: "圈选", lineX: "横向选择", lineY: "纵向选择", keep: "保持选择", clear: "清除选择" } }, dataView: { title: "数据视图", lang: ["数据视图", "关闭", "刷新"] }, dataZoom: { title: { zoom: "区域缩放", back: "区域缩放还原" } }, magicType: { title: { line: "切换为折线图", bar: "切换为柱状图", stack: "切换为堆叠", tiled: "切换为平铺" } }, restore: { title: "还原" }, saveAsImage: { title: "保存为图片", lang: ["右键另存为图片"] } }, series: { typeNames: { pie: "饼图", bar: "柱状图", line: "折线图", scatter: "散点图", effectScatter: "涟漪散点图", radar: "雷达图", tree: "树图", treemap: "矩形树图", boxplot: "箱型图", candlestick: "K线图", k: "K线图", heatmap: "热力图", map: "地图", parallel: "平行坐标图", lines: "线图", graph: "关系图", sankey: "桑基图", funnel: "漏斗图", gauge: "仪表盘图", pictorialBar: "象形柱图", themeRiver: "主题河流图", sunburst: "旭日图" } }, aria: { general: { withTitle: "这是一个关于“{title}”的图表。", withoutTitle: "这是一个图表，" }, series: { single: { prefix: "", withName: "图表类型是{seriesType}，表示{seriesName}。", withoutName: "图表类型是{seriesType}。" }, multiple: { prefix: "它由{seriesCount}个图表系列组成。", withName: "第{seriesId}个系列是一个表示{seriesName}的{seriesType}，", withoutName: "第{seriesId}个系列是一个{seriesType}，", separator: { middle: "；", end: "。" } } }, data: { allData: "其数据是——", partialData: "其中，前{displayCnt}项是——", withName: "{name}的数据是{value}", withoutName: "{value}", separator: { middle: "，", end: "" } } } },
      Gx = function Gx(t, e) {
    function n(t, e) {
      if ("string" != typeof t) return t;var n = t;return f(e, function (t, e) {
        n = n.replace(new RegExp("\\{\\s*" + e + "\\s*\\}", "g"), t);
      }), n;
    }function i(t) {
      var e = o.get(t);if (null == e) {
        for (var n = t.split("."), i = Wx.aria, r = 0; r < n.length; ++r) {
          i = i[n[r]];
        }return i;
      }return e;
    }function r() {
      var t = e.getModel("title").option;return t && t.length && (t = t[0]), t && t.text;
    }function a(t) {
      return Wx.series.typeNames[t] || "自定义图";
    }var o = e.getModel("aria");if (o.get("show")) {
      if (o.get("description")) return void t.setAttribute("aria-label", o.get("description"));var s = 0;e.eachSeries(function () {
        ++s;
      }, this);var l,
          u = o.get("data.maxCount") || 10,
          h = o.get("series.maxCount") || 10,
          c = Math.min(s, h);if (!(1 > s)) {
        var d = r();l = d ? n(i("general.withTitle"), { title: d }) : i("general.withoutTitle");var p = [],
            g = s > 1 ? "series.multiple.prefix" : "series.single.prefix";l += n(i(g), { seriesCount: s }), e.eachSeries(function (t, e) {
          if (c > e) {
            var r,
                o = t.get("name"),
                l = "series." + (s > 1 ? "multiple" : "single") + ".";r = i(o ? l + "withName" : l + "withoutName"), r = n(r, { seriesId: t.seriesIndex, seriesName: t.get("name"), seriesType: a(t.subType) });var h = t.getData();window.data = h, r += h.count() > u ? n(i("data.partialData"), { displayCnt: u }) : i("data.allData");for (var d = [], f = 0; f < h.count(); f++) {
              if (u > f) {
                var g = h.getName(f),
                    v = Ks(h, f);d.push(n(i(g ? "data.withName" : "data.withoutName"), { name: g, value: v }));
              }
            }r += d.join(i("data.separator.middle")) + i("data.separator.end"), p.push(r);
          }
        }), l += p.join(i("series.multiple.separator.middle")) + i("series.multiple.separator.end"), t.setAttribute("aria-label", l);
      }
    }
  },
      Xx = Math.PI,
      Ux = function Ux(t, e) {
    e = e || {}, s(e, { text: "loading", textColor: "#000", fontSize: "12px", maskColor: "rgba(255, 255, 255, 0.8)", showSpinner: !0, color: "#c23531", spinnerRadius: 10, lineWidth: 5, zlevel: 0 });var n = new _g(),
        i = new qm({ style: { fill: e.maskColor }, zlevel: e.zlevel, z: 1e4 });n.add(i);var r = e.fontSize + " sans-serif",
        a = new qm({ style: { fill: "none", text: e.text, font: r, textPosition: "right", textDistance: 10, textFill: e.textColor }, zlevel: e.zlevel, z: 10001 });if (n.add(a), e.showSpinner) {
      var o = new Qm({ shape: { startAngle: -Xx / 2, endAngle: -Xx / 2 + .1, r: e.spinnerRadius }, style: { stroke: e.color, lineCap: "round", lineWidth: e.lineWidth }, zlevel: e.zlevel, z: 10001 });o.animateShape(!0).when(1e3, { endAngle: 3 * Xx / 2 }).start("circularInOut"), o.animateShape(!0).when(1e3, { startAngle: 3 * Xx / 2 }).delay(300).start("circularInOut"), n.add(o);
    }return n.resize = function () {
      var n = Gn(e.text, r),
          s = e.showSpinner ? e.spinnerRadius : 0,
          l = (t.getWidth() - 2 * s - (e.showSpinner && n ? 10 : 0) - n) / 2 - (e.showSpinner ? 0 : n / 2),
          u = t.getHeight() / 2;e.showSpinner && o.setShape({ cx: l, cy: u }), a.setShape({ x: l - s, y: u - s, width: 2 * s, height: 2 * s }), i.setShape({ x: 0, y: 0, width: t.getWidth(), height: t.getHeight() });
    }, n.resize(), n;
  },
      Yx = ml.prototype;Yx.restoreData = function (t, e) {
    t.restoreData(e), this._stageTaskMap.each(function (t) {
      var e = t.overallTask;e && e.dirty();
    });
  }, Yx.getPerformArgs = function (t, e) {
    if (t.__pipeline) {
      var n = this._pipelineMap.get(t.__pipeline.id),
          i = n.context,
          r = !e && n.progressiveEnabled && (!i || i.progressiveRender) && t.__idxInPipeline > n.blockIndex,
          a = r ? n.step : null,
          o = i && i.modDataCount,
          s = null != o ? Math.ceil(o / a) : null;return { step: a, modBy: s, modDataCount: o };
    }
  }, Yx.getPipeline = function (t) {
    return this._pipelineMap.get(t);
  }, Yx.updateStreamModes = function (t, e) {
    var n = this._pipelineMap.get(t.uid),
        i = t.getData(),
        r = i.count(),
        a = n.progressiveEnabled && e.incrementalPrepareRender && r >= n.threshold,
        o = t.get("large") && r >= t.get("largeThreshold"),
        s = "mod" === t.get("progressiveChunkMode") ? r : null;t.pipelineContext = n.context = { progressiveRender: a, modDataCount: s, large: o };
  }, Yx.restorePipelines = function (t) {
    var e = this,
        n = e._pipelineMap = N();t.eachSeries(function (t) {
      var i = t.getProgressive(),
          r = t.uid;n.set(r, { id: r, head: null, tail: null, threshold: t.getProgressiveThreshold(), progressiveEnabled: i && !(t.preventIncremental && t.preventIncremental()), blockIndex: -1, step: Math.round(i || 700), count: 0 }), Dl(e, t, t.dataTask);
    });
  }, Yx.prepareStageTasks = function () {
    var t = this._stageTaskMap,
        e = this.ecInstance.getModel(),
        n = this.api;f(this._allHandlers, function (i) {
      var r = t.get(i.uid) || t.set(i.uid, []);i.reset && xl(this, i, r, e, n), i.overallReset && _l(this, i, r, e, n);
    }, this);
  }, Yx.prepareView = function (t, e, n, i) {
    var r = t.renderTask,
        a = r.context;a.model = e, a.ecModel = n, a.api = i, r.__block = !t.incrementalPrepareRender, Dl(this, e, r);
  }, Yx.performDataProcessorTasks = function (t, e) {
    yl(this, this._dataProcessorHandlers, t, e, { block: !0 });
  }, Yx.performVisualTasks = function (t, e, n) {
    yl(this, this._visualHandlers, t, e, n);
  }, Yx.performSeriesTasks = function (t) {
    var e;t.eachSeries(function (t) {
      e |= t.dataTask.perform();
    }), this.unfinished |= e;
  }, Yx.plan = function () {
    this._pipelineMap.each(function (t) {
      var e = t.tail;do {
        if (e.__block) {
          t.blockIndex = e.__idxInPipeline;break;
        }e = e.getUpstream();
      } while (e);
    });
  };var qx = Yx.updatePayload = function (t, e) {
    "remain" !== e && (t.context.payload = e);
  },
      jx = Tl(0);ml.wrapStageHandler = function (t, e) {
    return w(t) && (t = { overallReset: t, seriesType: kl(t) }), t.uid = go("stageHandler"), e && (t.visualType = e), t;
  };var Zx,
      Kx = {},
      $x = {};Pl(Kx, rx), Pl($x, Ss), Kx.eachSeriesByType = Kx.eachRawSeriesByType = function (t) {
    Zx = t;
  }, Kx.eachComponent = function (t) {
    "series" === t.mainType && t.subType && (Zx = t.subType);
  };var Qx = ["#37A2DA", "#32C5E9", "#67E0E3", "#9FE6B8", "#FFDB5C", "#ff9f7f", "#fb7293", "#E062AE", "#E690D1", "#e7bcf3", "#9d96f5", "#8378EA", "#96BFFF"],
      Jx = { color: Qx, colorLayer: [["#37A2DA", "#ffd85c", "#fd7b5f"], ["#37A2DA", "#67E0E3", "#FFDB5C", "#ff9f7f", "#E062AE", "#9d96f5"], ["#37A2DA", "#32C5E9", "#9FE6B8", "#FFDB5C", "#ff9f7f", "#fb7293", "#e7bcf3", "#8378EA", "#96BFFF"], Qx] },
      t_ = "#eee",
      e_ = function e_() {
    return { axisLine: { lineStyle: { color: t_ } }, axisTick: { lineStyle: { color: t_ } }, axisLabel: { textStyle: { color: t_ } }, splitLine: { lineStyle: { type: "dashed", color: "#aaa" } }, splitArea: { areaStyle: { color: t_ } } };
  },
      n_ = ["#dd6b66", "#759aa0", "#e69d87", "#8dc1a9", "#ea7e53", "#eedd78", "#73a373", "#73b9bc", "#7289ab", "#91ca8c", "#f49f42"],
      i_ = { color: n_, backgroundColor: "#333", tooltip: { axisPointer: { lineStyle: { color: t_ }, crossStyle: { color: t_ }, label: { color: "#000" } } }, legend: { textStyle: { color: t_ } }, textStyle: { color: t_ }, title: { textStyle: { color: t_ } }, toolbox: { iconStyle: { normal: { borderColor: t_ } } }, dataZoom: { textStyle: { color: t_ } }, visualMap: { textStyle: { color: t_ } }, timeline: { lineStyle: { color: t_ }, itemStyle: { normal: { color: n_[1] } }, label: { normal: { textStyle: { color: t_ } } }, controlStyle: { normal: { color: t_, borderColor: t_ } } }, timeAxis: e_(), logAxis: e_(), valueAxis: e_(), categoryAxis: e_(), line: { symbol: "circle" }, graph: { color: n_ }, gauge: { title: { textStyle: { color: t_ } } }, candlestick: { itemStyle: { normal: { color: "#FD1050", color0: "#0CF49B", borderColor: "#FD1050", borderColor0: "#0CF49B" } } } };i_.categoryAxis.splitLine.show = !1, Wy.extend({ type: "dataset", defaultOption: { seriesLayoutBy: Jy, sourceHeader: null, dimensions: null, source: null }, optionUpdated: function optionUpdated() {
      ns(this);
    } }), Px.extend({ type: "dataset" });var r_ = Jr.extend({ type: "ellipse", shape: { cx: 0, cy: 0, rx: 0, ry: 0 }, buildPath: function buildPath(t, e) {
      var n = .5522848,
          i = e.cx,
          r = e.cy,
          a = e.rx,
          o = e.ry,
          s = a * n,
          l = o * n;t.moveTo(i - a, r), t.bezierCurveTo(i - a, r - l, i - s, r - o, i, r - o), t.bezierCurveTo(i + s, r - o, i + a, r - l, i + a, r), t.bezierCurveTo(i + a, r + l, i + s, r + o, i, r + o), t.bezierCurveTo(i - s, r + o, i - a, r + l, i - a, r), t.closePath();
    } }),
      a_ = /[\s,]+/;Ol.prototype.parse = function (t, e) {
    e = e || {};var n = Ll(t);if (!n) throw new Error("Illegal svg");var i = new _g();this._root = i;var r = n.getAttribute("viewBox") || "",
        a = parseFloat(n.getAttribute("width") || e.width),
        o = parseFloat(n.getAttribute("height") || e.height);isNaN(a) && (a = null), isNaN(o) && (o = null), Rl(n, i, null, !0);for (var s = n.firstChild; s;) {
      this._parseNode(s, i), s = s.nextSibling;
    }var l, u;if (r) {
      var h = E(r).split(a_);h.length >= 4 && (l = { x: parseFloat(h[0] || 0), y: parseFloat(h[1] || 0), width: parseFloat(h[2]), height: parseFloat(h[3]) });
    }if (l && null != a && null != o && (u = Hl(l, a, o), !e.ignoreViewBox)) {
      var c = i;i = new _g(), i.add(c), c.scale = u.scale.slice(), c.position = u.position.slice();
    }return e.ignoreRootClip || null == a || null == o || i.setClipPath(new qm({ shape: { x: 0, y: 0, width: a, height: o } })), { root: i, width: a, height: o, viewBoxRect: l, viewBoxTransform: u };
  }, Ol.prototype._parseNode = function (t, e) {
    var n = t.nodeName.toLowerCase();"defs" === n ? this._isDefine = !0 : "text" === n && (this._isText = !0);var i;if (this._isDefine) {
      var r = s_[n];if (r) {
        var a = r.call(this, t),
            o = t.getAttribute("id");o && (this._defs[o] = a);
      }
    } else {
      var r = o_[n];r && (i = r.call(this, t, e), e.add(i));
    }for (var s = t.firstChild; s;) {
      1 === s.nodeType && this._parseNode(s, i), 3 === s.nodeType && this._isText && this._parseText(s, i), s = s.nextSibling;
    }"defs" === n ? this._isDefine = !1 : "text" === n && (this._isText = !1);
  }, Ol.prototype._parseText = function (t, e) {
    if (1 === t.nodeType) {
      var n = t.getAttribute("dx") || 0,
          i = t.getAttribute("dy") || 0;this._textX += parseFloat(n), this._textY += parseFloat(i);
    }var r = new Bm({ style: { text: t.textContent, transformText: !0 }, position: [this._textX || 0, this._textY || 0] });Bl(e, r), Rl(t, r, this._defs);var a = r.style.fontSize;a && 9 > a && (r.style.fontSize = 9, r.scale = r.scale || [1, 1], r.scale[0] *= a / 9, r.scale[1] *= a / 9);var o = r.getBoundingRect();return this._textX += o.width, e.add(r), r;
  };var o_ = { g: function g(t, e) {
      var n = new _g();return Bl(e, n), Rl(t, n, this._defs), n;
    }, rect: function rect(t, e) {
      var n = new qm();return Bl(e, n), Rl(t, n, this._defs), n.setShape({ x: parseFloat(t.getAttribute("x") || 0), y: parseFloat(t.getAttribute("y") || 0), width: parseFloat(t.getAttribute("width") || 0), height: parseFloat(t.getAttribute("height") || 0) }), n;
    }, circle: function circle(t, e) {
      var n = new zm();return Bl(e, n), Rl(t, n, this._defs), n.setShape({ cx: parseFloat(t.getAttribute("cx") || 0), cy: parseFloat(t.getAttribute("cy") || 0), r: parseFloat(t.getAttribute("r") || 0) }), n;
    }, line: function line(t, e) {
      var n = new Zm();return Bl(e, n), Rl(t, n, this._defs), n.setShape({ x1: parseFloat(t.getAttribute("x1") || 0), y1: parseFloat(t.getAttribute("y1") || 0), x2: parseFloat(t.getAttribute("x2") || 0), y2: parseFloat(t.getAttribute("y2") || 0) }), n;
    }, ellipse: function ellipse(t, e) {
      var n = new r_();return Bl(e, n), Rl(t, n, this._defs), n.setShape({ cx: parseFloat(t.getAttribute("cx") || 0), cy: parseFloat(t.getAttribute("cy") || 0), rx: parseFloat(t.getAttribute("rx") || 0), ry: parseFloat(t.getAttribute("ry") || 0) }), n;
    }, polygon: function polygon(t, e) {
      var n = t.getAttribute("points");n && (n = zl(n));var i = new Gm({ shape: { points: n || [] } });return Bl(e, i), Rl(t, i, this._defs), i;
    }, polyline: function polyline(t, e) {
      var n = new Jr();Bl(e, n), Rl(t, n, this._defs);var i = t.getAttribute("points");i && (i = zl(i));var r = new Xm({ shape: { points: i || [] } });return r;
    }, image: function image(t, e) {
      var n = new Ii();return Bl(e, n), Rl(t, n, this._defs), n.setStyle({ image: t.getAttribute("xlink:href"), x: t.getAttribute("x"), y: t.getAttribute("y"), width: t.getAttribute("width"), height: t.getAttribute("height") }), n;
    }, text: function text(t, e) {
      var n = t.getAttribute("x") || 0,
          i = t.getAttribute("y") || 0,
          r = t.getAttribute("dx") || 0,
          a = t.getAttribute("dy") || 0;this._textX = parseFloat(n) + parseFloat(r), this._textY = parseFloat(i) + parseFloat(a);var o = new _g();return Bl(e, o), Rl(t, o, this._defs), o;
    }, tspan: function tspan(t, e) {
      var n = t.getAttribute("x"),
          i = t.getAttribute("y");null != n && (this._textX = parseFloat(n)), null != i && (this._textY = parseFloat(i));var r = t.getAttribute("dx") || 0,
          a = t.getAttribute("dy") || 0,
          o = new _g();return Bl(e, o), Rl(t, o, this._defs), this._textX += r, this._textY += a, o;
    }, path: function path(t, e) {
      var n = t.getAttribute("d") || "",
          i = ia(n);return Bl(e, i), Rl(t, i, this._defs), i;
    } },
      s_ = { lineargradient: function lineargradient(t) {
      var e = parseInt(t.getAttribute("x1") || 0, 10),
          n = parseInt(t.getAttribute("y1") || 0, 10),
          i = parseInt(t.getAttribute("x2") || 10, 10),
          r = parseInt(t.getAttribute("y2") || 0, 10),
          a = new ey(e, n, i, r);return El(t, a), a;
    }, radialgradient: function radialgradient() {} },
      l_ = { fill: "fill", stroke: "stroke", "stroke-width": "lineWidth", opacity: "opacity", "fill-opacity": "fillOpacity", "stroke-opacity": "strokeOpacity", "stroke-dasharray": "lineDash", "stroke-dashoffset": "lineDashOffset", "stroke-linecap": "lineCap", "stroke-linejoin": "lineJoin", "stroke-miterlimit": "miterLimit", "font-family": "fontFamily", "font-size": "fontSize", "font-style": "fontStyle", "font-weight": "fontWeight", "text-align": "textAlign", "alignment-baseline": "textBaseline" },
      u_ = /url\(\s*#(.*?)\)/,
      h_ = /(translate|scale|rotate|skewX|skewY|matrix)\(([\-\s0-9\.e,]*)\)/g,
      c_ = /([^\s:;]+)\s*:\s*([^:;]+)/g,
      d_ = N(),
      f_ = { registerMap: function registerMap(t, e, n) {
      var i;return _(e) ? i = e : e.svg ? i = [{ type: "svg", source: e.svg, specialAreas: e.specialAreas }] : (e.geoJson && !e.features && (n = e.specialAreas, e = e.geoJson), i = [{ type: "geoJSON", source: e, specialAreas: n }]), f(i, function (t) {
        var e = t.type;"geoJson" === e && (e = t.type = "geoJSON");var n = p_[e];ip && O(n, "Illegal map type: " + e), n(t);
      }), d_.set(t, i);
    }, retrieveMap: function retrieveMap(t) {
      return d_.get(t);
    } },
      p_ = { geoJSON: function geoJSON(t) {
      var e = t.source;t.geoJSON = b(e) ? "undefined" != typeof JSON && JSON.parse ? JSON.parse(e) : new Function("return (" + e + ");")() : e;
    }, svg: function svg(t) {
      t.svgXML = Ll(t.source);
    } },
      g_ = O,
      v_ = f,
      m_ = w,
      y_ = S,
      x_ = Wy.parseClassType,
      __ = "4.9.0",
      w_ = { zrender: "4.3.2" },
      b_ = 1,
      S_ = 1e3,
      M_ = 800,
      A_ = 900,
      I_ = 5e3,
      T_ = 1e3,
      C_ = 1100,
      D_ = 2e3,
      k_ = 3e3,
      P_ = 3500,
      L_ = 4e3,
      O_ = 5e3,
      E_ = { PROCESSOR: { FILTER: S_, SERIES_FILTER: M_, STATISTIC: I_ }, VISUAL: { LAYOUT: T_, PROGRESSIVE_LAYOUT: C_, GLOBAL: D_, CHART: k_, POST_CHART_LAYOUT: P_, COMPONENT: L_, BRUSH: O_ } },
      B_ = "__flagInMainProcess",
      z_ = "__optionUpdated",
      R_ = /^[a-zA-Z0-9_]+$/;Gl.prototype.on = Wl("on", !0), Gl.prototype.off = Wl("off", !0), Gl.prototype.one = Wl("one", !0), c(Gl, Dp);var N_ = Xl.prototype;N_._onframe = function () {
    if (!this._disposed) {
      var t = this._scheduler;if (this[z_]) {
        var e = this[z_].silent;this[B_] = !0, Yl(this), F_.update.call(this), this[B_] = !1, this[z_] = !1, Kl.call(this, e), $l.call(this, e);
      } else if (t.unfinished) {
        var n = b_,
            i = this._model,
            r = this._api;t.unfinished = !1;do {
          var a = +new Date();t.performSeriesTasks(i), t.performDataProcessorTasks(i), jl(this, i), t.performVisualTasks(i), iu(this, this._model, r, "remain"), n -= +new Date() - a;
        } while (n > 0 && t.unfinished);t.unfinished || this._zr.flush();
      }
    }
  }, N_.getDom = function () {
    return this._dom;
  }, N_.getZr = function () {
    return this._zr;
  }, N_.setOption = function (t, e, n) {
    if (ip && g_(!this[B_], "`setOption` should not be called during main process."), this._disposed) return void au(this.id);var i;if (y_(e) && (n = e.lazyUpdate, i = e.silent, e = e.notMerge), this[B_] = !0, !this._model || e) {
      var r = new As(this._api),
          a = this._theme,
          o = this._model = new rx();o.scheduler = this._scheduler, o.init(null, null, a, r);
    }this._model.setOption(t, X_), n ? (this[z_] = { silent: i }, this[B_] = !1) : (Yl(this), F_.update.call(this), this._zr.flush(), this[z_] = !1, this[B_] = !1, Kl.call(this, i), $l.call(this, i));
  }, N_.setTheme = function () {
    console.error("ECharts#setTheme() is DEPRECATED in ECharts 3.0");
  }, N_.getModel = function () {
    return this._model;
  }, N_.getOption = function () {
    return this._model && this._model.getOption();
  }, N_.getWidth = function () {
    return this._zr.getWidth();
  }, N_.getHeight = function () {
    return this._zr.getHeight();
  }, N_.getDevicePixelRatio = function () {
    return this._zr.painter.dpr || window.devicePixelRatio || 1;
  }, N_.getRenderedCanvas = function (t) {
    if (sp.canvasSupported) {
      t = t || {}, t.pixelRatio = t.pixelRatio || 1, t.backgroundColor = t.backgroundColor || this._model.get("backgroundColor");var e = this._zr;return e.painter.getRenderedCanvas(t);
    }
  }, N_.getSvgDataURL = function () {
    if (sp.svgSupported) {
      var t = this._zr,
          e = t.storage.getDisplayList();return f(e, function (t) {
        t.stopAnimation(!0);
      }), t.painter.toDataURL();
    }
  }, N_.getDataURL = function (t) {
    if (this._disposed) return void au(this.id);t = t || {};var e = t.excludeComponents,
        n = this._model,
        i = [],
        r = this;v_(e, function (t) {
      n.eachComponent({ mainType: t }, function (t) {
        var e = r._componentsMap[t.__viewId];e.group.ignore || (i.push(e), e.group.ignore = !0);
      });
    });var a = "svg" === this._zr.painter.getType() ? this.getSvgDataURL() : this.getRenderedCanvas(t).toDataURL("image/" + (t && t.type || "png"));return v_(i, function (t) {
      t.group.ignore = !1;
    }), a;
  }, N_.getConnectedDataURL = function (t) {
    if (this._disposed) return void au(this.id);if (sp.canvasSupported) {
      var e = "svg" === t.type,
          n = this.group,
          r = Math.min,
          a = Math.max,
          o = 1 / 0;if (K_[n]) {
        var s = o,
            l = o,
            u = -o,
            h = -o,
            c = [],
            d = t && t.pixelRatio || 1;f(Z_, function (o) {
          if (o.group === n) {
            var d = e ? o.getZr().painter.getSvgDom().innerHTML : o.getRenderedCanvas(i(t)),
                f = o.getDom().getBoundingClientRect();s = r(f.left, s), l = r(f.top, l), u = a(f.right, u), h = a(f.bottom, h), c.push({ dom: d, left: f.left, top: f.top });
          }
        }), s *= d, l *= d, u *= d, h *= d;var p = u - s,
            g = h - l,
            v = yp(),
            m = qi(v, { renderer: e ? "svg" : "canvas" });if (m.resize({ width: p, height: g }), e) {
          var y = "";return v_(c, function (t) {
            var e = t.left - s,
                n = t.top - l;y += '<g transform="translate(' + e + "," + n + ')">' + t.dom + "</g>";
          }), m.painter.getSvgRoot().innerHTML = y, t.connectedBackgroundColor && m.painter.setBackgroundColor(t.connectedBackgroundColor), m.refreshImmediately(), m.painter.toDataURL();
        }return t.connectedBackgroundColor && m.add(new qm({ shape: { x: 0, y: 0, width: p, height: g }, style: { fill: t.connectedBackgroundColor } })), v_(c, function (t) {
          var e = new Ii({ style: { x: t.left * d - s, y: t.top * d - l, image: t.dom } });m.add(e);
        }), m.refreshImmediately(), v.toDataURL("image/" + (t && t.type || "png"));
      }return this.getDataURL(t);
    }
  }, N_.convertToPixel = x(Ul, "convertToPixel"), N_.convertFromPixel = x(Ul, "convertFromPixel"), N_.containPixel = function (t, e) {
    if (this._disposed) return void au(this.id);var n,
        i = this._model;return t = lr(i, t), f(t, function (t, i) {
      i.indexOf("Models") >= 0 && f(t, function (t) {
        var r = t.coordinateSystem;if (r && r.containPoint) n |= !!r.containPoint(e);else if ("seriesModels" === i) {
          var a = this._chartsMap[t.__viewId];a && a.containPoint ? n |= a.containPoint(e, t) : ip && console.warn(i + ": " + (a ? "The found component do not support containPoint." : "No view mapping to the found component."));
        } else ip && console.warn(i + ": containPoint is not supported");
      }, this);
    }, this), !!n;
  }, N_.getVisual = function (t, e) {
    var n = this._model;t = lr(n, t, { defaultMainType: "series" });var i = t.seriesModel;ip && (i || console.warn("There is no specified seires model"));var r = i.getData(),
        a = t.hasOwnProperty("dataIndexInside") ? t.dataIndexInside : t.hasOwnProperty("dataIndex") ? r.indexOfRawIndex(t.dataIndex) : null;return null != a ? r.getItemVisual(a, e) : r.getVisual(e);
  }, N_.getViewOfComponentModel = function (t) {
    return this._componentsMap[t.__viewId];
  }, N_.getViewOfSeriesModel = function (t) {
    return this._chartsMap[t.__viewId];
  };var F_ = { prepareAndUpdate: function prepareAndUpdate(t) {
      Yl(this), F_.update.call(this, t);
    }, update: function update(t) {
      var e = this._model,
          n = this._api,
          i = this._zr,
          r = this._coordSysMgr,
          a = this._scheduler;if (e) {
        a.restoreData(e, t), a.performSeriesTasks(e), r.create(e, n), a.performDataProcessorTasks(e, t), jl(this, e), r.update(e, n), tu(e), a.performVisualTasks(e, t), eu(this, e, n, t);var o = e.get("backgroundColor") || "transparent";if (sp.canvasSupported) i.setBackgroundColor(o);else {
          var s = Qe(o);o = ln(s, "rgb"), 0 === s[3] && (o = "transparent");
        }ru(e, n);
      }
    }, updateTransform: function updateTransform(t) {
      var e = this._model,
          n = this,
          i = this._api;if (e) {
        var r = [];e.eachComponent(function (a, o) {
          var s = n.getViewOfComponentModel(o);if (s && s.__alive) if (s.updateTransform) {
            var l = s.updateTransform(o, e, i, t);l && l.update && r.push(s);
          } else r.push(s);
        });var a = N();e.eachSeries(function (r) {
          var o = n._chartsMap[r.__viewId];if (o.updateTransform) {
            var s = o.updateTransform(r, e, i, t);s && s.update && a.set(r.uid, 1);
          } else a.set(r.uid, 1);
        }), tu(e), this._scheduler.performVisualTasks(e, t, { setDirty: !0, dirtyMap: a }), iu(n, e, i, t, a), ru(e, this._api);
      }
    }, updateView: function updateView(t) {
      var e = this._model;e && (hl.markUpdateMethod(t, "updateView"), tu(e), this._scheduler.performVisualTasks(e, t, { setDirty: !0 }), eu(this, this._model, this._api, t), ru(e, this._api));
    }, updateVisual: function updateVisual(t) {
      F_.update.call(this, t);
    }, updateLayout: function updateLayout(t) {
      F_.update.call(this, t);
    } };N_.resize = function (t) {
    if (ip && g_(!this[B_], "`resize` should not be called during main process."), this._disposed) return void au(this.id);this._zr.resize(t);var e = this._model;if (this._loadingFX && this._loadingFX.resize(), e) {
      var n = e.resetOption("media"),
          i = t && t.silent;this[B_] = !0, n && Yl(this), F_.update.call(this), this[B_] = !1, Kl.call(this, i), $l.call(this, i);
    }
  }, N_.showLoading = function (t, e) {
    if (this._disposed) return void au(this.id);if (y_(t) && (e = t, t = ""), t = t || "default", this.hideLoading(), !j_[t]) return void (ip && console.warn("Loading effects " + t + " not exists."));var n = j_[t](this._api, e),
        i = this._zr;this._loadingFX = n, i.add(n);
  }, N_.hideLoading = function () {
    return this._disposed ? void au(this.id) : (this._loadingFX && this._zr.remove(this._loadingFX), void (this._loadingFX = null));
  }, N_.makeActionFromEvent = function (t) {
    var e = o({}, t);return e.type = W_[t.type], e;
  }, N_.dispatchAction = function (t, e) {
    if (this._disposed) return void au(this.id);if (y_(e) || (e = { silent: !!e }), H_[t.type] && this._model) {
      if (this[B_]) return void this._pendingActions.push(t);Zl.call(this, t, e.silent), e.flush ? this._zr.flush(!0) : e.flush !== !1 && sp.browser.weChat && this._throttledZrFlush(), Kl.call(this, e.silent), $l.call(this, e.silent);
    }
  }, N_.appendData = function (t) {
    if (this._disposed) return void au(this.id);var e = t.seriesIndex,
        n = this.getModel(),
        i = n.getSeriesByIndex(e);ip && g_(t.data && i), i.appendData(t), this._scheduler.unfinished = !0;
  }, N_.on = Wl("on", !1), N_.off = Wl("off", !1), N_.one = Wl("one", !1);var V_ = ["click", "dblclick", "mouseover", "mouseout", "mousemove", "mousedown", "mouseup", "globalout", "contextmenu"];N_._initEvents = function () {
    v_(V_, function (t) {
      var e = function e(_e3) {
        var n,
            i = this.getModel(),
            r = _e3.target,
            a = "globalout" === t;if (a) n = {};else if (r && null != r.dataIndex) {
          var s = r.dataModel || i.getSeriesByIndex(r.seriesIndex);n = s && s.getDataParams(r.dataIndex, r.dataType, r) || {};
        } else r && r.eventData && (n = o({}, r.eventData));if (n) {
          var l = n.componentType,
              u = n.componentIndex;("markLine" === l || "markPoint" === l || "markArea" === l) && (l = "series", u = n.seriesIndex);var h = l && null != u && i.getComponent(l, u),
              c = h && this["series" === h.mainType ? "_chartsMap" : "_componentsMap"][h.__viewId];ip && (a || h && c || console.warn("model or view can not be found by params")), n.event = _e3, n.type = t, this._ecEventProcessor.eventInfo = { targetEl: r, packedEvent: n, model: h, view: c }, this.trigger(t, n);
        }
      };e.zrEventfulCallAtLast = !0, this._zr.on(t, e, this);
    }, this), v_(W_, function (t, e) {
      this._messageCenter.on(e, function (t) {
        this.trigger(e, t);
      }, this);
    }, this);
  }, N_.isDisposed = function () {
    return this._disposed;
  }, N_.clear = function () {
    return this._disposed ? void au(this.id) : void this.setOption({ series: [] }, !0);
  }, N_.dispose = function () {
    if (this._disposed) return void au(this.id);this._disposed = !0, hr(this.getDom(), J_, "");var t = this._api,
        e = this._model;v_(this._componentsViews, function (n) {
      n.dispose(e, t);
    }), v_(this._chartsViews, function (n) {
      n.dispose(e, t);
    }), this._zr.dispose(), delete Z_[this.id];
  }, c(Xl, Dp), hu.prototype = { constructor: hu, normalizeQuery: function normalizeQuery(t) {
      var e = {},
          n = {},
          i = {};if (b(t)) {
        var r = x_(t);e.mainType = r.main || null, e.subType = r.sub || null;
      } else {
        var a = ["Index", "Name", "Id"],
            o = { name: 1, dataIndex: 1, dataType: 1 };f(t, function (t, r) {
          for (var s = !1, l = 0; l < a.length; l++) {
            var u = a[l],
                h = r.lastIndexOf(u);if (h > 0 && h === r.length - u.length) {
              var c = r.slice(0, h);"data" !== c && (e.mainType = c, e[u.toLowerCase()] = t, s = !0);
            }
          }o.hasOwnProperty(r) && (n[r] = t, s = !0), s || (i[r] = t);
        });
      }return { cptQuery: e, dataQuery: n, otherQuery: i };
    }, filter: function filter(t, e) {
      function n(t, e, n, i) {
        return null == t[n] || e[i || n] === t[n];
      }var i = this.eventInfo;if (!i) return !0;var r = i.targetEl,
          a = i.packedEvent,
          o = i.model,
          s = i.view;if (!o || !s) return !0;var l = e.cptQuery,
          u = e.dataQuery;return n(l, o, "mainType") && n(l, o, "subType") && n(l, o, "index", "componentIndex") && n(l, o, "name") && n(l, o, "id") && n(u, a, "name") && n(u, a, "dataIndex") && n(u, a, "dataType") && (!s.filterForExposedEvent || s.filterForExposedEvent(t, e.otherQuery, r, a));
    }, afterTrigger: function afterTrigger() {
      this.eventInfo = null;
    } };var H_ = {},
      W_ = {},
      G_ = [],
      X_ = [],
      U_ = [],
      Y_ = [],
      q_ = {},
      j_ = {},
      Z_ = {},
      K_ = {},
      $_ = new Date() - 0,
      Q_ = new Date() - 0,
      J_ = "_echarts_instance_",
      tw = pu;Iu(D_, Hx), xu(yx), _u(A_, xx), Cu("default", Ux), bu({ type: "highlight", event: "highlight", update: "highlight" }, V), bu({ type: "downplay", event: "downplay", update: "downplay" }, V), yu("light", Jx), yu("dark", i_);var ew = {};Ru.prototype = { constructor: Ru, add: function add(t) {
      return this._add = t, this;
    }, update: function update(t) {
      return this._update = t, this;
    }, remove: function remove(t) {
      return this._remove = t, this;
    }, execute: function execute() {
      var t,
          e = this._old,
          n = this._new,
          i = {},
          r = {},
          a = [],
          o = [];for (Nu(e, i, a, "_oldKeyGetter", this), Nu(n, r, o, "_newKeyGetter", this), t = 0; t < e.length; t++) {
        var s = a[t],
            l = r[s];if (null != l) {
          var u = l.length;u ? (1 === u && (r[s] = null), l = l.shift()) : r[s] = null, this._update && this._update(l, t);
        } else this._remove && this._remove(t);
      }for (var t = 0; t < o.length; t++) {
        var s = o[t];if (r.hasOwnProperty(s)) {
          var l = r[s];if (null == l) continue;if (l.length) for (var h = 0, u = l.length; u > h; h++) {
            this._add && this._add(l[h]);
          } else this._add && this._add(l);
        }
      }
    } };var nw = N(["tooltip", "label", "itemName", "itemId", "seriesName"]),
      iw = S,
      rw = "undefined",
      aw = -1,
      ow = "e\x00\x00",
      sw = { "float": (typeof Float64Array === "undefined" ? "undefined" : _typeof(Float64Array)) === rw ? Array : Float64Array, "int": (typeof Int32Array === "undefined" ? "undefined" : _typeof(Int32Array)) === rw ? Array : Int32Array, ordinal: Array, number: Array, time: Array },
      lw = (typeof Uint32Array === "undefined" ? "undefined" : _typeof(Uint32Array)) === rw ? Array : Uint32Array,
      uw = (typeof Int32Array === "undefined" ? "undefined" : _typeof(Int32Array)) === rw ? Array : Int32Array,
      hw = (typeof Uint16Array === "undefined" ? "undefined" : _typeof(Uint16Array)) === rw ? Array : Uint16Array,
      cw = ["hasItemOption", "_nameList", "_idList", "_invertedIndicesMap", "_rawData", "_chunkSize", "_chunkCount", "_dimValueGetter", "_count", "_rawCount", "_nameDimIdx", "_idDimIdx"],
      dw = ["_extent", "_approximateExtent", "_rawExtent"],
      fw = function fw(t, e) {
    t = t || ["x", "y"];for (var n = {}, i = [], r = {}, a = 0; a < t.length; a++) {
      var o = t[a];b(o) ? o = new Gu({ name: o }) : o instanceof Gu || (o = new Gu(o));var s = o.name;o.type = o.type || "float", o.coordDim || (o.coordDim = s, o.coordDimIndex = 0), o.otherDims = o.otherDims || {}, i.push(s), n[s] = o, o.index = a, o.createInvertedIndices && (r[s] = []);
    }this.dimensions = i, this._dimensionInfos = n, this.hostModel = e, this.dataType, this._indices = null, this._count = 0, this._rawCount = 0, this._storage = {}, this._nameList = [], this._idList = [], this._optionModels = [], this._visual = {}, this._layout = {}, this._itemVisuals = [], this.hasItemVisual = {}, this._itemLayouts = [], this._graphicEls = [], this._chunkSize = 1e5, this._chunkCount = 0, this._rawData, this._rawExtent = {}, this._extent = {}, this._approximateExtent = {}, this._dimensionsSummary = Fu(this), this._invertedIndicesMap = r, this._calculationInfo = {}, this.userOutput = this._dimensionsSummary.userOutput;
  },
      pw = fw.prototype;pw.type = "list", pw.hasItemOption = !0, pw.getDimension = function (t) {
    return ("number" == typeof t || !isNaN(t) && !this._dimensionInfos.hasOwnProperty(t)) && (t = this.dimensions[t]), t;
  }, pw.getDimensionInfo = function (t) {
    return this._dimensionInfos[this.getDimension(t)];
  }, pw.getDimensionsOnCoord = function () {
    return this._dimensionsSummary.dataDimsOnCoord.slice();
  }, pw.mapDimension = function (t, e) {
    var n = this._dimensionsSummary;if (null == e) return n.encodeFirstDimNotExtra[t];var i = n.encode[t];return e === !0 ? (i || []).slice() : i && i[e];
  }, pw.initData = function (t, e, n) {
    var i = es.isInstance(t) || d(t);if (i && (t = new Gs(t, this.dimensions.length)), ip && !i && ("function" != typeof t.getItem || "function" != typeof t.count)) throw new Error("Inavlid data provider.");this._rawData = t, this._storage = {}, this._indices = null, this._nameList = e || [], this._idList = [], this._nameRepeatCount = {}, n || (this.hasItemOption = !1), this.defaultDimValueGetter = Mx[this._rawData.getSource().sourceFormat], this._dimValueGetter = n = n || this.defaultDimValueGetter, this._dimValueGetterArrayRows = Mx.arrayRows, this._rawExtent = {}, this._initDataFromProvider(0, t.count()), t.pure && (this.hasItemOption = !1);
  }, pw.getProvider = function () {
    return this._rawData;
  }, pw.appendData = function (t) {
    ip && O(!this._indices, "appendData can only be called on raw data.");var e = this._rawData,
        n = this.count();e.appendData(t);var i = e.count();e.persistent || (i += n), this._initDataFromProvider(n, i);
  }, pw.appendValues = function (t, e) {
    for (var n = this._chunkSize, i = this._storage, r = this.dimensions, a = r.length, o = this._rawExtent, s = this.count(), l = s + Math.max(t.length, e ? e.length : 0), u = this._chunkCount, h = 0; a > h; h++) {
      var c = r[h];o[c] || (o[c] = ih()), i[c] || (i[c] = []), qu(i, this._dimensionInfos[c], n, u, l), this._chunkCount = i[c].length;
    }for (var d = new Array(a), f = s; l > f; f++) {
      for (var p = f - s, g = Math.floor(f / n), v = f % n, m = 0; a > m; m++) {
        var c = r[m],
            y = this._dimValueGetterArrayRows(t[p] || d, c, p, m);i[c][g][v] = y;var x = o[c];y < x[0] && (x[0] = y), y > x[1] && (x[1] = y);
      }e && (this._nameList[f] = e[p]);
    }this._rawCount = this._count = l, this._extent = {}, ju(this);
  }, pw._initDataFromProvider = function (t, e) {
    if (!(t >= e)) {
      for (var n, i = this._chunkSize, r = this._rawData, a = this._storage, o = this.dimensions, s = o.length, l = this._dimensionInfos, u = this._nameList, h = this._idList, c = this._rawExtent, d = this._nameRepeatCount = {}, f = this._chunkCount, p = 0; s > p; p++) {
        var g = o[p];c[g] || (c[g] = ih());var v = l[g];0 === v.otherDims.itemName && (n = this._nameDimIdx = p), 0 === v.otherDims.itemId && (this._idDimIdx = p), a[g] || (a[g] = []), qu(a, v, i, f, e), this._chunkCount = a[g].length;
      }for (var m = new Array(s), y = t; e > y; y++) {
        m = r.getItem(y, m);for (var x = Math.floor(y / i), _ = y % i, w = 0; s > w; w++) {
          var g = o[w],
              b = a[g][x],
              S = this._dimValueGetter(m, g, y, w);b[_] = S;var M = c[g];S < M[0] && (M[0] = S), S > M[1] && (M[1] = S);
        }if (!r.pure) {
          var A = u[y];if (m && null == A) if (null != m.name) u[y] = A = m.name;else if (null != n) {
            var I = o[n],
                T = a[I][x];if (T) {
              A = T[_];var C = l[I].ordinalMeta;C && C.categories.length && (A = C.categories[A]);
            }
          }var D = null == m ? null : m.id;null == D && null != A && (d[A] = d[A] || 0, D = A, d[A] > 0 && (D += "__ec__" + d[A]), d[A]++), null != D && (h[y] = D);
        }
      }!r.persistent && r.clean && r.clean(), this._rawCount = this._count = e, this._extent = {}, ju(this);
    }
  }, pw.count = function () {
    return this._count;
  }, pw.getIndices = function () {
    var t,
        e = this._indices;if (e) {
      var n = e.constructor,
          i = this._count;if (n === Array) {
        t = new n(i);for (var r = 0; i > r; r++) {
          t[r] = e[r];
        }
      } else t = new n(e.buffer, 0, i);
    } else for (var n = Xu(this), t = new n(this.count()), r = 0; r < t.length; r++) {
      t[r] = r;
    }return t;
  }, pw.get = function (t, e) {
    if (!(e >= 0 && e < this._count)) return 0 / 0;var n = this._storage;if (!n[t]) return 0 / 0;e = this.getRawIndex(e);var i = Math.floor(e / this._chunkSize),
        r = e % this._chunkSize,
        a = n[t][i],
        o = a[r];return o;
  }, pw.getByRawIndex = function (t, e) {
    if (!(e >= 0 && e < this._rawCount)) return 0 / 0;var n = this._storage[t];if (!n) return 0 / 0;var i = Math.floor(e / this._chunkSize),
        r = e % this._chunkSize,
        a = n[i];return a[r];
  }, pw._getFast = function (t, e) {
    var n = Math.floor(e / this._chunkSize),
        i = e % this._chunkSize,
        r = this._storage[t][n];return r[i];
  }, pw.getValues = function (t, e) {
    var n = [];_(t) || (e = t, t = this.dimensions);for (var i = 0, r = t.length; r > i; i++) {
      n.push(this.get(t[i], e));
    }return n;
  }, pw.hasValue = function (t) {
    for (var e = this._dimensionsSummary.dataDimsOnCoord, n = 0, i = e.length; i > n; n++) {
      if (isNaN(this.get(e[n], t))) return !1;
    }return !0;
  }, pw.getDataExtent = function (t) {
    t = this.getDimension(t);var e = this._storage[t],
        n = ih();if (!e) return n;var i,
        r = this.count(),
        a = !this._indices;if (a) return this._rawExtent[t].slice();if (i = this._extent[t]) return i.slice();i = n;for (var o = i[0], s = i[1], l = 0; r > l; l++) {
      var u = this._getFast(t, this.getRawIndex(l));o > u && (o = u), u > s && (s = u);
    }return i = [o, s], this._extent[t] = i, i;
  }, pw.getApproximateExtent = function (t) {
    return t = this.getDimension(t), this._approximateExtent[t] || this.getDataExtent(t);
  }, pw.setApproximateExtent = function (t, e) {
    e = this.getDimension(e), this._approximateExtent[e] = t.slice();
  }, pw.getCalculationInfo = function (t) {
    return this._calculationInfo[t];
  }, pw.setCalculationInfo = function (t, e) {
    iw(t) ? o(this._calculationInfo, t) : this._calculationInfo[t] = e;
  }, pw.getSum = function (t) {
    var e = this._storage[t],
        n = 0;if (e) for (var i = 0, r = this.count(); r > i; i++) {
      var a = this.get(t, i);isNaN(a) || (n += a);
    }return n;
  }, pw.getMedian = function (t) {
    var e = [];this.each(t, function (t) {
      isNaN(t) || e.push(t);
    });var n = [].concat(e).sort(function (t, e) {
      return t - e;
    }),
        i = this.count();return 0 === i ? 0 : i % 2 === 1 ? n[(i - 1) / 2] : (n[i / 2] + n[i / 2 - 1]) / 2;
  }, pw.rawIndexOf = function (t, e) {
    var n = t && this._invertedIndicesMap[t];if (ip && !n) throw new Error("Do not supported yet");var i = n[e];return null == i || isNaN(i) ? aw : i;
  }, pw.indexOfName = function (t) {
    for (var e = 0, n = this.count(); n > e; e++) {
      if (this.getName(e) === t) return e;
    }return -1;
  }, pw.indexOfRawIndex = function (t) {
    if (t >= this._rawCount || 0 > t) return -1;if (!this._indices) return t;var e = this._indices,
        n = e[t];if (null != n && n < this._count && n === t) return t;for (var i = 0, r = this._count - 1; r >= i;) {
      var a = (i + r) / 2 | 0;if (e[a] < t) i = a + 1;else {
        if (!(e[a] > t)) return a;r = a - 1;
      }
    }return -1;
  }, pw.indicesOfNearest = function (t, e, n) {
    var i = this._storage,
        r = i[t],
        a = [];if (!r) return a;null == n && (n = 1 / 0);for (var o = 1 / 0, s = -1, l = 0, u = 0, h = this.count(); h > u; u++) {
      var c = e - this.get(t, u),
          d = Math.abs(c);n >= d && ((o > d || d === o && c >= 0 && 0 > s) && (o = d, s = c, l = 0), c === s && (a[l++] = u));
    }return a.length = l, a;
  }, pw.getRawIndex = Ku, pw.getRawDataItem = function (t) {
    if (this._rawData.persistent) return this._rawData.getItem(this.getRawIndex(t));for (var e = [], n = 0; n < this.dimensions.length; n++) {
      var i = this.dimensions[n];e.push(this.get(i, t));
    }return e;
  }, pw.getName = function (t) {
    var e = this.getRawIndex(t);return this._nameList[e] || Zu(this, this._nameDimIdx, e) || "";
  }, pw.getId = function (t) {
    return Qu(this, this.getRawIndex(t));
  }, pw.each = function (t, e, n, i) {
    if (this._count) {
      "function" == typeof t && (i = n, n = e, e = t, t = []), n = n || i || this, t = p(Ju(t), this.getDimension, this), ip && th(this, t);for (var r = t.length, a = 0; a < this.count(); a++) {
        switch (r) {case 0:
            e.call(n, a);break;case 1:
            e.call(n, this.get(t[0], a), a);break;case 2:
            e.call(n, this.get(t[0], a), this.get(t[1], a), a);break;default:
            for (var o = 0, s = []; r > o; o++) {
              s[o] = this.get(t[o], a);
            }s[o] = a, e.apply(n, s);}
      }
    }
  }, pw.filterSelf = function (t, e, n, i) {
    if (this._count) {
      "function" == typeof t && (i = n, n = e, e = t, t = []), n = n || i || this, t = p(Ju(t), this.getDimension, this), ip && th(this, t);for (var r = this.count(), a = Xu(this), o = new a(r), s = [], l = t.length, u = 0, h = t[0], c = 0; r > c; c++) {
        var d,
            f = this.getRawIndex(c);if (0 === l) d = e.call(n, c);else if (1 === l) {
          var g = this._getFast(h, f);d = e.call(n, g, c);
        } else {
          for (var v = 0; l > v; v++) {
            s[v] = this._getFast(h, f);
          }s[v] = c, d = e.apply(n, s);
        }d && (o[u++] = f);
      }return r > u && (this._indices = o), this._count = u, this._extent = {}, this.getRawIndex = this._indices ? $u : Ku, this;
    }
  }, pw.selectRange = function (t) {
    if (this._count) {
      var e = [];for (var n in t) {
        t.hasOwnProperty(n) && e.push(n);
      }ip && th(this, e);var i = e.length;if (i) {
        var r = this.count(),
            a = Xu(this),
            o = new a(r),
            s = 0,
            l = e[0],
            u = t[l][0],
            h = t[l][1],
            c = !1;if (!this._indices) {
          var d = 0;if (1 === i) {
            for (var f = this._storage[e[0]], p = 0; p < this._chunkCount; p++) {
              for (var g = f[p], v = Math.min(this._count - p * this._chunkSize, this._chunkSize), m = 0; v > m; m++) {
                var y = g[m];(y >= u && h >= y || isNaN(y)) && (o[s++] = d), d++;
              }
            }c = !0;
          } else if (2 === i) {
            for (var f = this._storage[l], x = this._storage[e[1]], _ = t[e[1]][0], w = t[e[1]][1], p = 0; p < this._chunkCount; p++) {
              for (var g = f[p], b = x[p], v = Math.min(this._count - p * this._chunkSize, this._chunkSize), m = 0; v > m; m++) {
                var y = g[m],
                    S = b[m];(y >= u && h >= y || isNaN(y)) && (S >= _ && w >= S || isNaN(S)) && (o[s++] = d), d++;
              }
            }c = !0;
          }
        }if (!c) if (1 === i) for (var m = 0; r > m; m++) {
          var M = this.getRawIndex(m),
              y = this._getFast(l, M);(y >= u && h >= y || isNaN(y)) && (o[s++] = M);
        } else for (var m = 0; r > m; m++) {
          for (var A = !0, M = this.getRawIndex(m), p = 0; i > p; p++) {
            var I = e[p],
                y = this._getFast(n, M);(y < t[I][0] || y > t[I][1]) && (A = !1);
          }A && (o[s++] = this.getRawIndex(m));
        }return r > s && (this._indices = o), this._count = s, this._extent = {}, this.getRawIndex = this._indices ? $u : Ku, this;
      }
    }
  }, pw.mapArray = function (t, e, n, i) {
    "function" == typeof t && (i = n, n = e, e = t, t = []), n = n || i || this;var r = [];return this.each(t, function () {
      r.push(e && e.apply(this, arguments));
    }, n), r;
  }, pw.map = function (t, e, n, i) {
    n = n || i || this, t = p(Ju(t), this.getDimension, this), ip && th(this, t);var r = eh(this, t);r._indices = this._indices, r.getRawIndex = r._indices ? $u : Ku;for (var a = r._storage, o = [], s = this._chunkSize, l = t.length, u = this.count(), h = [], c = r._rawExtent, d = 0; u > d; d++) {
      for (var f = 0; l > f; f++) {
        h[f] = this.get(t[f], d);
      }h[l] = d;var g = e && e.apply(n, h);if (null != g) {
        "object" != (typeof g === "undefined" ? "undefined" : _typeof(g)) && (o[0] = g, g = o);for (var v = this.getRawIndex(d), m = Math.floor(v / s), y = v % s, x = 0; x < g.length; x++) {
          var _ = t[x],
              w = g[x],
              b = c[_],
              S = a[_];S && (S[m][y] = w), w < b[0] && (b[0] = w), w > b[1] && (b[1] = w);
        }
      }
    }return r;
  }, pw.downSample = function (t, e, n, i) {
    for (var r = eh(this, [t]), a = r._storage, o = [], s = Math.floor(1 / e), l = a[t], u = this.count(), h = this._chunkSize, c = r._rawExtent[t], d = new (Xu(this))(u), f = 0, p = 0; u > p; p += s) {
      s > u - p && (s = u - p, o.length = s);for (var g = 0; s > g; g++) {
        var v = this.getRawIndex(p + g),
            m = Math.floor(v / h),
            y = v % h;o[g] = l[m][y];
      }var x = n(o),
          _ = this.getRawIndex(Math.min(p + i(o, x) || 0, u - 1)),
          w = Math.floor(_ / h),
          b = _ % h;l[w][b] = x, x < c[0] && (c[0] = x), x > c[1] && (c[1] = x), d[f++] = _;
    }return r._count = f, r._indices = d, r.getRawIndex = $u, r;
  }, pw.getItemModel = function (t) {
    var e = this.hostModel;return new co(this.getRawDataItem(t), e, e && e.ecModel);
  }, pw.diff = function (t) {
    var e = this;return new Ru(t ? t.getIndices() : [], this.getIndices(), function (e) {
      return Qu(t, e);
    }, function (t) {
      return Qu(e, t);
    });
  }, pw.getVisual = function (t) {
    var e = this._visual;return e && e[t];
  }, pw.setVisual = function (t, e) {
    if (iw(t)) for (var n in t) {
      t.hasOwnProperty(n) && this.setVisual(n, t[n]);
    } else this._visual = this._visual || {}, this._visual[t] = e;
  }, pw.setLayout = function (t, e) {
    if (iw(t)) for (var n in t) {
      t.hasOwnProperty(n) && this.setLayout(n, t[n]);
    } else this._layout[t] = e;
  }, pw.getLayout = function (t) {
    return this._layout[t];
  }, pw.getItemLayout = function (t) {
    return this._itemLayouts[t];
  }, pw.setItemLayout = function (t, e, n) {
    this._itemLayouts[t] = n ? o(this._itemLayouts[t] || {}, e) : e;
  }, pw.clearItemLayouts = function () {
    this._itemLayouts.length = 0;
  }, pw.getItemVisual = function (t, e, n) {
    var i = this._itemVisuals[t],
        r = i && i[e];
    return null != r || n ? r : this.getVisual(e);
  }, pw.setItemVisual = function (t, e, n) {
    var i = this._itemVisuals[t] || {},
        r = this.hasItemVisual;if (this._itemVisuals[t] = i, iw(e)) for (var a in e) {
      e.hasOwnProperty(a) && (i[a] = e[a], r[a] = !0);
    } else i[e] = n, r[e] = !0;
  }, pw.clearAllVisual = function () {
    this._visual = {}, this._itemVisuals = [], this.hasItemVisual = {};
  };var gw = function gw(t) {
    t.seriesIndex = this.seriesIndex, t.dataIndex = this.dataIndex, t.dataType = this.dataType;
  };pw.setItemGraphicEl = function (t, e) {
    var n = this.hostModel;e && (e.dataIndex = t, e.dataType = this.dataType, e.seriesIndex = n && n.seriesIndex, "group" === e.type && e.traverse(gw, e)), this._graphicEls[t] = e;
  }, pw.getItemGraphicEl = function (t) {
    return this._graphicEls[t];
  }, pw.eachItemGraphicEl = function (t, e) {
    f(this._graphicEls, function (n, i) {
      n && t && t.call(e, n, i);
    });
  }, pw.cloneShallow = function (t) {
    if (!t) {
      var e = p(this.dimensions, this.getDimensionInfo, this);t = new fw(e, this.hostModel);
    }if (t._storage = this._storage, Yu(t, this), this._indices) {
      var n = this._indices.constructor;t._indices = new n(this._indices);
    } else t._indices = null;return t.getRawIndex = t._indices ? $u : Ku, t;
  }, pw.wrapMethod = function (t, e) {
    var n = this[t];"function" == typeof n && (this.__wrappedMethods = this.__wrappedMethods || [], this.__wrappedMethods.push(t), this[t] = function () {
      var t = n.apply(this, arguments);return e.apply(this, [t].concat(P(arguments)));
    });
  }, pw.TRANSFERABLE_METHODS = ["cloneShallow", "downSample", "map"], pw.CHANGABLE_METHODS = ["filterSelf", "selectRange"];var vw = function vw(t, e) {
    return e = e || {}, rh(e.coordDimensions || [], t, { dimsDef: e.dimensionsDefine || t.dimensionsDefine, encodeDef: e.encodeDefine || t.encodeDefine, dimCount: e.dimensionsCount, encodeDefaulter: e.encodeDefaulter, generateCoord: e.generateCoord, generateCoordCount: e.generateCoordCount });
  },
      mw = { cartesian2d: function cartesian2d(t, e, n, i) {
      var r = t.getReferringComponents("xAxis")[0],
          a = t.getReferringComponents("yAxis")[0];if (ip) {
        if (!r) throw new Error('xAxis "' + C(t.get("xAxisIndex"), t.get("xAxisId"), 0) + '" not found');if (!a) throw new Error('yAxis "' + C(t.get("xAxisIndex"), t.get("yAxisId"), 0) + '" not found');
      }e.coordSysDims = ["x", "y"], n.set("x", r), n.set("y", a), uh(r) && (i.set("x", r), e.firstCategoryDimIndex = 0), uh(a) && (i.set("y", a), null == e.firstCategoryDimIndex & (e.firstCategoryDimIndex = 1));
    }, singleAxis: function singleAxis(t, e, n, i) {
      var r = t.getReferringComponents("singleAxis")[0];if (ip && !r) throw new Error("singleAxis should be specified.");e.coordSysDims = ["single"], n.set("single", r), uh(r) && (i.set("single", r), e.firstCategoryDimIndex = 0);
    }, polar: function polar(t, e, n, i) {
      var r = t.getReferringComponents("polar")[0],
          a = r.findAxisModel("radiusAxis"),
          o = r.findAxisModel("angleAxis");if (ip) {
        if (!o) throw new Error("angleAxis option not found");if (!a) throw new Error("radiusAxis option not found");
      }e.coordSysDims = ["radius", "angle"], n.set("radius", a), n.set("angle", o), uh(a) && (i.set("radius", a), e.firstCategoryDimIndex = 0), uh(o) && (i.set("angle", o), null == e.firstCategoryDimIndex && (e.firstCategoryDimIndex = 1));
    }, geo: function geo(t, e) {
      e.coordSysDims = ["lng", "lat"];
    }, parallel: function parallel(t, e, n, i) {
      var r = t.ecModel,
          a = r.getComponent("parallel", t.get("parallelIndex")),
          o = e.coordSysDims = a.dimensions.slice();f(a.parallelAxisIndex, function (t, a) {
        var s = r.getComponent("parallelAxis", t),
            l = o[a];n.set(l, s), uh(s) && null == e.firstCategoryDimIndex && (i.set(l, s), e.firstCategoryDimIndex = a);
      });
    } };vh.prototype.parse = function (t) {
    return t;
  }, vh.prototype.getSetting = function (t) {
    return this._setting[t];
  }, vh.prototype.contain = function (t) {
    var e = this._extent;return t >= e[0] && t <= e[1];
  }, vh.prototype.normalize = function (t) {
    var e = this._extent;return e[1] === e[0] ? .5 : (t - e[0]) / (e[1] - e[0]);
  }, vh.prototype.scale = function (t) {
    var e = this._extent;return t * (e[1] - e[0]) + e[0];
  }, vh.prototype.unionExtent = function (t) {
    var e = this._extent;t[0] < e[0] && (e[0] = t[0]), t[1] > e[1] && (e[1] = t[1]);
  }, vh.prototype.unionExtentFromData = function (t, e) {
    this.unionExtent(t.getApproximateExtent(e));
  }, vh.prototype.getExtent = function () {
    return this._extent.slice();
  }, vh.prototype.setExtent = function (t, e) {
    var n = this._extent;isNaN(t) || (n[0] = t), isNaN(e) || (n[1] = e);
  }, vh.prototype.isBlank = function () {
    return this._isBlank;
  }, vh.prototype.setBlank = function (t) {
    this._isBlank = t;
  }, vh.prototype.getLabel = null, gr(vh), xr(vh, { registerWhenExtend: !0 }), mh.createByAxisModel = function (t) {
    var e = t.option,
        n = e.data,
        i = n && p(n, xh);return new mh({ categories: i, needCollect: !i, deduplication: e.dedplication !== !1 });
  };var yw = mh.prototype;yw.getOrdinal = function (t) {
    return yh(this).get(t);
  }, yw.parseAndCollect = function (t) {
    var e,
        n = this._needCollect;if ("string" != typeof t && !n) return t;if (n && !this._deduplication) return e = this.categories.length, this.categories[e] = t, e;var i = yh(this);return e = i.get(t), null == e && (n ? (e = this.categories.length, this.categories[e] = t, i.set(t, e)) : e = 0 / 0), e;
  };var xw = vh.prototype,
      _w = vh.extend({ type: "ordinal", init: function init(t, e) {
      (!t || _(t)) && (t = new mh({ categories: t })), this._ordinalMeta = t, this._extent = e || [0, t.categories.length - 1];
    }, parse: function parse(t) {
      return "string" == typeof t ? this._ordinalMeta.getOrdinal(t) : Math.round(t);
    }, contain: function contain(t) {
      return t = this.parse(t), xw.contain.call(this, t) && null != this._ordinalMeta.categories[t];
    }, normalize: function normalize(t) {
      return xw.normalize.call(this, this.parse(t));
    }, scale: function scale(t) {
      return Math.round(xw.scale.call(this, t));
    }, getTicks: function getTicks() {
      for (var t = [], e = this._extent, n = e[0]; n <= e[1];) {
        t.push(n), n++;
      }return t;
    }, getLabel: function getLabel(t) {
      return this.isBlank() ? void 0 : this._ordinalMeta.categories[t];
    }, count: function count() {
      return this._extent[1] - this._extent[0] + 1;
    }, unionExtentFromData: function unionExtentFromData(t, e) {
      this.unionExtent(t.getApproximateExtent(e));
    }, getOrdinalMeta: function getOrdinalMeta() {
      return this._ordinalMeta;
    }, niceTicks: V, niceExtent: V });_w.create = function () {
    return new _w();
  };var ww = wo,
      bw = wo,
      Sw = vh.extend({ type: "interval", _interval: 0, _intervalPrecision: 2, setExtent: function setExtent(t, e) {
      var n = this._extent;isNaN(t) || (n[0] = parseFloat(t)), isNaN(e) || (n[1] = parseFloat(e));
    }, unionExtent: function unionExtent(t) {
      var e = this._extent;t[0] < e[0] && (e[0] = t[0]), t[1] > e[1] && (e[1] = t[1]), Sw.prototype.setExtent.call(this, e[0], e[1]);
    }, getInterval: function getInterval() {
      return this._interval;
    }, setInterval: function setInterval(t) {
      this._interval = t, this._niceExtent = this._extent.slice(), this._intervalPrecision = wh(t);
    }, getTicks: function getTicks(t) {
      var e = this._interval,
          n = this._extent,
          i = this._niceExtent,
          r = this._intervalPrecision,
          a = [];if (!e) return a;var o = 1e4;n[0] < i[0] && a.push(t ? bw(i[0] - e, r) : n[0]);for (var s = i[0]; s <= i[1] && (a.push(s), s = bw(s + e, r), s !== a[a.length - 1]);) {
        if (a.length > o) return [];
      }var l = a.length ? a[a.length - 1] : i[1];return n[1] > l && a.push(t ? bw(l + e, r) : n[1]), a;
    }, getMinorTicks: function getMinorTicks(t) {
      for (var e = this.getTicks(!0), n = [], i = this.getExtent(), r = 1; r < e.length; r++) {
        for (var a = e[r], o = e[r - 1], s = 0, l = [], u = a - o, h = u / t; t - 1 > s;) {
          var c = wo(o + (s + 1) * h);c > i[0] && c < i[1] && l.push(c), s++;
        }n.push(l);
      }return n;
    }, getLabel: function getLabel(t, e) {
      if (null == t) return "";var n = e && e.precision;return null == n ? n = Mo(t) || 0 : "auto" === n && (n = this._intervalPrecision), t = bw(t, n, !0), zo(t);
    }, niceTicks: function niceTicks(t, e, n) {
      t = t || 5;var i = this._extent,
          r = i[1] - i[0];if (isFinite(r)) {
        0 > r && (r = -r, i.reverse());var a = _h(i, t, e, n);this._intervalPrecision = a.intervalPrecision, this._interval = a.interval, this._niceExtent = a.niceTickExtent;
      }
    }, niceExtent: function niceExtent(t) {
      var e = this._extent;if (e[0] === e[1]) if (0 !== e[0]) {
        var n = e[0];t.fixMax ? e[0] -= n / 2 : (e[1] += n / 2, e[0] -= n / 2);
      } else e[1] = 1;var i = e[1] - e[0];isFinite(i) || (e[0] = 0, e[1] = 1), this.niceTicks(t.splitNumber, t.minInterval, t.maxInterval);var r = this._interval;t.fixMin || (e[0] = bw(Math.floor(e[0] / r) * r)), t.fixMax || (e[1] = bw(Math.ceil(e[1] / r) * r));
    } });Sw.create = function () {
    return new Sw();
  };var Mw = "__ec_stack_",
      Aw = .5,
      Iw = "undefined" != typeof Float32Array ? Float32Array : Array,
      Tw = { seriesType: "bar", plan: Ox(), reset: function reset(t) {
      function e(t, e) {
        for (var n, d = t.count, f = new Iw(2 * d), p = new Iw(2 * d), g = new Iw(d), v = [], m = [], y = 0, x = 0; null != (n = t.next());) {
          m[h] = e.get(s, n), m[1 - h] = e.get(l, n), v = i.dataToPoint(m, null, v), p[y] = u ? r.x + r.width : v[0], f[y++] = v[0], p[y] = u ? v[1] : r.y + r.height, f[y++] = v[1], g[x++] = n;
        }e.setLayout({ largePoints: f, largeDataIndices: g, largeBackgroundPoints: p, barWidth: c, valueAxisStart: Eh(a, o, !1), backgroundStart: u ? r.x : r.y, valueAxisHorizontal: u });
      }if (Lh(t) && Oh(t)) {
        var n = t.getData(),
            i = t.coordinateSystem,
            r = i.grid.getRect(),
            a = i.getBaseAxis(),
            o = i.getOtherAxis(a),
            s = n.mapDimension(o.dim),
            l = n.mapDimension(a.dim),
            u = o.isHorizontal(),
            h = u ? 0 : 1,
            c = kh(Ch([t]), a, t).width;return c > Aw || (c = Aw), { progress: e };
      }
    } },
      Cw = Sw.prototype,
      Dw = Math.ceil,
      kw = Math.floor,
      Pw = 1e3,
      Lw = 60 * Pw,
      Ow = 60 * Lw,
      Ew = 24 * Ow,
      Bw = function Bw(t, e, n, i) {
    for (; i > n;) {
      var r = n + i >>> 1;t[r][1] < e ? n = r + 1 : i = r;
    }return n;
  },
      zw = Sw.extend({ type: "time", getLabel: function getLabel(t) {
      var e = this._stepLvl,
          n = new Date(t);return Go(e[0], n, this.getSetting("useUTC"));
    }, niceExtent: function niceExtent(t) {
      var e = this._extent;if (e[0] === e[1] && (e[0] -= Ew, e[1] += Ew), e[1] === -1 / 0 && 1 / 0 === e[0]) {
        var n = new Date();e[1] = +new Date(n.getFullYear(), n.getMonth(), n.getDate()), e[0] = e[1] - Ew;
      }this.niceTicks(t.splitNumber, t.minInterval, t.maxInterval);var i = this._interval;t.fixMin || (e[0] = wo(kw(e[0] / i) * i)), t.fixMax || (e[1] = wo(Dw(e[1] / i) * i));
    }, niceTicks: function niceTicks(t, e, n) {
      t = t || 10;var i = this._extent,
          r = i[1] - i[0],
          a = r / t;null != e && e > a && (a = e), null != n && a > n && (a = n);var o = Rw.length,
          s = Bw(Rw, a, 0, o),
          l = Rw[Math.min(s, o - 1)],
          u = l[1];if ("year" === l[0]) {
        var h = r / u,
            c = Lo(h / t, !0);u *= c;
      }var d = this.getSetting("useUTC") ? 0 : 60 * new Date(+i[0] || +i[1]).getTimezoneOffset() * 1e3,
          f = [Math.round(Dw((i[0] - d) / u) * u + d), Math.round(kw((i[1] - d) / u) * u + d)];Sh(f, i), this._stepLvl = l, this._interval = u, this._niceExtent = f;
    }, parse: function parse(t) {
      return +Do(t);
    } });f(["contain", "normalize"], function (t) {
    zw.prototype[t] = function (e) {
      return Cw[t].call(this, this.parse(e));
    };
  });var Rw = [["hh:mm:ss", Pw], ["hh:mm:ss", 5 * Pw], ["hh:mm:ss", 10 * Pw], ["hh:mm:ss", 15 * Pw], ["hh:mm:ss", 30 * Pw], ["hh:mm\nMM-dd", Lw], ["hh:mm\nMM-dd", 5 * Lw], ["hh:mm\nMM-dd", 10 * Lw], ["hh:mm\nMM-dd", 15 * Lw], ["hh:mm\nMM-dd", 30 * Lw], ["hh:mm\nMM-dd", Ow], ["hh:mm\nMM-dd", 2 * Ow], ["hh:mm\nMM-dd", 6 * Ow], ["hh:mm\nMM-dd", 12 * Ow], ["MM-dd\nyyyy", Ew], ["MM-dd\nyyyy", 2 * Ew], ["MM-dd\nyyyy", 3 * Ew], ["MM-dd\nyyyy", 4 * Ew], ["MM-dd\nyyyy", 5 * Ew], ["MM-dd\nyyyy", 6 * Ew], ["week", 7 * Ew], ["MM-dd\nyyyy", 10 * Ew], ["week", 14 * Ew], ["week", 21 * Ew], ["month", 31 * Ew], ["week", 42 * Ew], ["month", 62 * Ew], ["week", 70 * Ew], ["quarter", 95 * Ew], ["month", 31 * Ew * 4], ["month", 31 * Ew * 5], ["half-year", 380 * Ew / 2], ["month", 31 * Ew * 8], ["month", 31 * Ew * 10], ["year", 380 * Ew]];zw.create = function (t) {
    return new zw({ useUTC: t.ecModel.get("useUTC") });
  };var Nw = vh.prototype,
      Fw = Sw.prototype,
      Vw = Mo,
      Hw = wo,
      Ww = Math.floor,
      Gw = Math.ceil,
      Xw = Math.pow,
      Uw = Math.log,
      Yw = vh.extend({ type: "log", base: 10, $constructor: function $constructor() {
      vh.apply(this, arguments), this._originalScale = new Sw();
    }, getTicks: function getTicks(t) {
      var e = this._originalScale,
          n = this._extent,
          i = e.getExtent();return p(Fw.getTicks.call(this, t), function (t) {
        var r = wo(Xw(this.base, t));return r = t === n[0] && e.__fixMin ? Bh(r, i[0]) : r, r = t === n[1] && e.__fixMax ? Bh(r, i[1]) : r;
      }, this);
    }, getMinorTicks: Fw.getMinorTicks, getLabel: Fw.getLabel, scale: function scale(t) {
      return t = Nw.scale.call(this, t), Xw(this.base, t);
    }, setExtent: function setExtent(t, e) {
      var n = this.base;t = Uw(t) / Uw(n), e = Uw(e) / Uw(n), Fw.setExtent.call(this, t, e);
    }, getExtent: function getExtent() {
      var t = this.base,
          e = Nw.getExtent.call(this);e[0] = Xw(t, e[0]), e[1] = Xw(t, e[1]);var n = this._originalScale,
          i = n.getExtent();return n.__fixMin && (e[0] = Bh(e[0], i[0])), n.__fixMax && (e[1] = Bh(e[1], i[1])), e;
    }, unionExtent: function unionExtent(t) {
      this._originalScale.unionExtent(t);var e = this.base;t[0] = Uw(t[0]) / Uw(e), t[1] = Uw(t[1]) / Uw(e), Nw.unionExtent.call(this, t);
    }, unionExtentFromData: function unionExtentFromData(t, e) {
      this.unionExtent(t.getApproximateExtent(e));
    }, niceTicks: function niceTicks(t) {
      t = t || 10;var e = this._extent,
          n = e[1] - e[0];if (!(1 / 0 === n || 0 >= n)) {
        var i = ko(n),
            r = t / n * i;for (.5 >= r && (i *= 10); !isNaN(i) && Math.abs(i) < 1 && Math.abs(i) > 0;) {
          i *= 10;
        }var a = [wo(Gw(e[0] / i) * i), wo(Ww(e[1] / i) * i)];this._interval = i, this._niceExtent = a;
      }
    }, niceExtent: function niceExtent(t) {
      Fw.niceExtent.call(this, t);var e = this._originalScale;e.__fixMin = t.fixMin, e.__fixMax = t.fixMax;
    } });f(["contain", "normalize"], function (t) {
    Yw.prototype[t] = function (e) {
      return e = Uw(e) / Uw(this.base), Nw[t].call(this, e);
    };
  }), Yw.create = function () {
    return new Yw();
  };var qw = { getMin: function getMin(t) {
      var e = this.option,
          n = t || null == e.rangeStart ? e.min : e.rangeStart;return this.axis && null != n && "dataMin" !== n && "function" != typeof n && !T(n) && (n = this.axis.scale.parse(n)), n;
    }, getMax: function getMax(t) {
      var e = this.option,
          n = t || null == e.rangeEnd ? e.max : e.rangeEnd;return this.axis && null != n && "dataMax" !== n && "function" != typeof n && !T(n) && (n = this.axis.scale.parse(n)), n;
    }, getNeedCrossZero: function getNeedCrossZero() {
      var t = this.option;return null != t.rangeStart || null != t.rangeEnd ? !1 : !t.scale;
    }, getCoordSysModel: V, setRange: function setRange(t, e) {
      this.option.rangeStart = t, this.option.rangeEnd = e;
    }, resetRange: function resetRange() {
      this.option.rangeStart = this.option.rangeEnd = null;
    } },
      jw = fa({ type: "triangle", shape: { cx: 0, cy: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = e.width / 2,
          a = e.height / 2;t.moveTo(n, i - a), t.lineTo(n + r, i + a), t.lineTo(n - r, i + a), t.closePath();
    } }),
      Zw = fa({ type: "diamond", shape: { cx: 0, cy: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = e.width / 2,
          a = e.height / 2;t.moveTo(n, i - a), t.lineTo(n + r, i), t.lineTo(n, i + a), t.lineTo(n - r, i), t.closePath();
    } }),
      Kw = fa({ type: "pin", shape: { x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {
      var n = e.x,
          i = e.y,
          r = e.width / 5 * 3,
          a = Math.max(r, e.height),
          o = r / 2,
          s = o * o / (a - o),
          l = i - a + o + s,
          u = Math.asin(s / o),
          h = Math.cos(u) * o,
          c = Math.sin(u),
          d = Math.cos(u),
          f = .6 * o,
          p = .7 * o;t.moveTo(n - h, l + s), t.arc(n, l, o, Math.PI - u, 2 * Math.PI + u), t.bezierCurveTo(n + h - c * f, l + s + d * f, n, i - p, n, i), t.bezierCurveTo(n, i - p, n - h + c * f, l + s + d * f, n - h, l + s), t.closePath();
    } }),
      $w = fa({ type: "arrow", shape: { x: 0, y: 0, width: 0, height: 0 }, buildPath: function buildPath(t, e) {
      var n = e.height,
          i = e.width,
          r = e.x,
          a = e.y,
          o = i / 3 * 2;t.moveTo(r, a), t.lineTo(r + o, a + n), t.lineTo(r, a + n / 4 * 3), t.lineTo(r - o, a + n), t.lineTo(r, a), t.closePath();
    } }),
      Qw = { line: Zm, rect: qm, roundRect: qm, square: qm, circle: zm, diamond: Zw, pin: Kw, arrow: $w, triangle: jw },
      Jw = { line: function line(t, e, n, i, r) {
      r.x1 = t, r.y1 = e + i / 2, r.x2 = t + n, r.y2 = e + i / 2;
    }, rect: function rect(t, e, n, i, r) {
      r.x = t, r.y = e, r.width = n, r.height = i;
    }, roundRect: function roundRect(t, e, n, i, r) {
      r.x = t, r.y = e, r.width = n, r.height = i, r.r = Math.min(n, i) / 4;
    }, square: function square(t, e, n, i, r) {
      var a = Math.min(n, i);r.x = t, r.y = e, r.width = a, r.height = a;
    }, circle: function circle(t, e, n, i, r) {
      r.cx = t + n / 2, r.cy = e + i / 2, r.r = Math.min(n, i) / 2;
    }, diamond: function diamond(t, e, n, i, r) {
      r.cx = t + n / 2, r.cy = e + i / 2, r.width = n, r.height = i;
    }, pin: function pin(t, e, n, i, r) {
      r.x = t + n / 2, r.y = e + i / 2, r.width = n, r.height = i;
    }, arrow: function arrow(t, e, n, i, r) {
      r.x = t + n / 2, r.y = e + i / 2, r.width = n, r.height = i;
    }, triangle: function triangle(t, e, n, i, r) {
      r.cx = t + n / 2, r.cy = e + i / 2, r.width = n, r.height = i;
    } },
      tb = {};f(Qw, function (t, e) {
    tb[e] = new t();
  });var eb = fa({ type: "symbol", shape: { symbolType: "", x: 0, y: 0, width: 0, height: 0 }, calculateTextPosition: function calculateTextPosition(t, e, n) {
      var i = Zn(t, e, n),
          r = this.shape;return r && "pin" === r.symbolType && "inside" === e.textPosition && (i.y = n.y + .4 * n.height), i;
    }, buildPath: function buildPath(t, e, n) {
      var i = e.symbolType;if ("none" !== i) {
        var r = tb[i];r || (i = "rect", r = tb[i]), Jw[i](e.x, e.y, e.width, e.height, r.shape), r.buildPath(t, r.shape, n);
      }
    } }),
      nb = { isDimensionStacked: ch, enableDataStack: hh, getStackedDimension: dh },
      ib = (Object.freeze || Object)({ createList: Zh, getLayoutRect: Zo, dataStack: nb, createScale: Kh, mixinAxisModelCommonMethods: $h, completeDimensions: rh, createDimensions: vw, createSymbol: jh }),
      rb = 1e-8;tc.prototype = { constructor: tc, properties: null, getBoundingRect: function getBoundingRect() {
      var t = this._rect;if (t) return t;for (var e = Number.MAX_VALUE, n = [e, e], i = [-e, -e], r = [], a = [], o = this.geometries, s = 0; s < o.length; s++) {
        if ("polygon" === o[s].type) {
          var l = o[s].exterior;Er(l, r, a), oe(n, n, r), se(i, i, a);
        }
      }return 0 === s && (n[0] = n[1] = i[0] = i[1] = 0), this._rect = new An(n[0], n[1], i[0] - n[0], i[1] - n[1]);
    }, contain: function contain(t) {
      var e = this.getBoundingRect(),
          n = this.geometries;if (!e.contain(t[0], t[1])) return !1;t: for (var i = 0, r = n.length; r > i; i++) {
        if ("polygon" === n[i].type) {
          var a = n[i].exterior,
              o = n[i].interiors;if (Jh(a, t[0], t[1])) {
            for (var s = 0; s < (o ? o.length : 0); s++) {
              if (Jh(o[s])) continue t;
            }return !0;
          }
        }
      }return !1;
    }, transformTo: function transformTo(t, e, n, i) {
      var r = this.getBoundingRect(),
          a = r.width / r.height;n ? i || (i = n / a) : n = a * i;for (var o = new An(t, e, n, i), s = r.calculateTransform(o), l = this.geometries, u = 0; u < l.length; u++) {
        if ("polygon" === l[u].type) {
          for (var h = l[u].exterior, c = l[u].interiors, d = 0; d < h.length; d++) {
            ae(h[d], h[d], s);
          }for (var f = 0; f < (c ? c.length : 0); f++) {
            for (var d = 0; d < c[f].length; d++) {
              ae(c[f][d], c[f][d], s);
            }
          }
        }
      }r = this._rect, r.copy(o), this.center = [r.x + r.width / 2, r.y + r.height / 2];
    }, cloneShallow: function cloneShallow(t) {
      null == t && (t = this.name);var e = new tc(t, this.geometries, this.center);return e._rect = this._rect, e.transformTo = null, e;
    } };var ab = function ab(t, e) {
    return ec(t), p(v(t.features, function (t) {
      return t.geometry && t.properties && t.geometry.coordinates.length > 0;
    }), function (t) {
      var n = t.properties,
          i = t.geometry,
          r = i.coordinates,
          a = [];"Polygon" === i.type && a.push({ type: "polygon", exterior: r[0], interiors: r.slice(1) }), "MultiPolygon" === i.type && f(r, function (t) {
        t[0] && a.push({ type: "polygon", exterior: t[0], interiors: t.slice(1) });
      });var o = new tc(n[e || "name"], a, n.cp);return o.properties = n, o;
    });
  },
      ob = sr(),
      sb = [0, 1],
      lb = function lb(t, e, n) {
    this.dim = t, this.scale = e, this._extent = n || [0, 0], this.inverse = !1, this.onBand = !1;
  };lb.prototype = { constructor: lb, contain: function contain(t) {
      var e = this._extent,
          n = Math.min(e[0], e[1]),
          i = Math.max(e[0], e[1]);return t >= n && i >= t;
    }, containData: function containData(t) {
      return this.scale.contain(t);
    }, getExtent: function getExtent() {
      return this._extent.slice();
    }, getPixelPrecision: function getPixelPrecision(t) {
      return Ao(t || this.scale.getExtent(), this._extent);
    }, setExtent: function setExtent(t, e) {
      var n = this._extent;n[0] = t, n[1] = e;
    }, dataToCoord: function dataToCoord(t, e) {
      var n = this._extent,
          i = this.scale;return t = i.normalize(t), this.onBand && "ordinal" === i.type && (n = n.slice(), mc(n, i.count())), xo(t, sb, n, e);
    }, coordToData: function coordToData(t, e) {
      var n = this._extent,
          i = this.scale;this.onBand && "ordinal" === i.type && (n = n.slice(), mc(n, i.count()));var r = xo(t, n, sb, e);return this.scale.scale(r);
    }, pointToData: function pointToData() {}, getTicksCoords: function getTicksCoords(t) {
      t = t || {};var e = t.tickModel || this.getTickModel(),
          n = rc(this, e),
          i = n.ticks,
          r = p(i, function (t) {
        return { coord: this.dataToCoord(t), tickValue: t };
      }, this),
          a = e.get("alignWithLabel");return yc(this, r, a, t.clamp), r;
    }, getMinorTicksCoords: function getMinorTicksCoords() {
      if ("ordinal" === this.scale.type) return [];var t = this.model.getModel("minorTick"),
          e = t.get("splitNumber");e > 0 && 100 > e || (e = 5);var n = this.scale.getMinorTicks(e),
          i = p(n, function (t) {
        return p(t, function (t) {
          return { coord: this.dataToCoord(t), tickValue: t };
        }, this);
      }, this);return i;
    }, getViewLabels: function getViewLabels() {
      return ic(this).labels;
    }, getLabelModel: function getLabelModel() {
      return this.model.getModel("axisLabel");
    }, getTickModel: function getTickModel() {
      return this.model.getModel("axisTick");
    }, getBandWidth: function getBandWidth() {
      var t = this._extent,
          e = this.scale.getExtent(),
          n = e[1] - e[0] + (this.onBand ? 1 : 0);0 === n && (n = 1);var i = Math.abs(t[1] - t[0]);return Math.abs(i) / n;
    }, isHorizontal: null, getRotate: null, calculateCategoryInterval: function calculateCategoryInterval() {
      return fc(this);
    } };var ub = ab,
      hb = {};f(["map", "each", "filter", "indexOf", "inherits", "reduce", "filter", "bind", "curry", "isArray", "isString", "isObject", "isFunction", "extend", "defaults", "clone", "merge"], function (t) {
    hb[t] = wp[t];
  });var cb = {};f(["extendShape", "extendPath", "makePath", "makeImage", "mergePath", "resizePath", "createIcon", "setHoverStyle", "setLabelStyle", "setTextStyle", "setText", "getFont", "updateProps", "initProps", "getTransform", "clipPointsByRect", "clipRectByRect", "registerShape", "getShapeClass", "Group", "Image", "Text", "Circle", "Sector", "Ring", "Polygon", "Polyline", "Rect", "Line", "BezierCurve", "Arc", "IncrementalDisplayable", "CompoundPath", "LinearGradient", "RadialGradient", "BoundingRect"], function (t) {
    cb[t] = yy[t];
  });var db = function db(t) {
    this._axes = {}, this._dimList = [], this.name = t || "";
  };db.prototype = { constructor: db, type: "cartesian", getAxis: function getAxis(t) {
      return this._axes[t];
    }, getAxes: function getAxes() {
      return p(this._dimList, xc, this);
    }, getAxesByScale: function getAxesByScale(t) {
      return t = t.toLowerCase(), v(this.getAxes(), function (e) {
        return e.scale.type === t;
      });
    }, addAxis: function addAxis(t) {
      var e = t.dim;this._axes[e] = t, this._dimList.push(e);
    }, dataToCoord: function dataToCoord(t) {
      return this._dataCoordConvert(t, "dataToCoord");
    }, coordToData: function coordToData(t) {
      return this._dataCoordConvert(t, "coordToData");
    }, _dataCoordConvert: function _dataCoordConvert(t, e) {
      for (var n = this._dimList, i = t instanceof Array ? [] : {}, r = 0; r < n.length; r++) {
        var a = n[r],
            o = this._axes[a];i[a] = o[e](t[a]);
      }return i;
    } }, _c.prototype = { constructor: _c, type: "cartesian2d", dimensions: ["x", "y"], getBaseAxis: function getBaseAxis() {
      return this.getAxesByScale("ordinal")[0] || this.getAxesByScale("time")[0] || this.getAxis("x");
    }, containPoint: function containPoint(t) {
      var e = this.getAxis("x"),
          n = this.getAxis("y");return e.contain(e.toLocalCoord(t[0])) && n.contain(n.toLocalCoord(t[1]));
    }, containData: function containData(t) {
      return this.getAxis("x").containData(t[0]) && this.getAxis("y").containData(t[1]);
    }, dataToPoint: function dataToPoint(t, e, n) {
      var i = this.getAxis("x"),
          r = this.getAxis("y");return n = n || [], n[0] = i.toGlobalCoord(i.dataToCoord(t[0])), n[1] = r.toGlobalCoord(r.dataToCoord(t[1])), n;
    }, clampData: function clampData(t, e) {
      var n = this.getAxis("x").scale,
          i = this.getAxis("y").scale,
          r = n.getExtent(),
          a = i.getExtent(),
          o = n.parse(t[0]),
          s = i.parse(t[1]);return e = e || [], e[0] = Math.min(Math.max(Math.min(r[0], r[1]), o), Math.max(r[0], r[1])), e[1] = Math.min(Math.max(Math.min(a[0], a[1]), s), Math.max(a[0], a[1])), e;
    }, pointToData: function pointToData(t, e) {
      var n = this.getAxis("x"),
          i = this.getAxis("y");return e = e || [], e[0] = n.coordToData(n.toLocalCoord(t[0])), e[1] = i.coordToData(i.toLocalCoord(t[1])), e;
    }, getOtherAxis: function getOtherAxis(t) {
      return this.getAxis("x" === t.dim ? "y" : "x");
    }, getArea: function getArea() {
      var t = this.getAxis("x").getGlobalExtent(),
          e = this.getAxis("y").getGlobalExtent(),
          n = Math.min(t[0], t[1]),
          i = Math.min(e[0], e[1]),
          r = Math.max(t[0], t[1]) - n,
          a = Math.max(e[0], e[1]) - i,
          o = new An(n, i, r, a);return o;
    } }, h(_c, db);var fb = function fb(t, e, n, i, r) {
    lb.call(this, t, e, n), this.type = i || "value", this.position = r || "bottom";
  };fb.prototype = { constructor: fb, index: 0, getAxesOnZeroOf: null, model: null, isHorizontal: function isHorizontal() {
      var t = this.position;return "top" === t || "bottom" === t;
    }, getGlobalExtent: function getGlobalExtent(t) {
      var e = this.getExtent();return e[0] = this.toGlobalCoord(e[0]), e[1] = this.toGlobalCoord(e[1]), t && e[0] > e[1] && e.reverse(), e;
    }, getOtherAxis: function getOtherAxis() {
      this.grid.getOtherAxis();
    }, pointToData: function pointToData(t, e) {
      return this.coordToData(this.toLocalCoord(t["x" === this.dim ? 0 : 1]), e);
    }, toLocalCoord: null, toGlobalCoord: null }, h(fb, lb);var pb = { show: !0, zlevel: 0, z: 0, inverse: !1, name: "", nameLocation: "end", nameRotate: null, nameTruncate: { maxWidth: null, ellipsis: "...", placeholder: "." }, nameTextStyle: {}, nameGap: 15, silent: !1, triggerEvent: !1, tooltip: { show: !1 }, axisPointer: {}, axisLine: { show: !0, onZero: !0, onZeroAxisIndex: null, lineStyle: { color: "#333", width: 1, type: "solid" }, symbol: ["none", "none"], symbolSize: [10, 15] }, axisTick: { show: !0, inside: !1, length: 5, lineStyle: { width: 1 } }, axisLabel: { show: !0, inside: !1, rotate: 0, showMinLabel: null, showMaxLabel: null, margin: 8, fontSize: 12 }, splitLine: { show: !0, lineStyle: { color: ["#ccc"], width: 1, type: "solid" } }, splitArea: { show: !1, areaStyle: { color: ["rgba(250,250,250,0.3)", "rgba(200,200,200,0.3)"] } } },
      gb = {};gb.categoryAxis = r({ boundaryGap: !0, deduplication: null, splitLine: { show: !1 }, axisTick: { alignWithLabel: !1, interval: "auto" }, axisLabel: { interval: "auto" } }, pb), gb.valueAxis = r({ boundaryGap: [0, 0], splitNumber: 5, minorTick: { show: !1, splitNumber: 5, length: 3, lineStyle: {} }, minorSplitLine: { show: !1, lineStyle: { color: "#eee", width: 1 } } }, pb), gb.timeAxis = s({ scale: !0, min: "dataMin", max: "dataMax" }, gb.valueAxis), gb.logAxis = s({ scale: !0, logBase: 10 }, gb.valueAxis);var vb = ["value", "category", "time", "log"],
      mb = function mb(t, e, n, i) {
    f(vb, function (o) {
      e.extend({ type: t + "Axis." + o, mergeDefaultAndTheme: function mergeDefaultAndTheme(e, i) {
          var a = this.layoutMode,
              s = a ? $o(e) : {},
              l = i.getTheme();r(e, l.get(o + "Axis")), r(e, this.getDefaultOption()), e.type = n(t, e), a && Ko(e, s, a);
        }, optionUpdated: function optionUpdated() {
          var t = this.option;"category" === t.type && (this.__ordinalMeta = mh.createByAxisModel(this));
        }, getCategories: function getCategories(t) {
          var e = this.option;return "category" === e.type ? t ? e.data : this.__ordinalMeta.categories : void 0;
        }, getOrdinalMeta: function getOrdinalMeta() {
          return this.__ordinalMeta;
        }, defaultOption: a([{}, gb[o + "Axis"], i], !0) });
    }), Wy.registerSubTypeDefaulter(t + "Axis", x(n, t));
  },
      yb = Wy.extend({ type: "cartesian2dAxis", axis: null, init: function init() {
      yb.superApply(this, "init", arguments), this.resetRange();
    }, mergeOption: function mergeOption() {
      yb.superApply(this, "mergeOption", arguments), this.resetRange();
    }, restoreData: function restoreData() {
      yb.superApply(this, "restoreData", arguments), this.resetRange();
    }, getCoordSysModel: function getCoordSysModel() {
      return this.ecModel.queryComponents({ mainType: "grid", index: this.option.gridIndex, id: this.option.gridId })[0];
    } });r(yb.prototype, qw);var xb = { offset: 0 };mb("x", yb, wc, xb), mb("y", yb, wc, xb), Wy.extend({ type: "grid", dependencies: ["xAxis", "yAxis"], layoutMode: "box", coordinateSystem: null, defaultOption: { show: !1, zlevel: 0, z: 0, left: "10%", top: 60, right: "10%", bottom: 60, containLabel: !1, backgroundColor: "rgba(0,0,0,0)", borderWidth: 1, borderColor: "#ccc" } });var _b = Sc.prototype;_b.type = "grid", _b.axisPointerEnabled = !0, _b.getRect = function () {
    return this._rect;
  }, _b.update = function (t, e) {
    var n = this._axesMap;this._updateScale(t, this.model), f(n.x, function (t) {
      Nh(t.scale, t.model);
    }), f(n.y, function (t) {
      Nh(t.scale, t.model);
    });var i = {};f(n.x, function (t) {
      Mc(n, "y", t, i);
    }), f(n.y, function (t) {
      Mc(n, "x", t, i);
    }), this.resize(this.model, e);
  }, _b.resize = function (t, e, n) {
    function i() {
      f(a, function (t) {
        var e = t.isHorizontal(),
            n = e ? [0, r.width] : [0, r.height],
            i = t.inverse ? 1 : 0;t.setExtent(n[i], n[1 - i]), Ic(t, e ? r.x : r.y);
      });
    }var r = Zo(t.getBoxLayoutParams(), { width: e.getWidth(), height: e.getHeight() });this._rect = r;var a = this._axesList;i(), !n && t.get("containLabel") && (f(a, function (t) {
      if (!t.model.get("axisLabel.inside")) {
        var e = Gh(t);if (e) {
          var n = t.isHorizontal() ? "height" : "width",
              i = t.model.get("axisLabel.margin");r[n] -= e[n] + i, "top" === t.position ? r.y += e.height + i : "left" === t.position && (r.x += e.width + i);
        }
      }
    }), i());
  }, _b.getAxis = function (t, e) {
    var n = this._axesMap[t];if (null != n) {
      if (null == e) for (var i in n) {
        if (n.hasOwnProperty(i)) return n[i];
      }return n[e];
    }
  }, _b.getAxes = function () {
    return this._axesList.slice();
  }, _b.getCartesian = function (t, e) {
    if (null != t && null != e) {
      var n = "x" + t + "y" + e;return this._coordsMap[n];
    }S(t) && (e = t.yAxisIndex, t = t.xAxisIndex);for (var i = 0, r = this._coordsList; i < r.length; i++) {
      if (r[i].getAxis("x").index === t || r[i].getAxis("y").index === e) return r[i];
    }
  }, _b.getCartesians = function () {
    return this._coordsList.slice();
  }, _b.convertToPixel = function (t, e, n) {
    var i = this._findConvertTarget(t, e);return i.cartesian ? i.cartesian.dataToPoint(n) : i.axis ? i.axis.toGlobalCoord(i.axis.dataToCoord(n)) : null;
  }, _b.convertFromPixel = function (t, e, n) {
    var i = this._findConvertTarget(t, e);return i.cartesian ? i.cartesian.pointToData(n) : i.axis ? i.axis.coordToData(i.axis.toLocalCoord(n)) : null;
  }, _b._findConvertTarget = function (t, e) {
    var n,
        i,
        r = e.seriesModel,
        a = e.xAxisModel || r && r.getReferringComponents("xAxis")[0],
        o = e.yAxisModel || r && r.getReferringComponents("yAxis")[0],
        s = e.gridModel,
        l = this._coordsList;if (r) n = r.coordinateSystem, u(l, n) < 0 && (n = null);else if (a && o) n = this.getCartesian(a.componentIndex, o.componentIndex);else if (a) i = this.getAxis("x", a.componentIndex);else if (o) i = this.getAxis("y", o.componentIndex);else if (s) {
      var h = s.coordinateSystem;h === this && (n = this._coordsList[0]);
    }return { cartesian: n, axis: i };
  }, _b.containPoint = function (t) {
    var e = this._coordsList[0];return e ? e.containPoint(t) : void 0;
  }, _b._initCartesian = function (t, e) {
    function n(n) {
      return function (o, s) {
        if (bc(o, t, e)) {
          var l = o.get("position");"x" === n ? "top" !== l && "bottom" !== l && (l = i.bottom ? "top" : "bottom") : "left" !== l && "right" !== l && (l = i.left ? "right" : "left"), i[l] = !0;var u = new fb(n, Fh(o), [0, 0], o.get("type"), l),
              h = "category" === u.type;u.onBand = h && o.get("boundaryGap"), u.inverse = o.get("inverse"), o.axis = u, u.model = o, u.grid = this, u.index = s, this._axesList.push(u), r[n][s] = u, a[n]++;
        }
      };
    }var i = { left: !1, right: !1, top: !1, bottom: !1 },
        r = { x: {}, y: {} },
        a = { x: 0, y: 0 };return e.eachComponent("xAxis", n("x"), this), e.eachComponent("yAxis", n("y"), this), a.x && a.y ? (this._axesMap = r, void f(r.x, function (e, n) {
      f(r.y, function (i, r) {
        var a = "x" + n + "y" + r,
            o = new _c(a);o.grid = this, o.model = t, this._coordsMap[a] = o, this._coordsList.push(o), o.addAxis(e), o.addAxis(i);
      }, this);
    }, this)) : (this._axesMap = {}, void (this._axesList = []));
  }, _b._updateScale = function (t, e) {
    function n(t, e) {
      f(t.mapDimension(e.dim, !0), function (n) {
        e.scale.unionExtentFromData(t, dh(t, n));
      });
    }f(this._axesList, function (t) {
      t.scale.setExtent(1 / 0, -1 / 0);
    }), t.eachSeries(function (i) {
      if (Cc(i)) {
        var r = Tc(i, t),
            a = r[0],
            o = r[1];if (!bc(a, e, t) || !bc(o, e, t)) return;var s = this.getCartesian(a.componentIndex, o.componentIndex),
            l = i.getData(),
            u = s.getAxis("x"),
            h = s.getAxis("y");"list" === l.type && (n(l, u, i), n(l, h, i));
      }
    }, this);
  }, _b.getTooltipAxes = function (t) {
    var e = [],
        n = [];return f(this.getCartesians(), function (i) {
      var r = null != t && "auto" !== t ? i.getAxis(t) : i.getBaseAxis(),
          a = i.getOtherAxis(r);u(e, r) < 0 && e.push(r), u(n, a) < 0 && n.push(a);
    }), { baseAxes: e, otherAxes: n };
  };var wb = ["xAxis", "yAxis"];Sc.create = function (t, e) {
    var n = [];return t.eachComponent("grid", function (i, r) {
      var a = new Sc(i, t, e);a.name = "grid_" + r, a.resize(i, e, !0), i.coordinateSystem = a, n.push(a);
    }), t.eachSeries(function (e) {
      if (Cc(e)) {
        var n = Tc(e, t),
            i = n[0],
            r = n[1],
            a = i.getCoordSysModel();if (ip) {
          if (!a) throw new Error('Grid "' + C(i.get("gridIndex"), i.get("gridId"), 0) + '" not found');if (i.getCoordSysModel() !== r.getCoordSysModel()) throw new Error("xAxis and yAxis must use the same grid");
        }var o = a.coordinateSystem;e.coordinateSystem = o.getCartesian(i.componentIndex, r.componentIndex);
      }
    }), n;
  }, Sc.dimensions = Sc.prototype.dimensions = _c.prototype.dimensions, Ms.register("cartesian2d", Sc);var bb = kx.extend({ type: "series.__base_bar__", getInitialData: function getInitialData() {
      return fh(this.getSource(), this, { useEncodeDefaulter: !0 });
    }, getMarkerPosition: function getMarkerPosition(t) {
      var e = this.coordinateSystem;if (e) {
        var n = e.dataToPoint(e.clampData(t)),
            i = this.getData(),
            r = i.getLayout("offset"),
            a = i.getLayout("size"),
            o = e.getBaseAxis().isHorizontal() ? 0 : 1;return n[o] += r + a / 2, n;
      }return [0 / 0, 0 / 0];
    }, defaultOption: { zlevel: 0, z: 2, coordinateSystem: "cartesian2d", legendHoverLink: !0, barMinHeight: 0, barMinAngle: 0, large: !1, largeThreshold: 400, progressive: 3e3, progressiveChunkMode: "mod", itemStyle: {}, emphasis: {} } });bb.extend({ type: "series.bar", dependencies: ["grid", "polar"], brushSelector: "rect", getProgressive: function getProgressive() {
      return this.get("large") ? this.get("progressive") : !1;
    }, getProgressiveThreshold: function getProgressiveThreshold() {
      var t = this.get("progressiveThreshold"),
          e = this.get("largeThreshold");return e > t && (t = e), t;
    }, defaultOption: { clip: !0, roundCap: !1, showBackground: !1, backgroundStyle: { color: "rgba(180, 180, 180, 0.2)", borderColor: null, borderWidth: 0, borderType: "solid", borderRadius: 0, shadowBlur: 0, shadowColor: null, shadowOffsetX: 0, shadowOffsetY: 0, opacity: 1 } } });var Sb = Cv([["fill", "color"], ["stroke", "borderColor"], ["lineWidth", "borderWidth"], ["stroke", "barBorderColor"], ["lineWidth", "barBorderWidth"], ["opacity"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["shadowColor"]]),
      Mb = { getBarItemStyle: function getBarItemStyle(t) {
      var e = Sb(this, t);if (this.getBorderLineDash) {
        var n = this.getBorderLineDash();n && (e.lineDash = n);
      }return e;
    } },
      Ab = fa({ type: "sausage", shape: { cx: 0, cy: 0, r0: 0, r: 0, startAngle: 0, endAngle: 2 * Math.PI, clockwise: !0 }, buildPath: function buildPath(t, e) {
      var n = e.cx,
          i = e.cy,
          r = Math.max(e.r0 || 0, 0),
          a = Math.max(e.r, 0),
          o = .5 * (a - r),
          s = r + o,
          l = e.startAngle,
          u = e.endAngle,
          h = e.clockwise,
          c = Math.cos(l),
          d = Math.sin(l),
          f = Math.cos(u),
          p = Math.sin(u),
          g = h ? u - l < 2 * Math.PI : l - u < 2 * Math.PI;g && (t.moveTo(c * r + n, d * r + i), t.arc(c * s + n, d * s + i, o, -Math.PI + l, l, !h)), t.arc(n, i, a, l, u, !h), t.moveTo(f * a + n, p * a + i), t.arc(f * s + n, p * s + i, o, u - 2 * Math.PI, u - Math.PI, !h), 0 !== r && (t.arc(n, i, r, u, l, h), t.moveTo(c * r + n, p * r + i)), t.closePath();
    } }),
      Ib = ["itemStyle", "barBorderWidth"],
      Tb = [0, 0];o(co.prototype, Mb), Lu({ type: "bar", render: function render(t, e, n) {
      this._updateDrawMode(t);var i = t.get("coordinateSystem");return "cartesian2d" === i || "polar" === i ? this._isLargeDraw ? this._renderLarge(t, e, n) : this._renderNormal(t, e, n) : ip && console.warn("Only cartesian2d and polar supported for bar."), this.group;
    }, incrementalPrepareRender: function incrementalPrepareRender(t) {
      this._clear(), this._updateDrawMode(t);
    }, incrementalRender: function incrementalRender(t, e) {
      this._incrementalRenderLarge(t, e);
    }, _updateDrawMode: function _updateDrawMode(t) {
      var e = t.pipelineContext.large;(null == this._isLargeDraw || e ^ this._isLargeDraw) && (this._isLargeDraw = e, this._clear());
    }, _renderNormal: function _renderNormal(t) {
      var e,
          n = this.group,
          i = t.getData(),
          r = this._data,
          a = t.coordinateSystem,
          o = a.getBaseAxis();"cartesian2d" === a.type ? e = o.isHorizontal() : "polar" === a.type && (e = "angle" === o.dim);var s = t.isAnimationEnabled() ? t : null,
          l = t.get("clip", !0),
          u = Bc(a, i);n.removeClipPath();var h = t.get("roundCap", !0),
          c = t.get("showBackground", !0),
          d = t.getModel("backgroundStyle"),
          f = d.get("barBorderRadius") || 0,
          p = [],
          g = this._backgroundEls || [],
          v = function v(t) {
        var n = Lb[a.type](i, t),
            r = Yc(a, e, n);return r.useStyle(d.getBarItemStyle()), "cartesian2d" === a.type && r.setShape("r", f), p[t] = r, r;
      };i.diff(r).add(function (r) {
        var o = i.getItemModel(r),
            d = Lb[a.type](i, r, o);if (c && v(r), i.hasValue(r)) {
          if (l) {
            var f = kb[a.type](u, d);if (f) return void n.remove(p);
          }var p = Pb[a.type](r, d, e, s, !1, h);i.setItemGraphicEl(r, p), n.add(p), Fc(p, i, r, o, d, t, e, "polar" === a.type);
        }
      }).update(function (o, m) {
        var y = i.getItemModel(o),
            x = Lb[a.type](i, o, y);
        if (c) {
          var _;0 === g.length ? _ = v(m) : (_ = g[m], _.useStyle(d.getBarItemStyle()), "cartesian2d" === a.type && _.setShape("r", f), p[o] = _);var w = Lb[a.type](i, o),
              b = Uc(e, w, a);Qa(_, { shape: b }, s, o);
        }var S = r.getItemGraphicEl(m);if (!i.hasValue(o)) return void n.remove(S);if (l) {
          var M = kb[a.type](u, x);if (M) return void n.remove(S);
        }S ? Qa(S, { shape: x }, s, o) : S = Pb[a.type](o, x, e, s, !0, h), i.setItemGraphicEl(o, S), n.add(S), Fc(S, i, o, y, x, t, e, "polar" === a.type);
      }).remove(function (t) {
        var e = r.getItemGraphicEl(t);"cartesian2d" === a.type ? e && zc(t, s, e) : e && Rc(t, s, e);
      }).execute();var m = this._backgroundGroup || (this._backgroundGroup = new _g());m.removeAll();for (var y = 0; y < p.length; ++y) {
        m.add(p[y]);
      }n.add(m), this._backgroundEls = p, this._data = i;
    }, _renderLarge: function _renderLarge(t) {
      this._clear(), Hc(t, this.group);var e = t.get("clip", !0) ? Ec(t.coordinateSystem, !1, t) : null;e ? this.group.setClipPath(e) : this.group.removeClipPath();
    }, _incrementalRenderLarge: function _incrementalRenderLarge(t, e) {
      this._removeBackground(), Hc(e, this.group, !0);
    }, dispose: V, remove: function remove(t) {
      this._clear(t);
    }, _clear: function _clear(t) {
      var e = this.group,
          n = this._data;t && t.get("animation") && n && !this._isLargeDraw ? (this._removeBackground(), this._backgroundEls = [], n.eachItemGraphicEl(function (e) {
        "sector" === e.type ? Rc(e.dataIndex, t, e) : zc(e.dataIndex, t, e);
      })) : e.removeAll(), this._data = null;
    }, _removeBackground: function _removeBackground() {
      this.group.remove(this._backgroundGroup), this._backgroundGroup = null;
    } });var Cb = Math.max,
      Db = Math.min,
      kb = { cartesian2d: function cartesian2d(t, e) {
      var n = e.width < 0 ? -1 : 1,
          i = e.height < 0 ? -1 : 1;0 > n && (e.x += e.width, e.width = -e.width), 0 > i && (e.y += e.height, e.height = -e.height);var r = Cb(e.x, t.x),
          a = Db(e.x + e.width, t.x + t.width),
          o = Cb(e.y, t.y),
          s = Db(e.y + e.height, t.y + t.height);e.x = r, e.y = o, e.width = a - r, e.height = s - o;var l = e.width < 0 || e.height < 0;return 0 > n && (e.x += e.width, e.width = -e.width), 0 > i && (e.y += e.height, e.height = -e.height), l;
    }, polar: function polar(t, e) {
      var n = e.r0 <= e.r ? 1 : -1;if (0 > n) {
        var i = e.r;e.r = e.r0, e.r0 = i;
      }var i = Db(e.r, t.r),
          r = Cb(e.r0, t.r0);e.r = i, e.r0 = r;var a = 0 > i - r;if (0 > n) {
        var i = e.r;e.r = e.r0, e.r0 = i;
      }return a;
    } },
      Pb = { cartesian2d: function cartesian2d(t, e, n, i, r) {
      var a = new qm({ shape: o({}, e), z2: 1 });if (a.name = "item", i) {
        var s = a.shape,
            l = n ? "height" : "width",
            u = {};s[l] = 0, u[l] = e[l], yy[r ? "updateProps" : "initProps"](a, { shape: u }, i, t);
      }return a;
    }, polar: function polar(t, e, n, i, r, a) {
      var o = e.startAngle < e.endAngle,
          l = !n && a ? Ab : Fm,
          u = new l({ shape: s({ clockwise: o }, e), z2: 1 });if (u.name = "item", i) {
        var h = u.shape,
            c = n ? "r" : "endAngle",
            d = {};h[c] = n ? 0 : e.startAngle, d[c] = e[c], yy[r ? "updateProps" : "initProps"](u, { shape: d }, i, t);
      }return u;
    } },
      Lb = { cartesian2d: function cartesian2d(t, e, n) {
      var i = t.getItemLayout(e),
          r = n ? Vc(n, i) : 0,
          a = i.width > 0 ? 1 : -1,
          o = i.height > 0 ? 1 : -1;return { x: i.x + a * r / 2, y: i.y + o * r / 2, width: i.width - a * r, height: i.height - o * r };
    }, polar: function polar(t, e) {
      var n = t.getItemLayout(e);return { cx: n.cx, cy: n.cy, r0: n.r0, r: n.r, startAngle: n.startAngle, endAngle: n.endAngle };
    } },
      Ob = Jr.extend({ type: "largeBar", shape: { points: [] }, buildPath: function buildPath(t, e) {
      for (var n = e.points, i = this.__startPoint, r = this.__baseDimIdx, a = 0; a < n.length; a += 2) {
        i[r] = n[a + r], t.moveTo(i[0], i[1]), t.lineTo(n[a], n[a + 1]);
      }
    } }),
      Eb = gl(function (t) {
    var e = this,
        n = Wc(e, t.offsetX, t.offsetY);e.dataIndex = n >= 0 ? n : null;
  }, 30, !1),
      Bb = Math.PI,
      zb = function zb(t, e) {
    this.opt = e, this.axisModel = t, s(e, { labelOffset: 0, nameDirection: 1, tickDirection: 1, labelDirection: 1, silent: !0 }), this.group = new _g();var n = new _g({ position: e.position.slice(), rotation: e.rotation });n.updateTransform(), this._transform = n.transform, this._dumbGroup = n;
  };zb.prototype = { constructor: zb, hasBuilder: function hasBuilder(t) {
      return !!Rb[t];
    }, add: function add(t) {
      Rb[t].call(this);
    }, getGroup: function getGroup() {
      return this.group;
    } };var Rb = { axisLine: function axisLine() {
      var t = this.opt,
          e = this.axisModel;if (e.get("axisLine.show")) {
        var n = this.axisModel.axis.getExtent(),
            i = this._transform,
            r = [n[0], 0],
            a = [n[1], 0];i && (ae(r, r, i), ae(a, a, i));var s = o({ lineCap: "round" }, e.getModel("axisLine.lineStyle").getLineStyle());this.group.add(new Zm({ anid: "line", subPixelOptimize: !0, shape: { x1: r[0], y1: r[1], x2: a[0], y2: a[1] }, style: s, strokeContainThreshold: t.strokeContainThreshold || 5, silent: !0, z2: 1 }));var l = e.get("axisLine.symbol"),
            u = e.get("axisLine.symbolSize"),
            h = e.get("axisLine.symbolOffset") || 0;if ("number" == typeof h && (h = [h, h]), null != l) {
          "string" == typeof l && (l = [l, l]), ("string" == typeof u || "number" == typeof u) && (u = [u, u]);var c = u[0],
              d = u[1];f([{ rotate: t.rotation + Math.PI / 2, offset: h[0], r: 0 }, { rotate: t.rotation - Math.PI / 2, offset: h[1], r: Math.sqrt((r[0] - a[0]) * (r[0] - a[0]) + (r[1] - a[1]) * (r[1] - a[1])) }], function (e, n) {
            if ("none" !== l[n] && null != l[n]) {
              var i = jh(l[n], -c / 2, -d / 2, c, d, s.stroke, !0),
                  a = e.r + e.offset,
                  o = [r[0] + a * Math.cos(t.rotation), r[1] - a * Math.sin(t.rotation)];i.attr({ rotation: e.rotate, position: o, silent: !0, z2: 11 }), this.group.add(i);
            }
          }, this);
        }
      }
    }, axisTickLabel: function axisTickLabel() {
      var t = this.axisModel,
          e = this.opt,
          n = Jc(this, t, e),
          i = ed(this, t, e);jc(t, i, n), td(this, t, e);
    }, axisName: function axisName() {
      var t = this.opt,
          e = this.axisModel,
          n = C(t.axisName, e.get("name"));if (n) {
        var i,
            r = e.get("nameLocation"),
            a = t.nameDirection,
            s = e.getModel("nameTextStyle"),
            l = e.get("nameGap") || 0,
            u = this.axisModel.axis.getExtent(),
            h = u[0] > u[1] ? -1 : 1,
            c = ["start" === r ? u[0] - h * l : "end" === r ? u[1] + h * l : (u[0] + u[1]) / 2, $c(r) ? t.labelOffset + a * l : 0],
            d = e.get("nameRotate");null != d && (d = d * Bb / 180);var f;$c(r) ? i = Fb(t.rotation, null != d ? d : t.rotation, a) : (i = qc(t, r, d || 0, u), f = t.axisNameAvailableWidth, null != f && (f = Math.abs(f / Math.sin(i.rotation)), !isFinite(f) && (f = null)));var p = s.getFont(),
            g = e.get("nameTruncate", !0) || {},
            v = g.ellipsis,
            m = C(t.nameTruncateMaxWidth, g.maxWidth, f),
            y = null != v && null != m ? By(n, m, p, v, { minChar: 2, placeholder: g.placeholder }) : n,
            x = e.get("tooltip", !0),
            _ = e.mainType,
            w = { componentType: _, name: n, $vars: ["name"] };w[_ + "Index"] = e.componentIndex;var b = new Bm({ anid: "name", __fullText: n, __truncatedText: y, position: c, rotation: i.rotation, silent: Vb(e), z2: 1, tooltip: x && x.show ? o({ content: n, formatter: function formatter() {
              return n;
            }, formatterParams: w }, x) : null });Wa(b.style, s, { text: y, textFont: p, textFill: s.getTextColor() || e.get("axisLine.lineStyle.color"), textAlign: s.get("align") || i.textAlign, textVerticalAlign: s.get("verticalAlign") || i.textVerticalAlign }), e.get("triggerEvent") && (b.eventData = Nb(e), b.eventData.targetType = "axisName", b.eventData.name = n), this._dumbGroup.add(b), b.updateTransform(), this.group.add(b), b.decomposeTransform();
      }
    } },
      Nb = zb.makeAxisEventDataBase = function (t) {
    var e = { componentType: t.mainType, componentIndex: t.componentIndex };return e[t.mainType + "Index"] = t.componentIndex, e;
  },
      Fb = zb.innerTextLayout = function (t, e, n) {
    var i,
        r,
        a = To(e - t);return Co(a) ? (r = n > 0 ? "top" : "bottom", i = "center") : Co(a - Bb) ? (r = n > 0 ? "bottom" : "top", i = "center") : (r = "middle", i = a > 0 && Bb > a ? n > 0 ? "right" : "left" : n > 0 ? "left" : "right"), { rotation: a, textAlign: i, textVerticalAlign: r };
  },
      Vb = zb.isLabelSilent = function (t) {
    var e = t.get("tooltip");return t.get("silent") || !(t.get("triggerEvent") || e && e.show);
  },
      Hb = f,
      Wb = x,
      Gb = ku({ type: "axis", _axisPointer: null, axisPointerClass: null, render: function render(t, e, n, i) {
      this.axisPointerClass && ld(t), Gb.superApply(this, "render", arguments), fd(this, t, e, n, i, !0);
    }, updateAxisPointer: function updateAxisPointer(t, e, n, i) {
      fd(this, t, e, n, i, !1);
    }, remove: function remove(t, e) {
      var n = this._axisPointer;n && n.remove(e), Gb.superApply(this, "remove", arguments);
    }, dispose: function dispose(t, e) {
      pd(this, e), Gb.superApply(this, "dispose", arguments);
    } }),
      Xb = [];Gb.registerAxisPointerClass = function (t, e) {
    if (ip && Xb[t]) throw new Error("axisPointer " + t + " exists");Xb[t] = e;
  }, Gb.getAxisPointerClass = function (t) {
    return t && Xb[t];
  };var Ub = ["axisLine", "axisTickLabel", "axisName"],
      Yb = ["splitArea", "splitLine", "minorSplitLine"],
      qb = Gb.extend({ type: "cartesianAxis", axisPointerClass: "CartesianAxisPointer", render: function render(t, e, n, i) {
      this.group.removeAll();var r = this._axisGroup;if (this._axisGroup = new _g(), this.group.add(this._axisGroup), t.get("show")) {
        var a = t.getCoordSysModel(),
            o = gd(a, t),
            s = new zb(t, o);f(Ub, s.add, s), this._axisGroup.add(s.getGroup()), f(Yb, function (e) {
          t.get(e + ".show") && this["_" + e](t, a);
        }, this), io(r, this._axisGroup, t), qb.superCall(this, "render", t, e, n, i);
      }
    }, remove: function remove() {
      md(this);
    }, _splitLine: function _splitLine(t, e) {
      var n = t.axis;if (!n.scale.isBlank()) {
        var i = t.getModel("splitLine"),
            r = i.getModel("lineStyle"),
            a = r.get("color");a = _(a) ? a : [a];for (var o = e.coordinateSystem.getRect(), l = n.isHorizontal(), u = 0, h = n.getTicksCoords({ tickModel: i }), c = [], d = [], f = r.getLineStyle(), p = 0; p < h.length; p++) {
          var g = n.toGlobalCoord(h[p].coord);l ? (c[0] = g, c[1] = o.y, d[0] = g, d[1] = o.y + o.height) : (c[0] = o.x, c[1] = g, d[0] = o.x + o.width, d[1] = g);var v = u++ % a.length,
              m = h[p].tickValue;this._axisGroup.add(new Zm({ anid: null != m ? "line_" + h[p].tickValue : null, subPixelOptimize: !0, shape: { x1: c[0], y1: c[1], x2: d[0], y2: d[1] }, style: s({ stroke: a[v] }, f), silent: !0 }));
        }
      }
    }, _minorSplitLine: function _minorSplitLine(t, e) {
      var n = t.axis,
          i = t.getModel("minorSplitLine"),
          r = i.getModel("lineStyle"),
          a = e.coordinateSystem.getRect(),
          o = n.isHorizontal(),
          s = n.getMinorTicksCoords();if (s.length) for (var l = [], u = [], h = r.getLineStyle(), c = 0; c < s.length; c++) {
        for (var d = 0; d < s[c].length; d++) {
          var f = n.toGlobalCoord(s[c][d].coord);o ? (l[0] = f, l[1] = a.y, u[0] = f, u[1] = a.y + a.height) : (l[0] = a.x, l[1] = f, u[0] = a.x + a.width, u[1] = f), this._axisGroup.add(new Zm({ anid: "minor_line_" + s[c][d].tickValue, subPixelOptimize: !0, shape: { x1: l[0], y1: l[1], x2: u[0], y2: u[1] }, style: h, silent: !0 }));
        }
      }
    }, _splitArea: function _splitArea(t, e) {
      vd(this, this._axisGroup, t, e);
    } });qb.extend({ type: "xAxis" }), qb.extend({ type: "yAxis" }), ku({ type: "grid", render: function render(t) {
      this.group.removeAll(), t.get("show") && this.group.add(new qm({ shape: t.coordinateSystem.getRect(), style: s({ fill: t.get("backgroundColor") }, t.getItemStyle()), silent: !0, z2: -1 }));
    } }), xu(function (t) {
    t.xAxis && t.yAxis && !t.grid && (t.grid = {});
  }), Au(E_.VISUAL.LAYOUT, x(Ph, "bar")), Au(E_.VISUAL.PROGRESSIVE_LAYOUT, Tw), Iu({ seriesType: "bar", reset: function reset(t) {
      t.getData().setVisual("legendSymbol", "roundRect");
    } }), kx.extend({ type: "series.line", dependencies: ["grid", "polar"], getInitialData: function getInitialData(t) {
      if (ip) {
        var e = t.coordinateSystem;if ("polar" !== e && "cartesian2d" !== e) throw new Error("Line not support coordinateSystem besides cartesian and polar");
      }return fh(this.getSource(), this, { useEncodeDefaulter: !0 });
    }, defaultOption: { zlevel: 0, z: 2, coordinateSystem: "cartesian2d", legendHoverLink: !0, hoverAnimation: !0, clip: !0, label: { position: "top" }, lineStyle: { width: 2, type: "solid" }, step: !1, smooth: !1, smoothMonotone: null, symbol: "emptyCircle", symbolSize: 4, symbolRotate: null, showSymbol: !0, showAllSymbol: "auto", connectNulls: !1, sampling: "none", animationEasing: "linear", progressive: 0, hoverLayerThreshold: 1 / 0 } });var jb = yd.prototype,
      Zb = yd.getSymbolSize = function (t, e) {
    var n = t.getItemVisual(e, "symbolSize");return n instanceof Array ? n.slice() : [+n, +n];
  };jb._createSymbol = function (t, e, n, i, r) {
    this.removeAll();var a = e.getItemVisual(n, "color"),
        o = jh(t, -1, -1, 2, 2, a, r);o.attr({ z2: 100, culling: !0, scale: xd(i) }), o.drift = _d, this._symbolType = t, this.add(o);
  }, jb.stopSymbolAnimation = function (t) {
    this.childAt(0).stopAnimation(t);
  }, jb.getSymbolPath = function () {
    return this.childAt(0);
  }, jb.getScale = function () {
    return this.childAt(0).scale;
  }, jb.highlight = function () {
    this.childAt(0).trigger("emphasis");
  }, jb.downplay = function () {
    this.childAt(0).trigger("normal");
  }, jb.setZ = function (t, e) {
    var n = this.childAt(0);n.zlevel = t, n.z = e;
  }, jb.setDraggable = function (t) {
    var e = this.childAt(0);e.draggable = t, e.cursor = t ? "move" : e.cursor;
  }, jb.updateData = function (t, e, n) {
    this.silent = !1;var i = t.getItemVisual(e, "symbol") || "circle",
        r = t.hostModel,
        a = Zb(t, e),
        o = i !== this._symbolType;if (o) {
      var s = t.getItemVisual(e, "symbolKeepAspect");this._createSymbol(i, t, e, a, s);
    } else {
      var l = this.childAt(0);l.silent = !1, Qa(l, { scale: xd(a) }, r, e);
    }if (this._updateCommon(t, e, a, n), o) {
      var l = this.childAt(0),
          u = n && n.fadeIn,
          h = { scale: l.scale.slice() };u && (h.style = { opacity: l.style.opacity }), l.scale = [0, 0], u && (l.style.opacity = 0), Ja(l, h, r, e);
    }this._seriesModel = r;
  };var Kb = ["itemStyle"],
      $b = ["emphasis", "itemStyle"],
      Qb = ["label"],
      Jb = ["emphasis", "label"];jb._updateCommon = function (t, e, n, i) {
    function r(e) {
      return b ? t.getName(e) : Dc(t, e);
    }var a = this.childAt(0),
        s = t.hostModel,
        l = t.getItemVisual(e, "color");"image" !== a.type ? a.useStyle({ strokeNoScale: !0 }) : a.setStyle({ opacity: 1, shadowBlur: null, shadowOffsetX: null, shadowOffsetY: null, shadowColor: null });var u = i && i.itemStyle,
        h = i && i.hoverItemStyle,
        c = i && i.symbolOffset,
        d = i && i.labelModel,
        f = i && i.hoverLabelModel,
        p = i && i.hoverAnimation,
        g = i && i.cursorStyle;if (!i || t.hasItemOption) {
      var v = i && i.itemModel ? i.itemModel : t.getItemModel(e);u = v.getModel(Kb).getItemStyle(["color"]), h = v.getModel($b).getItemStyle(), c = v.getShallow("symbolOffset"), d = v.getModel(Qb), f = v.getModel(Jb), p = v.getShallow("hoverAnimation"), g = v.getShallow("cursor");
    } else h = o({}, h);var m = a.style,
        y = t.getItemVisual(e, "symbolRotate");a.attr("rotation", (y || 0) * Math.PI / 180 || 0), c && a.attr("position", [_o(c[0], n[0]), _o(c[1], n[1])]), g && a.attr("cursor", g), a.setColor(l, i && i.symbolInnerColor), a.setStyle(u);var x = t.getItemVisual(e, "opacity");null != x && (m.opacity = x);var _ = t.getItemVisual(e, "liftZ"),
        w = a.__z2Origin;null != _ ? null == w && (a.__z2Origin = a.z2, a.z2 += _) : null != w && (a.z2 = w, a.__z2Origin = null);var b = i && i.useNameLabel;Va(m, h, d, f, { labelFetcher: s, labelDataIndex: e, defaultText: r, isRectText: !0, autoColor: l }), a.__symbolOriginalScale = xd(n), a.hoverStyle = h, a.highDownOnUpdate = p && s.isAnimationEnabled() ? wd : null, za(a);
  }, jb.fadeOut = function (t, e) {
    var n = this.childAt(0);this.silent = n.silent = !0, !(e && e.keepLabel) && (n.style.text = null), Qa(n, { style: { opacity: 0 }, scale: [0, 0] }, this._seriesModel, this.dataIndex, t);
  }, h(yd, _g);var tS = bd.prototype;tS.updateData = function (t, e) {
    e = Md(e);var n = this.group,
        i = t.hostModel,
        r = this._data,
        a = this._symbolCtor,
        o = Ad(t);r || n.removeAll(), t.diff(r).add(function (i) {
      var r = t.getItemLayout(i);if (Sd(t, r, i, e)) {
        var s = new a(t, i, o);s.attr("position", r), t.setItemGraphicEl(i, s), n.add(s);
      }
    }).update(function (s, l) {
      var u = r.getItemGraphicEl(l),
          h = t.getItemLayout(s);return Sd(t, h, s, e) ? (u ? (u.updateData(t, s, o), Qa(u, { position: h }, i)) : (u = new a(t, s), u.attr("position", h)), n.add(u), void t.setItemGraphicEl(s, u)) : void n.remove(u);
    }).remove(function (t) {
      var e = r.getItemGraphicEl(t);e && e.fadeOut(function () {
        n.remove(e);
      });
    }).execute(), this._data = t;
  }, tS.isPersistent = function () {
    return !0;
  }, tS.updateLayout = function () {
    var t = this._data;t && t.eachItemGraphicEl(function (e, n) {
      var i = t.getItemLayout(n);e.attr("position", i);
    });
  }, tS.incrementalPrepareUpdate = function (t) {
    this._seriesScope = Ad(t), this._data = null, this.group.removeAll();
  }, tS.incrementalUpdate = function (t, e, n) {
    function i(t) {
      t.isGroup || (t.incremental = t.useHoverLayer = !0);
    }n = Md(n);for (var r = t.start; r < t.end; r++) {
      var a = e.getItemLayout(r);if (Sd(e, a, r, n)) {
        var o = new this._symbolCtor(e, r, this._seriesScope);o.traverse(i), o.attr("position", a), this.group.add(o), e.setItemGraphicEl(r, o);
      }
    }
  }, tS.remove = function (t) {
    var e = this.group,
        n = this._data;n && t ? n.eachItemGraphicEl(function (t) {
      t.fadeOut(function () {
        e.remove(t);
      });
    }) : e.removeAll();
  };var eS = function eS(t, e, n, i, r, a, o, s) {
    for (var l = Dd(t, e), u = [], h = [], c = [], d = [], f = [], p = [], g = [], v = Id(r, e, o), m = Id(a, t, s), y = 0; y < l.length; y++) {
      var x = l[y],
          _ = !0;switch (x.cmd) {case "=":
          var w = t.getItemLayout(x.idx),
              b = e.getItemLayout(x.idx1);(isNaN(w[0]) || isNaN(w[1])) && (w = b.slice()), u.push(w), h.push(b), c.push(n[x.idx]), d.push(i[x.idx1]), g.push(e.getRawIndex(x.idx1));break;case "+":
          var S = x.idx;u.push(r.dataToPoint([e.get(v.dataDimsForPoint[0], S), e.get(v.dataDimsForPoint[1], S)])), h.push(e.getItemLayout(S).slice()), c.push(Cd(v, r, e, S)), d.push(i[S]), g.push(e.getRawIndex(S));break;case "-":
          var S = x.idx,
              M = t.getRawIndex(S);M !== S ? (u.push(t.getItemLayout(S)), h.push(a.dataToPoint([t.get(m.dataDimsForPoint[0], S), t.get(m.dataDimsForPoint[1], S)])), c.push(n[S]), d.push(Cd(m, a, t, S)), g.push(M)) : _ = !1;}_ && (f.push(x), p.push(p.length));
    }p.sort(function (t, e) {
      return g[t] - g[e];
    });for (var A = [], I = [], T = [], C = [], D = [], y = 0; y < p.length; y++) {
      var S = p[y];A[y] = u[S], I[y] = h[S], T[y] = c[S], C[y] = d[S], D[y] = f[S];
    }return { current: A, next: I, stackedOnCurrent: T, stackedOnNext: C, status: D };
  },
      nS = oe,
      iS = se,
      rS = Y,
      aS = W,
      oS = [],
      sS = [],
      lS = [],
      uS = Jr.extend({ type: "ec-polyline", shape: { points: [], smooth: 0, smoothConstraint: !0, smoothMonotone: null, connectNulls: !1 }, style: { fill: null, stroke: "#000" }, brush: Nm(Jr.prototype.brush), buildPath: function buildPath(t, e) {
      var n = e.points,
          i = 0,
          r = n.length,
          a = Ed(n, e.smoothConstraint);if (e.connectNulls) {
        for (; r > 0 && kd(n[r - 1]); r--) {}for (; r > i && kd(n[i]); i++) {}
      }for (; r > i;) {
        i += Pd(t, n, i, r, r, 1, a.min, a.max, e.smooth, e.smoothMonotone, e.connectNulls) + 1;
      }
    } }),
      hS = Jr.extend({ type: "ec-polygon", shape: { points: [], stackedOnPoints: [], smooth: 0, stackedOnSmooth: 0, smoothConstraint: !0, smoothMonotone: null, connectNulls: !1 }, brush: Nm(Jr.prototype.brush), buildPath: function buildPath(t, e) {
      var n = e.points,
          i = e.stackedOnPoints,
          r = 0,
          a = n.length,
          o = e.smoothMonotone,
          s = Ed(n, e.smoothConstraint),
          l = Ed(i, e.smoothConstraint);if (e.connectNulls) {
        for (; a > 0 && kd(n[a - 1]); a--) {}for (; a > r && kd(n[r]); r++) {}
      }for (; a > r;) {
        var u = Pd(t, n, r, a, a, 1, s.min, s.max, e.smooth, o, e.connectNulls);Pd(t, i, r + u - 1, u, a, -1, l.min, l.max, e.stackedOnSmooth, o, e.connectNulls), r += u + 1, t.closePath();
      }
    } });hl.extend({ type: "line", init: function init() {
      var t = new _g(),
          e = new bd();this.group.add(e.group), this._symbolDraw = e, this._lineGroup = t;
    }, render: function render(t, e, n) {
      var i = t.coordinateSystem,
          r = this.group,
          a = t.getData(),
          o = t.getModel("lineStyle"),
          l = t.getModel("areaStyle"),
          u = a.mapArray(a.getItemLayout),
          h = "polar" === i.type,
          c = this._coordSys,
          d = this._symbolDraw,
          f = this._polyline,
          p = this._polygon,
          g = this._lineGroup,
          v = t.get("animation"),
          m = !l.isEmpty(),
          y = l.get("origin"),
          x = Id(i, a, y),
          _ = Nd(i, a, x),
          w = t.get("showSymbol"),
          b = w && !h && Hd(t, a, i),
          S = this._data;S && S.eachItemGraphicEl(function (t, e) {
        t.__temp && (r.remove(t), S.setItemGraphicEl(e, null));
      }), w || d.remove(), r.add(g);var M,
          A = !h && t.get("step");i && i.getArea && t.get("clip", !0) && (M = i.getArea(), null != M.width ? (M.x -= .1, M.y -= .1, M.width += .2, M.height += .2) : M.r0 && (M.r0 -= .5, M.r1 += .5)), this._clipShapeForSymbol = M, f && c.type === i.type && A === this._step ? (m && !p ? p = this._newPolygon(u, _, i, v) : p && !m && (g.remove(p), p = this._polygon = null), g.setClipPath(Gd(i, !1, t)), w && d.updateData(a, { isIgnore: b, clipShape: M }), a.eachItemGraphicEl(function (t) {
        t.stopAnimation(!0);
      }), Bd(this._stackedOnPoints, _) && Bd(this._points, u) || (v ? this._updateAnimation(a, _, i, n, A, y) : (A && (u = Fd(u, i, A), _ = Fd(_, i, A)), f.setShape({ points: u }), p && p.setShape({ points: u, stackedOnPoints: _ })))) : (w && d.updateData(a, { isIgnore: b, clipShape: M }), A && (u = Fd(u, i, A), _ = Fd(_, i, A)), f = this._newPolyline(u, i, v), m && (p = this._newPolygon(u, _, i, v)), g.setClipPath(Gd(i, !0, t)));var I = Vd(a, i) || a.getVisual("color");f.useStyle(s(o.getLineStyle(), { fill: "none", stroke: I, lineJoin: "bevel" }));var T = t.get("smooth");if (T = Rd(t.get("smooth")), f.setShape({ smooth: T, smoothMonotone: t.get("smoothMonotone"), connectNulls: t.get("connectNulls") }), p) {
        var C = a.getCalculationInfo("stackedOnSeries"),
            D = 0;p.useStyle(s(l.getAreaStyle(), { fill: I, opacity: .7, lineJoin: "bevel" })), C && (D = Rd(C.get("smooth"))), p.setShape({ smooth: T, stackedOnSmooth: D, smoothMonotone: t.get("smoothMonotone"), connectNulls: t.get("connectNulls") });
      }this._data = a, this._coordSys = i, this._stackedOnPoints = _, this._points = u, this._step = A, this._valueOrigin = y;
    }, dispose: function dispose() {}, highlight: function highlight(t, e, n, i) {
      var r = t.getData(),
          a = or(r, i);if (!(a instanceof Array) && null != a && a >= 0) {
        var o = r.getItemGraphicEl(a);if (!o) {
          var s = r.getItemLayout(a);if (!s) return;if (this._clipShapeForSymbol && !this._clipShapeForSymbol.contain(s[0], s[1])) return;o = new yd(r, a), o.position = s, o.setZ(t.get("zlevel"), t.get("z")), o.ignore = isNaN(s[0]) || isNaN(s[1]), o.__temp = !0, r.setItemGraphicEl(a, o), o.stopSymbolAnimation(!0), this.group.add(o);
        }o.highlight();
      } else hl.prototype.highlight.call(this, t, e, n, i);
    }, downplay: function downplay(t, e, n, i) {
      var r = t.getData(),
          a = or(r, i);if (null != a && a >= 0) {
        var o = r.getItemGraphicEl(a);o && (o.__temp ? (r.setItemGraphicEl(a, null), this.group.remove(o)) : o.downplay());
      } else hl.prototype.downplay.call(this, t, e, n, i);
    }, _newPolyline: function _newPolyline(t) {
      var e = this._polyline;return e && this._lineGroup.remove(e), e = new uS({ shape: { points: t }, silent: !0, z2: 10 }), this._lineGroup.add(e), this._polyline = e, e;
    }, _newPolygon: function _newPolygon(t, e) {
      var n = this._polygon;return n && this._lineGroup.remove(n), n = new hS({ shape: { points: t, stackedOnPoints: e }, silent: !0 }), this._lineGroup.add(n), this._polygon = n, n;
    }, _updateAnimation: function _updateAnimation(t, e, n, i, r, a) {
      var o = this._polyline,
          s = this._polygon,
          l = t.hostModel,
          u = eS(this._data, t, this._stackedOnPoints, e, this._coordSys, n, this._valueOrigin, a),
          h = u.current,
          c = u.stackedOnCurrent,
          d = u.next,
          f = u.stackedOnNext;if (r && (h = Fd(u.current, n, r), c = Fd(u.stackedOnCurrent, n, r), d = Fd(u.next, n, r), f = Fd(u.stackedOnNext, n, r)), zd(h, d) > 3e3 || s && zd(c, f) > 3e3) return o.setShape({ points: d }), void (s && s.setShape({ points: d, stackedOnPoints: f }));o.shape.__points = u.current, o.shape.points = h, Qa(o, { shape: { points: d } }, l), s && (s.setShape({ points: h, stackedOnPoints: c }), Qa(s, { shape: { points: d, stackedOnPoints: f } }, l));for (var p = [], g = u.status, v = 0; v < g.length; v++) {
        var m = g[v].cmd;if ("=" === m) {
          var y = t.getItemGraphicEl(g[v].idx1);y && p.push({ el: y, ptIdx: v });
        }
      }o.animators && o.animators.length && o.animators[0].during(function () {
        for (var t = 0; t < p.length; t++) {
          var e = p[t].el;e.attr("position", o.shape.__points[p[t].ptIdx]);
        }
      });
    }, remove: function remove() {
      var t = this.group,
          e = this._data;this._lineGroup.removeAll(), this._symbolDraw.remove(!0), e && e.eachItemGraphicEl(function (n, i) {
        n.__temp && (t.remove(n), e.setItemGraphicEl(i, null));
      }), this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;
    } });var cS = function cS(t, e, n) {
    return { seriesType: t, performRawSeries: !0, reset: function reset(t, i) {
        function r(e, n) {
          if (f) {
            var i = t.getRawValue(n),
                r = t.getDataParams(n);h && e.setItemVisual(n, "symbol", o(i, r)), c && e.setItemVisual(n, "symbolSize", s(i, r)), d && e.setItemVisual(n, "symbolRotate", u(i, r));
          }if (e.hasItemOption) {
            var a = e.getItemModel(n),
                l = a.getShallow("symbol", !0),
                p = a.getShallow("symbolSize", !0),
                g = a.getShallow("symbolRotate", !0),
                v = a.getShallow("symbolKeepAspect", !0);null != l && e.setItemVisual(n, "symbol", l), null != p && e.setItemVisual(n, "symbolSize", p), null != g && e.setItemVisual(n, "symbolRotate", g), null != v && e.setItemVisual(n, "symbolKeepAspect", v);
          }
        }var a = t.getData(),
            o = t.get("symbol"),
            s = t.get("symbolSize"),
            l = t.get("symbolKeepAspect"),
            u = t.get("symbolRotate"),
            h = w(o),
            c = w(s),
            d = w(u),
            f = h || c || d,
            p = !h && o ? o : e,
            g = c ? null : s;return a.setVisual({ legendSymbol: n || p, symbol: p, symbolSize: g, symbolKeepAspect: l, symbolRotate: u }), i.isSeriesFiltered(t) ? void 0 : { dataEach: a.hasItemOption || f ? r : null };
      } };
  },
      dS = function dS(t) {
    return { seriesType: t, plan: Ox(), reset: function reset(t) {
        function e(t, e) {
          for (var n = t.end - t.start, r = a && new Float32Array(n * s), l = t.start, u = 0, h = [], c = []; l < t.end; l++) {
            var d;if (1 === s) {
              var f = e.get(o[0], l);d = !isNaN(f) && i.dataToPoint(f, null, c);
            } else {
              var f = h[0] = e.get(o[0], l),
                  p = h[1] = e.get(o[1], l);d = !isNaN(f) && !isNaN(p) && i.dataToPoint(h, null, c);
            }a ? (r[u++] = d ? d[0] : 0 / 0, r[u++] = d ? d[1] : 0 / 0) : e.setItemLayout(l, d && d.slice() || [0 / 0, 0 / 0]);
          }a && e.setLayout("symbolPoints", r);
        }var n = t.getData(),
            i = t.coordinateSystem,
            r = t.pipelineContext,
            a = r.large;if (i) {
          var o = p(i.dimensions, function (t) {
            return n.mapDimension(t);
          }).slice(0, 2),
              s = o.length,
              l = n.getCalculationInfo("stackResultDimension");return ch(n, o[0]) && (o[0] = l), ch(n, o[1]) && (o[1] = l), s && { progress: e };
        }
      } };
  },
      fS = { average: function average(t) {
      for (var e = 0, n = 0, i = 0; i < t.length; i++) {
        isNaN(t[i]) || (e += t[i], n++);
      }return 0 === n ? 0 / 0 : e / n;
    }, sum: function sum(t) {
      for (var e = 0, n = 0; n < t.length; n++) {
        e += t[n] || 0;
      }return e;
    }, max: function max(t) {
      for (var e = -1 / 0, n = 0; n < t.length; n++) {
        t[n] > e && (e = t[n]);
      }return isFinite(e) ? e : 0 / 0;
    }, min: function min(t) {
      for (var e = 1 / 0, n = 0; n < t.length; n++) {
        t[n] < e && (e = t[n]);
      }return isFinite(e) ? e : 0 / 0;
    }, nearest: function nearest(t) {
      return t[0];
    } },
      pS = function pS(t) {
    return Math.round(t.length / 2);
  },
      gS = function gS(t) {
    return { seriesType: t, modifyOutputEnd: !0, reset: function reset(t) {
        var e = t.getData(),
            n = t.get("sampling"),
            i = t.coordinateSystem;if ("cartesian2d" === i.type && n) {
          var r = i.getBaseAxis(),
              a = i.getOtherAxis(r),
              o = r.getExtent(),
              s = Math.abs(o[1] - o[0]),
              l = Math.round(e.count() / s);if (l > 1) {
            var u;"string" == typeof n ? u = fS[n] : "function" == typeof n && (u = n), u && t.setData(e.downSample(e.mapDimension(a.dim), 1 / l, u, pS));
          }
        }
      } };
  };Iu(cS("line", "circle", "line")), Au(dS("line")), _u(E_.PROCESSOR.STATISTIC, gS("line"));var vS = function vS(t, e, n) {
    e = _(e) && { coordDimensions: e } || o({}, e);var i = t.getSource(),
        r = vw(i, e),
        a = new fw(r, t);return a.initData(i, n), a;
  },
      mS = { updateSelectedMap: function updateSelectedMap(t) {
      this._targetList = _(t) ? t.slice() : [], this._selectTargetMap = g(t || [], function (t, e) {
        return t.set(e.name, e), t;
      }, N());
    }, select: function select(t, e) {
      var n = null != e ? this._targetList[e] : this._selectTargetMap.get(t),
          i = this.get("selectedMode");"single" === i && this._selectTargetMap.each(function (t) {
        t.selected = !1;
      }), n && (n.selected = !0);
    }, unSelect: function unSelect(t, e) {
      var n = null != e ? this._targetList[e] : this._selectTargetMap.get(t);n && (n.selected = !1);
    }, toggleSelected: function toggleSelected(t, e) {
      var n = null != e ? this._targetList[e] : this._selectTargetMap.get(t);return null != n ? (this[n.selected ? "unSelect" : "select"](t, e), n.selected) : void 0;
    }, isSelected: function isSelected(t, e) {
      var n = null != e ? this._targetList[e] : this._selectTargetMap.get(t);return n && n.selected;
    } },
      yS = Pu({ type: "series.pie", init: function init(t) {
      yS.superApply(this, "init", arguments), this.legendVisualProvider = new Xd(y(this.getData, this), y(this.getRawData, this)), this.updateSelectedMap(this._createSelectableList()), this._defaultLabelLine(t);
    }, mergeOption: function mergeOption(t) {
      yS.superCall(this, "mergeOption", t), this.updateSelectedMap(this._createSelectableList());
    }, getInitialData: function getInitialData() {
      return vS(this, { coordDimensions: ["value"], encodeDefaulter: x(cs, this) });
    }, _createSelectableList: function _createSelectableList() {
      for (var t = this.getRawData(), e = t.mapDimension("value"), n = [], i = 0, r = t.count(); r > i; i++) {
        n.push({ name: t.getName(i), value: t.get(e, i), selected: $s(t, i, "selected") });
      }return n;
    }, getDataParams: function getDataParams(t) {
      var e = this.getData(),
          n = yS.superCall(this, "getDataParams", t),
          i = [];return e.each(e.mapDimension("value"), function (t) {
        i.push(t);
      }), n.percent = Io(i, t, e.hostModel.get("percentPrecision")), n.$vars.push("percent"), n;
    }, _defaultLabelLine: function _defaultLabelLine(t) {
      Ji(t, "labelLine", ["show"]);var e = t.labelLine,
          n = t.emphasis.labelLine;e.show = e.show && t.label.show, n.show = n.show && t.emphasis.label.show;
    }, defaultOption: { zlevel: 0, z: 2, legendHoverLink: !0, hoverAnimation: !0, center: ["50%", "50%"], radius: [0, "75%"], clockwise: !0, startAngle: 90, minAngle: 0, minShowLabelAngle: 0, selectedOffset: 10, hoverOffset: 10, avoidLabelOverlap: !0, percentPrecision: 2, stillShowZeroSum: !0, left: 0, top: 0, right: 0, bottom: 0, width: null, height: null, label: { rotate: !1, show: !0, position: "outer", alignTo: "none", margin: "25%", bleedMargin: 10, distanceToLabelLine: 5 }, labelLine: { show: !0, length: 15, length2: 15, smooth: !1, lineStyle: { width: 1, type: "solid" } }, itemStyle: { borderWidth: 1 }, animationType: "expansion", animationTypeUpdate: "transition", animationEasing: "cubicOut" } });c(yS, mS);var xS = qd.prototype;xS.updateData = function (t, e, n) {
    var i = this.childAt(0),
        r = this.childAt(1),
        a = this.childAt(2),
        l = t.hostModel,
        u = t.getItemModel(e),
        h = t.getItemLayout(e),
        c = o({}, h);c.label = null;var d = l.getShallow("animationTypeUpdate");if (n) {
      i.setShape(c);var f = l.getShallow("animationType");"scale" === f ? (i.shape.r = h.r0, Ja(i, { shape: { r: h.r } }, l, e)) : (i.shape.endAngle = h.startAngle, Qa(i, { shape: { endAngle: h.endAngle } }, l, e));
    } else "expansion" === d ? i.setShape(c) : Qa(i, { shape: c }, l, e);var p = t.getItemVisual(e, "color");i.useStyle(s({ lineJoin: "bevel", fill: p }, u.getModel("itemStyle").getItemStyle())), i.hoverStyle = u.getModel("emphasis.itemStyle").getItemStyle();var g = u.getShallow("cursor");g && i.attr("cursor", g), Yd(this, t.getItemLayout(e), l.isSelected(t.getName(e)), l.get("selectedOffset"), l.get("animation"));var v = !n && "transition" === d;this._updateLabel(t, e, v), this.highDownOnUpdate = l.get("silent") ? null : function (t, e) {
      var n = l.isAnimationEnabled() && u.get("hoverAnimation");"emphasis" === e ? (r.ignore = r.hoverIgnore, a.ignore = a.hoverIgnore, n && (i.stopAnimation(!0), i.animateTo({ shape: { r: h.r + l.get("hoverOffset") } }, 300, "elasticOut"))) : (r.ignore = r.normalIgnore, a.ignore = a.normalIgnore, n && (i.stopAnimation(!0), i.animateTo({ shape: { r: h.r } }, 300, "elasticOut")));
    }, za(this);
  }, xS._updateLabel = function (t, e, n) {
    var i = this.childAt(1),
        r = this.childAt(2),
        a = t.hostModel,
        o = t.getItemModel(e),
        s = t.getItemLayout(e),
        l = s.label,
        u = t.getItemVisual(e, "color");if (!l || isNaN(l.x) || isNaN(l.y)) return void (r.ignore = r.normalIgnore = r.hoverIgnore = i.ignore = i.normalIgnore = i.hoverIgnore = !0);var h = { points: l.linePoints || [[l.x, l.y], [l.x, l.y], [l.x, l.y]] },
        c = { x: l.x, y: l.y };n ? (Qa(i, { shape: h }, a, e), Qa(r, { style: c }, a, e)) : (i.attr({ shape: h }), r.attr({ style: c })), r.attr({ rotation: l.rotation, origin: [l.x, l.y], z2: 10 });var d = o.getModel("label"),
        f = o.getModel("emphasis.label"),
        p = o.getModel("labelLine"),
        g = o.getModel("emphasis.labelLine"),
        u = t.getItemVisual(e, "color");Va(r.style, r.hoverStyle = {}, d, f, { labelFetcher: t.hostModel, labelDataIndex: e, defaultText: l.text, autoColor: u, useInsideStyle: !!l.inside }, { textAlign: l.textAlign, textVerticalAlign: l.verticalAlign, opacity: t.getItemVisual(e, "opacity") }), r.ignore = r.normalIgnore = !d.get("show"), r.hoverIgnore = !f.get("show"), i.ignore = i.normalIgnore = !p.get("show"), i.hoverIgnore = !g.get("show"), i.setStyle({ stroke: u, opacity: t.getItemVisual(e, "opacity") }), i.setStyle(p.getModel("lineStyle").getLineStyle()), i.hoverStyle = g.getModel("lineStyle").getLineStyle();var v = p.get("smooth");v && v === !0 && (v = .4), i.setShape({ smooth: v });
  }, h(qd, _g);var _S = (hl.extend({ type: "pie", init: function init() {
      var t = new _g();this._sectorGroup = t;
    }, render: function render(t, e, n, i) {
      if (!i || i.from !== this.uid) {
        var r = t.getData(),
            a = this._data,
            o = this.group,
            s = e.get("animation"),
            l = !a,
            u = t.get("animationType"),
            h = t.get("animationTypeUpdate"),
            c = x(Ud, this.uid, t, s, n),
            d = t.get("selectedMode");if (r.diff(a).add(function (t) {
          var e = new qd(r, t);l && "scale" !== u && e.eachChild(function (t) {
            t.stopAnimation(!0);
          }), d && e.on("click", c), r.setItemGraphicEl(t, e), o.add(e);
        }).update(function (t, e) {
          var n = a.getItemGraphicEl(e);l || "transition" === h || n.eachChild(function (t) {
            t.stopAnimation(!0);
          }), n.updateData(r, t), n.off("click"), d && n.on("click", c), o.add(n), r.setItemGraphicEl(t, n);
        }).remove(function (t) {
          var e = a.getItemGraphicEl(t);o.remove(e);
        }).execute(), s && r.count() > 0 && (l ? "scale" !== u : "transition" !== h)) {
          for (var f = r.getItemLayout(0), p = 1; isNaN(f.startAngle) && p < r.count(); ++p) {
            f = r.getItemLayout(p);
          }var g = Math.max(n.getWidth(), n.getHeight()) / 2,
              v = y(o.removeClipPath, o);o.setClipPath(this._createClipPath(f.cx, f.cy, g, f.startAngle, f.clockwise, v, t, l));
        } else o.removeClipPath();this._data = r;
      }
    }, dispose: function dispose() {}, _createClipPath: function _createClipPath(t, e, n, i, r, a, o, s) {
      var l = new Fm({ shape: { cx: t, cy: e, r0: 0, r: n, startAngle: i, endAngle: i, clockwise: r } }),
          u = s ? Ja : Qa;return u(l, { shape: { endAngle: i + (r ? 1 : -1) * Math.PI * 2 } }, o, a), l;
    }, containPoint: function containPoint(t, e) {
      var n = e.getData(),
          i = n.getItemLayout(0);if (i) {
        var r = t[0] - i.cx,
            a = t[1] - i.cy,
            o = Math.sqrt(r * r + a * a);return o <= i.r && o >= i.r0;
      }
    } }), function (t, e) {
    f(e, function (e) {
      e.update = "updateView", bu(e, function (n, i) {
        var r = {};return i.eachComponent({ mainType: "series", subType: t, query: n }, function (t) {
          t[e.method] && t[e.method](n.name, n.dataIndex);var i = t.getData();i.each(function (e) {
            var n = i.getName(e);r[n] = t.isSelected(n) || !1;
          });
        }), { name: n.name, selected: r, seriesId: n.seriesId };
      });
    });
  }),
      wS = function wS(t) {
    return { getTargetSeries: function getTargetSeries(e) {
        var n = {},
            i = N();return e.eachSeriesByType(t, function (t) {
          t.__paletteScope = n, i.set(t.uid, t);
        }), i;
      }, reset: function reset(t) {
        var e = t.getRawData(),
            n = {},
            i = t.getData();i.each(function (t) {
          var e = i.getRawIndex(t);n[e] = t;
        }), e.each(function (r) {
          var a,
              o = n[r],
              s = null != o && i.getItemVisual(o, "color", !0),
              l = null != o && i.getItemVisual(o, "borderColor", !0);if (s && l || (a = e.getItemModel(r)), !s) {
            var u = a.get("itemStyle.color") || t.getColorFromPalette(e.getName(r) || r + "", t.__paletteScope, e.count());null != o && i.setItemVisual(o, "color", u);
          }if (!l) {
            var h = a.get("itemStyle.borderColor");null != o && i.setItemVisual(o, "borderColor", h);
          }
        });
      } };
  },
      bS = Math.PI / 180,
      SS = function SS(t, e, n, i, r, a) {
    var o,
        s,
        l = t.getData(),
        u = [],
        h = !1,
        c = (t.get("minShowLabelAngle") || 0) * bS;l.each(function (i) {
      var a = l.getItemLayout(i),
          d = l.getItemModel(i),
          f = d.getModel("label"),
          p = f.get("position") || d.get("emphasis.label.position"),
          g = f.get("distanceToLabelLine"),
          v = f.get("alignTo"),
          m = _o(f.get("margin"), n),
          y = f.get("bleedMargin"),
          x = f.getFont(),
          _ = d.getModel("labelLine"),
          w = _.get("length");w = _o(w, n);var b = _.get("length2");if (b = _o(b, n), !(a.angle < c)) {
        var S,
            M,
            A,
            I,
            T = (a.startAngle + a.endAngle) / 2,
            C = Math.cos(T),
            D = Math.sin(T);o = a.cx, s = a.cy;var k = t.getFormattedLabel(i, "normal") || l.getName(i),
            P = Xn(k, x, I, "top"),
            L = "inside" === p || "inner" === p;if ("center" === p) S = a.cx, M = a.cy, I = "center";else {
          var O = (L ? (a.r + a.r0) / 2 * C : a.r * C) + o,
              E = (L ? (a.r + a.r0) / 2 * D : a.r * D) + s;if (S = O + 3 * C, M = E + 3 * D, !L) {
            var B = O + C * (w + e - a.r),
                z = E + D * (w + e - a.r),
                R = B + (0 > C ? -1 : 1) * b,
                N = z;S = "edge" === v ? 0 > C ? r + m : r + n - m : R + (0 > C ? -g : g), M = N, A = [[O, E], [B, z], [R, N]];
          }I = L ? "center" : "edge" === v ? C > 0 ? "right" : "left" : C > 0 ? "left" : "right";
        }var F,
            V = f.get("rotate");F = "number" == typeof V ? V * (Math.PI / 180) : V ? 0 > C ? -T + Math.PI : -T : 0, h = !!F, a.label = { x: S, y: M, position: p, height: P.height, len: w, len2: b, linePoints: A, textAlign: I, verticalAlign: "middle", rotation: F, inside: L, labelDistance: g, labelAlignTo: v, labelMargin: m, bleedMargin: y, textRect: P, text: k, font: x }, L || u.push(a.label);
      }
    }), !h && t.get("avoidLabelOverlap") && Zd(u, o, s, e, n, i, r, a);
  },
      MS = 2 * Math.PI,
      AS = Math.PI / 180,
      IS = function IS(t, e, n) {
    e.eachSeriesByType(t, function (t) {
      var e = t.getData(),
          i = e.mapDimension("value"),
          r = $d(t, n),
          a = t.get("center"),
          o = t.get("radius");
      _(o) || (o = [0, o]), _(a) || (a = [a, a]);var s = _o(r.width, n.getWidth()),
          l = _o(r.height, n.getHeight()),
          u = Math.min(s, l),
          h = _o(a[0], s) + r.x,
          c = _o(a[1], l) + r.y,
          d = _o(o[0], u / 2),
          f = _o(o[1], u / 2),
          p = -t.get("startAngle") * AS,
          g = t.get("minAngle") * AS,
          v = 0;e.each(i, function (t) {
        !isNaN(t) && v++;
      });var m = e.getSum(i),
          y = Math.PI / (m || v) * 2,
          x = t.get("clockwise"),
          w = t.get("roseType"),
          b = t.get("stillShowZeroSum"),
          S = e.getDataExtent(i);S[0] = 0;var M = MS,
          A = 0,
          I = p,
          T = x ? 1 : -1;if (e.each(i, function (t, n) {
        var i;if (isNaN(t)) return void e.setItemLayout(n, { angle: 0 / 0, startAngle: 0 / 0, endAngle: 0 / 0, clockwise: x, cx: h, cy: c, r0: d, r: w ? 0 / 0 : f, viewRect: r });i = "area" !== w ? 0 === m && b ? y : t * y : MS / v, g > i ? (i = g, M -= g) : A += t;var a = I + T * i;e.setItemLayout(n, { angle: i, startAngle: I, endAngle: a, clockwise: x, cx: h, cy: c, r0: d, r: w ? xo(t, S, [d, f]) : f, viewRect: r }), I = a;
      }), MS > M && v) if (.001 >= M) {
        var C = MS / v;e.each(i, function (t, n) {
          if (!isNaN(t)) {
            var i = e.getItemLayout(n);i.angle = C, i.startAngle = p + T * n * C, i.endAngle = p + T * (n + 1) * C;
          }
        });
      } else y = M / A, I = p, e.each(i, function (t, n) {
        if (!isNaN(t)) {
          var i = e.getItemLayout(n),
              r = i.angle === g ? g : t * y;i.startAngle = I, i.endAngle = I + T * r, I += T * r;
        }
      });SS(t, f, r.width, r.height, r.x, r.y);
    });
  },
      TS = function TS(t) {
    return { seriesType: t, reset: function reset(t, e) {
        var n = e.findComponents({ mainType: "legend" });if (n && n.length) {
          var i = t.getData();i.filterSelf(function (t) {
            for (var e = i.getName(t), r = 0; r < n.length; r++) {
              if (!n[r].isSelected(e)) return !1;
            }return !0;
          });
        }
      } };
  };_S("pie", [{ type: "pieToggleSelect", event: "pieselectchanged", method: "toggleSelected" }, { type: "pieSelect", event: "pieselected", method: "select" }, { type: "pieUnSelect", event: "pieunselected", method: "unSelect" }]), Iu(wS("pie")), Au(x(IS, "pie")), _u(TS("pie")), h(Qd, lb), Jd.prototype.getIndicatorAxes = function () {
    return this._indicatorAxes;
  }, Jd.prototype.dataToPoint = function (t, e) {
    var n = this._indicatorAxes[e];return this.coordToPoint(n.dataToCoord(t), e);
  }, Jd.prototype.coordToPoint = function (t, e) {
    var n = this._indicatorAxes[e],
        i = n.angle,
        r = this.cx + t * Math.cos(i),
        a = this.cy - t * Math.sin(i);return [r, a];
  }, Jd.prototype.pointToData = function (t) {
    var e = t[0] - this.cx,
        n = t[1] - this.cy,
        i = Math.sqrt(e * e + n * n);e /= i, n /= i;for (var r, a = Math.atan2(-n, e), o = 1 / 0, s = -1, l = 0; l < this._indicatorAxes.length; l++) {
      var u = this._indicatorAxes[l],
          h = Math.abs(a - u.angle);o > h && (r = u, s = l, o = h);
    }return [s, +(r && r.coordToData(i))];
  }, Jd.prototype.resize = function (t, e) {
    var n = t.get("center"),
        i = e.getWidth(),
        r = e.getHeight(),
        a = Math.min(i, r) / 2;this.cx = _o(n[0], i), this.cy = _o(n[1], r), this.startAngle = t.get("startAngle") * Math.PI / 180;var o = t.get("radius");("string" == typeof o || "number" == typeof o) && (o = [0, o]), this.r0 = _o(o[0], a), this.r = _o(o[1], a), f(this._indicatorAxes, function (t, e) {
      t.setExtent(this.r0, this.r);var n = this.startAngle + e * Math.PI * 2 / this._indicatorAxes.length;n = Math.atan2(Math.sin(n), Math.cos(n)), t.angle = n;
    }, this);
  }, Jd.prototype.update = function (t) {
    function e(t) {
      var e = Math.pow(10, Math.floor(Math.log(t) / Math.LN10)),
          n = t / e;return 2 === n ? n = 5 : n *= 2, n * e;
    }var n = this._indicatorAxes,
        i = this._model;f(n, function (t) {
      t.scale.setExtent(1 / 0, -1 / 0);
    }), t.eachSeriesByType("radar", function (e) {
      if ("radar" === e.get("coordinateSystem") && t.getComponent("radar", e.get("radarIndex")) === i) {
        var r = e.getData();f(n, function (t) {
          t.scale.unionExtentFromData(r, r.mapDimension(t.dim));
        });
      }
    }, this);var r = i.get("splitNumber");f(n, function (t) {
      var n = zh(t.scale, t.model).extent;Nh(t.scale, t.model);var i = t.model,
          a = t.scale,
          o = i.getMin(),
          s = i.getMax(),
          l = a.getInterval();if (null != o && null != s) a.setExtent(+o, +s), a.setInterval((s - o) / r);else if (null != o) {
        var u;do {
          u = o + l * r, a.setExtent(+o, u), a.setInterval(l), l = e(l);
        } while (u < n[1] && isFinite(u) && isFinite(n[1]));
      } else if (null != s) {
        var h;do {
          h = s - l * r, a.setExtent(h, +s), a.setInterval(l), l = e(l);
        } while (h > n[0] && isFinite(h) && isFinite(n[0]));
      } else {
        var c = a.getTicks().length - 1;c > r && (l = e(l));var u = Math.ceil(n[1] / l) * l,
            h = wo(u - l * r);a.setExtent(h, u), a.setInterval(l);
      }
    });
  }, Jd.dimensions = [], Jd.create = function (t, e) {
    var n = [];return t.eachComponent("radar", function (i) {
      var r = new Jd(i, t, e);n.push(r), i.coordinateSystem = r;
    }), t.eachSeriesByType("radar", function (t) {
      "radar" === t.get("coordinateSystem") && (t.coordinateSystem = n[t.get("radarIndex") || 0]);
    }), n;
  }, Ms.register("radar", Jd);var CS = gb.valueAxis,
      DS = (Du({ type: "radar", optionUpdated: function optionUpdated() {
      var t = this.get("boundaryGap"),
          e = this.get("splitNumber"),
          n = this.get("scale"),
          a = this.get("axisLine"),
          l = this.get("axisTick"),
          u = this.get("axisType"),
          h = this.get("axisLabel"),
          c = this.get("name"),
          d = this.get("name.show"),
          f = this.get("name.formatter"),
          g = this.get("nameGap"),
          v = this.get("triggerEvent"),
          m = p(this.get("indicator") || [], function (p) {
        null != p.max && p.max > 0 && !p.min ? p.min = 0 : null != p.min && p.min < 0 && !p.max && (p.max = 0);var m = c;if (null != p.color && (m = s({ color: p.color }, c)), p = r(i(p), { boundaryGap: t, splitNumber: e, scale: n, axisLine: a, axisTick: l, axisType: u, axisLabel: h, name: p.text, nameLocation: "end", nameGap: g, nameTextStyle: m, triggerEvent: v }, !1), d || (p.name = ""), "string" == typeof f) {
          var y = p.name;p.name = f.replace("{value}", null != y ? y : "");
        } else "function" == typeof f && (p.name = f(p.name, p));var x = o(new co(p, null, this.ecModel), qw);return x.mainType = "radar", x.componentIndex = this.componentIndex, x;
      }, this);this.getIndicatorModels = function () {
        return m;
      };
    }, defaultOption: { zlevel: 0, z: 0, center: ["50%", "50%"], radius: "75%", startAngle: 90, name: { show: !0 }, boundaryGap: [0, 0], splitNumber: 5, nameGap: 15, scale: !1, shape: "polygon", axisLine: r({ lineStyle: { color: "#bbb" } }, CS.axisLine), axisLabel: tf(CS.axisLabel, !1), axisTick: tf(CS.axisTick, !1), axisType: "interval", splitLine: tf(CS.splitLine, !0), splitArea: tf(CS.splitArea, !0), indicator: [] } }), ["axisLine", "axisTickLabel", "axisName"]);ku({ type: "radar", render: function render(t) {
      var e = this.group;e.removeAll(), this._buildAxes(t), this._buildSplitLineAndArea(t);
    }, _buildAxes: function _buildAxes(t) {
      var e = t.coordinateSystem,
          n = e.getIndicatorAxes(),
          i = p(n, function (t) {
        var n = new zb(t.model, { position: [e.cx, e.cy], rotation: t.angle, labelDirection: -1, tickDirection: -1, nameDirection: 1 });return n;
      });f(i, function (t) {
        f(DS, t.add, t), this.group.add(t.getGroup());
      }, this);
    }, _buildSplitLineAndArea: function _buildSplitLineAndArea(t) {
      function e(t, e, n) {
        var i = n % e.length;return t[i] = t[i] || [], i;
      }var n = t.coordinateSystem,
          i = n.getIndicatorAxes();if (i.length) {
        var r = t.get("shape"),
            a = t.getModel("splitLine"),
            o = t.getModel("splitArea"),
            l = a.getModel("lineStyle"),
            u = o.getModel("areaStyle"),
            h = a.get("show"),
            c = o.get("show"),
            d = l.get("color"),
            g = u.get("color");d = _(d) ? d : [d], g = _(g) ? g : [g];var v = [],
            m = [];if ("circle" === r) for (var y = i[0].getTicksCoords(), x = n.cx, w = n.cy, b = 0; b < y.length; b++) {
          if (h) {
            var S = e(v, d, b);v[S].push(new zm({ shape: { cx: x, cy: w, r: y[b].coord } }));
          }if (c && b < y.length - 1) {
            var S = e(m, g, b);m[S].push(new Vm({ shape: { cx: x, cy: w, r0: y[b].coord, r: y[b + 1].coord } }));
          }
        } else for (var M, A = p(i, function (t, e) {
          var i = t.getTicksCoords();return M = null == M ? i.length - 1 : Math.min(i.length - 1, M), p(i, function (t) {
            return n.coordToPoint(t.coord, e);
          });
        }), I = [], b = 0; M >= b; b++) {
          for (var T = [], C = 0; C < i.length; C++) {
            T.push(A[C][b]);
          }if (T[0] ? T.push(T[0].slice()) : ip && console.error("Can't draw value axis " + b), h) {
            var S = e(v, d, b);v[S].push(new Xm({ shape: { points: T } }));
          }if (c && I) {
            var S = e(m, g, b - 1);m[S].push(new Gm({ shape: { points: T.concat(I) } }));
          }I = T.slice().reverse();
        }var D = l.getLineStyle(),
            k = u.getAreaStyle();f(m, function (t, e) {
          this.group.add(py(t, { style: s({ stroke: "none", fill: g[e % g.length] }, k), silent: !0 }));
        }, this), f(v, function (t, e) {
          this.group.add(py(t, { style: s({ fill: "none", stroke: d[e % d.length] }, D), silent: !0 }));
        }, this);
      }
    } });var kS = kx.extend({ type: "series.radar", dependencies: ["radar"], init: function init() {
      kS.superApply(this, "init", arguments), this.legendVisualProvider = new Xd(y(this.getData, this), y(this.getRawData, this));
    }, getInitialData: function getInitialData() {
      return vS(this, { generateCoord: "indicator_", generateCoordCount: 1 / 0 });
    }, formatTooltip: function formatTooltip(t, e, n, i) {
      var r = this.getData(),
          a = this.coordinateSystem,
          o = a.getIndicatorAxes(),
          s = this.getData().getName(t),
          l = "html" === i ? "<br/>" : "\n";return No("" === s ? this.name : s) + l + p(o, function (e) {
        var n = r.get(r.mapDimension(e.dim), t);return No(e.name + " : " + n);
      }).join(l);
    }, getTooltipPosition: function getTooltipPosition(t) {
      if (null != t) for (var e = this.getData(), n = this.coordinateSystem, i = e.getValues(p(n.dimensions, function (t) {
        return e.mapDimension(t);
      }), t, !0), r = 0, a = i.length; a > r; r++) {
        if (!isNaN(i[r])) {
          var o = n.getIndicatorAxes();return n.coordToPoint(o[r].dataToCoord(i[r]), r);
        }
      }
    }, defaultOption: { zlevel: 0, z: 2, coordinateSystem: "radar", legendHoverLink: !0, radarIndex: 0, lineStyle: { width: 2, type: "solid" }, label: { position: "top" }, symbol: "emptyCircle", symbolSize: 4 } });Lu({ type: "radar", render: function render(t) {
      function e(t, e) {
        var n = t.getItemVisual(e, "symbol") || "circle",
            i = t.getItemVisual(e, "color");if ("none" !== n) {
          var r = ef(t.getItemVisual(e, "symbolSize")),
              a = jh(n, -1, -1, 2, 2, i),
              o = t.getItemVisual(e, "symbolRotate") || 0;return a.attr({ style: { strokeNoScale: !0 }, z2: 100, scale: [r[0] / 2, r[1] / 2], rotation: o * Math.PI / 180 || 0 }), a;
        }
      }function n(n, i, r, a, o, s) {
        r.removeAll();for (var l = 0; l < i.length - 1; l++) {
          var u = e(a, o);u && (u.__dimIdx = l, n[l] ? (u.attr("position", n[l]), yy[s ? "initProps" : "updateProps"](u, { position: i[l] }, t, o)) : u.attr("position", i[l]), r.add(u));
        }
      }function r(t) {
        return p(t, function () {
          return [a.cx, a.cy];
        });
      }var a = t.coordinateSystem,
          o = this.group,
          l = t.getData(),
          u = this._data;l.diff(u).add(function (e) {
        var i = l.getItemLayout(e);if (i) {
          var a = new Gm(),
              o = new Xm(),
              s = { shape: { points: i } };a.shape.points = r(i), o.shape.points = r(i), Ja(a, s, t, e), Ja(o, s, t, e);var u = new _g(),
              h = new _g();u.add(o), u.add(a), u.add(h), n(o.shape.points, i, h, l, e, !0), l.setItemGraphicEl(e, u);
        }
      }).update(function (e, i) {
        var r = u.getItemGraphicEl(i),
            a = r.childAt(0),
            o = r.childAt(1),
            s = r.childAt(2),
            h = { shape: { points: l.getItemLayout(e) } };h.shape.points && (n(a.shape.points, h.shape.points, s, l, e, !1), Qa(a, h, t), Qa(o, h, t), l.setItemGraphicEl(e, r));
      }).remove(function (t) {
        o.remove(u.getItemGraphicEl(t));
      }).execute(), l.eachItemGraphicEl(function (t, e) {
        var n = l.getItemModel(e),
            r = t.childAt(0),
            a = t.childAt(1),
            u = t.childAt(2),
            h = l.getItemVisual(e, "color");o.add(t), r.useStyle(s(n.getModel("lineStyle").getLineStyle(), { fill: "none", stroke: h })), r.hoverStyle = n.getModel("emphasis.lineStyle").getLineStyle();var c = n.getModel("areaStyle"),
            d = n.getModel("emphasis.areaStyle"),
            f = c.isEmpty() && c.parentModel.isEmpty(),
            p = d.isEmpty() && d.parentModel.isEmpty();p = p && f, a.ignore = f, a.useStyle(s(c.getAreaStyle(), { fill: h, opacity: .7 })), a.hoverStyle = d.getAreaStyle();var g = n.getModel("itemStyle").getItemStyle(["color"]),
            v = n.getModel("emphasis.itemStyle").getItemStyle(),
            m = n.getModel("label"),
            y = n.getModel("emphasis.label");u.eachChild(function (t) {
          t.setStyle(g), t.hoverStyle = i(v);var n = l.get(l.dimensions[t.__dimIdx], e);(null == n || isNaN(n)) && (n = ""), Va(t.style, t.hoverStyle, m, y, { labelFetcher: l.hostModel, labelDataIndex: e, labelDimIndex: t.__dimIdx, defaultText: n, autoColor: h, isRectText: !0 });
        }), t.highDownOnUpdate = function (t, e) {
          a.attr("ignore", "emphasis" === e ? p : f);
        }, za(t);
      }), this._data = l;
    }, remove: function remove() {
      this.group.removeAll(), this._data = null;
    }, dispose: function dispose() {} });var PS = function PS(t) {
    t.eachSeriesByType("radar", function (t) {
      var e = t.getData(),
          n = [],
          i = t.coordinateSystem;if (i) {
        var r = i.getIndicatorAxes();f(r, function (t, a) {
          e.each(e.mapDimension(r[a].dim), function (t, e) {
            n[e] = n[e] || [];var r = i.dataToPoint(t, a);n[e][a] = nf(r) ? r : rf(i);
          });
        }), e.each(function (t) {
          var r = m(n[t], function (t) {
            return nf(t);
          }) || rf(i);n[t].push(r.slice()), e.setItemLayout(t, n[t]);
        });
      }
    });
  },
      LS = function LS(t) {
    var e = t.polar;if (e) {
      _(e) || (e = [e]);var n = [];f(e, function (e) {
        e.indicator ? (e.type && !e.shape && (e.shape = e.type), t.radar = t.radar || [], _(t.radar) || (t.radar = [t.radar]), t.radar.push(e)) : n.push(e);
      }), t.polar = n;
    }f(t.series, function (t) {
      t && "radar" === t.type && t.polarIndex && (t.radarIndex = t.polarIndex);
    });
  };Iu(wS("radar")), Iu(cS("radar", "circle")), Au(PS), _u(TS("radar")), xu(LS);{
    var OS = (kx.extend({ type: "series.gauge", getInitialData: function getInitialData() {
        return vS(this, ["value"]);
      }, defaultOption: { zlevel: 0, z: 2, center: ["50%", "50%"], legendHoverLink: !0, radius: "75%", startAngle: 225, endAngle: -45, clockwise: !0, min: 0, max: 100, splitNumber: 10, axisLine: { show: !0, lineStyle: { color: [[.2, "#91c7ae"], [.8, "#63869e"], [1, "#c23531"]], width: 30 } }, splitLine: { show: !0, length: 30, lineStyle: { color: "#eee", width: 2, type: "solid" } }, axisTick: { show: !0, splitNumber: 5, length: 8, lineStyle: { color: "#eee", width: 1, type: "solid" } }, axisLabel: { show: !0, distance: 5, color: "auto" }, pointer: { show: !0, length: "80%", width: 8 }, itemStyle: { color: "auto" }, title: { show: !0, offsetCenter: [0, "-40%"], color: "#333", fontSize: 15 }, detail: { show: !0, backgroundColor: "rgba(0,0,0,0)", borderWidth: 0, borderColor: "#ccc", width: 100, height: null, padding: [5, 10], offsetCenter: [0, "40%"], color: "auto", fontSize: 30 } } }), Jr.extend({ type: "echartsGaugePointer", shape: { angle: 0, width: 10, r: 10, x: 0, y: 0 }, buildPath: function buildPath(t, e) {
        var n = Math.cos,
            i = Math.sin,
            r = e.r,
            a = e.width,
            o = e.angle,
            s = e.x - n(o) * a * (a >= r / 3 ? 1 : 2),
            l = e.y - i(o) * a * (a >= r / 3 ? 1 : 2);o = e.angle - Math.PI / 2, t.moveTo(s, l), t.lineTo(e.x + n(o) * a, e.y + i(o) * a), t.lineTo(e.x + n(e.angle) * r, e.y + i(e.angle) * r), t.lineTo(e.x - n(o) * a, e.y - i(o) * a), t.lineTo(s, l);
      } })),
        ES = 2 * Math.PI;hl.extend({ type: "gauge", render: function render(t, e, n) {
        this.group.removeAll();var i = t.get("axisLine.lineStyle.color"),
            r = af(t, n);this._renderMain(t, e, n, i, r);
      }, dispose: function dispose() {}, _renderMain: function _renderMain(t, e, n, i, r) {
        for (var a = this.group, o = t.getModel("axisLine"), s = o.getModel("lineStyle"), l = t.get("clockwise"), u = -t.get("startAngle") / 180 * Math.PI, h = -t.get("endAngle") / 180 * Math.PI, c = (h - u) % ES, d = u, f = s.get("width"), p = o.get("show"), g = 0; p && g < i.length; g++) {
          var v = Math.min(Math.max(i[g][0], 0), 1),
              h = u + c * v,
              m = new Fm({ shape: { startAngle: d, endAngle: h, cx: r.cx, cy: r.cy, clockwise: l, r0: r.r - f, r: r.r }, silent: !0 });m.setStyle({ fill: i[g][1] }), m.setStyle(s.getLineStyle(["color", "borderWidth", "borderColor"])), a.add(m), d = h;
        }var y = function y(t) {
          if (0 >= t) return i[0][1];for (var e = 0; e < i.length; e++) {
            if (i[e][0] >= t && (0 === e ? 0 : i[e - 1][0]) < t) return i[e][1];
          }return i[e - 1][1];
        };if (!l) {
          var x = u;u = h, h = x;
        }this._renderTicks(t, e, n, y, r, u, h, l), this._renderPointer(t, e, n, y, r, u, h, l), this._renderTitle(t, e, n, y, r), this._renderDetail(t, e, n, y, r);
      }, _renderTicks: function _renderTicks(t, e, n, i, r, a, o) {
        for (var s = this.group, l = r.cx, u = r.cy, h = r.r, c = +t.get("min"), d = +t.get("max"), f = t.getModel("splitLine"), p = t.getModel("axisTick"), g = t.getModel("axisLabel"), v = t.get("splitNumber"), m = p.get("splitNumber"), y = _o(f.get("length"), h), x = _o(p.get("length"), h), _ = a, w = (o - a) / v, b = w / m, S = f.getModel("lineStyle").getLineStyle(), M = p.getModel("lineStyle").getLineStyle(), A = 0; v >= A; A++) {
          var I = Math.cos(_),
              T = Math.sin(_);if (f.get("show")) {
            var C = new Zm({ shape: { x1: I * h + l, y1: T * h + u, x2: I * (h - y) + l, y2: T * (h - y) + u }, style: S, silent: !0 });"auto" === S.stroke && C.setStyle({ stroke: i(A / v) }), s.add(C);
          }if (g.get("show")) {
            var D = of(wo(A / v * (d - c) + c), g.get("formatter")),
                k = g.get("distance"),
                P = i(A / v);s.add(new Bm({ style: Wa({}, g, { text: D, x: I * (h - y - k) + l, y: T * (h - y - k) + u, textVerticalAlign: -.4 > T ? "top" : T > .4 ? "bottom" : "middle", textAlign: -.4 > I ? "left" : I > .4 ? "right" : "center" }, { autoColor: P }), silent: !0 }));
          }if (p.get("show") && A !== v) {
            for (var L = 0; m >= L; L++) {
              var I = Math.cos(_),
                  T = Math.sin(_),
                  O = new Zm({ shape: { x1: I * h + l, y1: T * h + u, x2: I * (h - x) + l, y2: T * (h - x) + u }, silent: !0, style: M });"auto" === M.stroke && O.setStyle({ stroke: i((A + L / m) / v) }), s.add(O), _ += b;
            }_ -= b;
          } else _ += w;
        }
      }, _renderPointer: function _renderPointer(t, e, n, i, r, a, o) {
        var s = this.group,
            l = this._data;if (!t.get("pointer.show")) return void (l && l.eachItemGraphicEl(function (t) {
          s.remove(t);
        }));var u = [+t.get("min"), +t.get("max")],
            h = [a, o],
            c = t.getData(),
            d = c.mapDimension("value");c.diff(l).add(function (e) {
          var n = new OS({ shape: { angle: a } });Ja(n, { shape: { angle: xo(c.get(d, e), u, h, !0) } }, t), s.add(n), c.setItemGraphicEl(e, n);
        }).update(function (e, n) {
          var i = l.getItemGraphicEl(n);Qa(i, { shape: { angle: xo(c.get(d, e), u, h, !0) } }, t), s.add(i), c.setItemGraphicEl(e, i);
        }).remove(function (t) {
          var e = l.getItemGraphicEl(t);s.remove(e);
        }).execute(), c.eachItemGraphicEl(function (t, e) {
          var n = c.getItemModel(e),
              a = n.getModel("pointer");t.setShape({ x: r.cx, y: r.cy, width: _o(a.get("width"), r.r), r: _o(a.get("length"), r.r) }), t.useStyle(n.getModel("itemStyle").getItemStyle()), "auto" === t.style.fill && t.setStyle("fill", i(xo(c.get(d, e), u, [0, 1], !0))), za(t, n.getModel("emphasis.itemStyle").getItemStyle());
        }), this._data = c;
      }, _renderTitle: function _renderTitle(t, e, n, i, r) {
        var a = t.getData(),
            o = a.mapDimension("value"),
            s = t.getModel("title");if (s.get("show")) {
          var l = s.get("offsetCenter"),
              u = r.cx + _o(l[0], r.r),
              h = r.cy + _o(l[1], r.r),
              c = +t.get("min"),
              d = +t.get("max"),
              f = t.getData().get(o, 0),
              p = i(xo(f, [c, d], [0, 1], !0));this.group.add(new Bm({ silent: !0, style: Wa({}, s, { x: u, y: h, text: a.getName(0), textAlign: "center", textVerticalAlign: "middle" }, { autoColor: p, forceRich: !0 }) }));
        }
      }, _renderDetail: function _renderDetail(t, e, n, i, r) {
        var a = t.getModel("detail"),
            o = +t.get("min"),
            s = +t.get("max");if (a.get("show")) {
          var l = a.get("offsetCenter"),
              u = r.cx + _o(l[0], r.r),
              h = r.cy + _o(l[1], r.r),
              c = _o(a.get("width"), r.r),
              d = _o(a.get("height"), r.r),
              f = t.getData(),
              p = f.get(f.mapDimension("value"), 0),
              g = i(xo(p, [o, s], [0, 1], !0));this.group.add(new Bm({ silent: !0, style: Wa({}, a, { x: u, y: h, text: of(p, a.get("formatter")), textWidth: isNaN(c) ? null : c, textHeight: isNaN(d) ? null : d, textAlign: "center", textVerticalAlign: "middle" }, { autoColor: g, forceRich: !0 }) }));
        }
      } });
  }cf.prototype = { constructor: cf, pointToData: function pointToData(t, e) {
      return this.polar.pointToData(t, e)["radius" === this.dim ? 0 : 1];
    }, dataToRadius: lb.prototype.dataToCoord, radiusToData: lb.prototype.coordToData }, h(cf, lb);var BS = sr();df.prototype = { constructor: df, pointToData: function pointToData(t, e) {
      return this.polar.pointToData(t, e)["radius" === this.dim ? 0 : 1];
    }, dataToAngle: lb.prototype.dataToCoord, angleToData: lb.prototype.coordToData, calculateCategoryInterval: function calculateCategoryInterval() {
      var t = this,
          e = t.getLabelModel(),
          n = t.scale,
          i = n.getExtent(),
          r = n.count();if (i[1] - i[0] < 1) return 0;var a = i[0],
          o = t.dataToCoord(a + 1) - t.dataToCoord(a),
          s = Math.abs(o),
          l = Xn(a, e.getFont(), "center", "top"),
          u = Math.max(l.height, 7),
          h = u / s;isNaN(h) && (h = 1 / 0);var c = Math.max(0, Math.floor(h)),
          d = BS(t.model),
          f = d.lastAutoInterval,
          p = d.lastTickCount;return null != f && null != p && Math.abs(f - c) <= 1 && Math.abs(p - r) <= 1 && f > c ? c = f : (d.lastTickCount = r, d.lastAutoInterval = c), c;
    } }, h(df, lb);var zS = function zS(t) {
    this.name = t || "", this.cx = 0, this.cy = 0, this._radiusAxis = new cf(), this._angleAxis = new df(), this._radiusAxis.polar = this._angleAxis.polar = this;
  };zS.prototype = { type: "polar", axisPointerEnabled: !0, constructor: zS, dimensions: ["radius", "angle"], model: null, containPoint: function containPoint(t) {
      var e = this.pointToCoord(t);return this._radiusAxis.contain(e[0]) && this._angleAxis.contain(e[1]);
    }, containData: function containData(t) {
      return this._radiusAxis.containData(t[0]) && this._angleAxis.containData(t[1]);
    }, getAxis: function getAxis(t) {
      return this["_" + t + "Axis"];
    }, getAxes: function getAxes() {
      return [this._radiusAxis, this._angleAxis];
    }, getAxesByScale: function getAxesByScale(t) {
      var e = [],
          n = this._angleAxis,
          i = this._radiusAxis;return n.scale.type === t && e.push(n), i.scale.type === t && e.push(i), e;
    }, getAngleAxis: function getAngleAxis() {
      return this._angleAxis;
    }, getRadiusAxis: function getRadiusAxis() {
      return this._radiusAxis;
    }, getOtherAxis: function getOtherAxis(t) {
      var e = this._angleAxis;return t === e ? this._radiusAxis : e;
    }, getBaseAxis: function getBaseAxis() {
      return this.getAxesByScale("ordinal")[0] || this.getAxesByScale("time")[0] || this.getAngleAxis();
    }, getTooltipAxes: function getTooltipAxes(t) {
      var e = null != t && "auto" !== t ? this.getAxis(t) : this.getBaseAxis();return { baseAxes: [e], otherAxes: [this.getOtherAxis(e)] };
    }, dataToPoint: function dataToPoint(t, e) {
      return this.coordToPoint([this._radiusAxis.dataToRadius(t[0], e), this._angleAxis.dataToAngle(t[1], e)]);
    }, pointToData: function pointToData(t, e) {
      var n = this.pointToCoord(t);return [this._radiusAxis.radiusToData(n[0], e), this._angleAxis.angleToData(n[1], e)];
    }, pointToCoord: function pointToCoord(t) {
      var e = t[0] - this.cx,
          n = t[1] - this.cy,
          i = this.getAngleAxis(),
          r = i.getExtent(),
          a = Math.min(r[0], r[1]),
          o = Math.max(r[0], r[1]);i.inverse ? a = o - 360 : o = a + 360;var s = Math.sqrt(e * e + n * n);e /= s, n /= s;for (var l = Math.atan2(-n, e) / Math.PI * 180, u = a > l ? 1 : -1; a > l || l > o;) {
        l += 360 * u;
      }return [s, l];
    }, coordToPoint: function coordToPoint(t) {
      var e = t[0],
          n = t[1] / 180 * Math.PI,
          i = Math.cos(n) * e + this.cx,
          r = -Math.sin(n) * e + this.cy;return [i, r];
    }, getArea: function getArea() {
      var t = this.getAngleAxis(),
          e = this.getRadiusAxis(),
          n = e.getExtent().slice();n[0] > n[1] && n.reverse();var i = t.getExtent(),
          r = Math.PI / 180;return { cx: this.cx, cy: this.cy, r0: n[0], r: n[1], startAngle: -i[0] * r, endAngle: -i[1] * r, clockwise: t.inverse, contain: function contain(t, e) {
          var n = t - this.cx,
              i = e - this.cy,
              r = n * n + i * i,
              a = this.r,
              o = this.r0;return a * a >= r && r >= o * o;
        } };
    } };var RS = Wy.extend({ type: "polarAxis", axis: null, getCoordSysModel: function getCoordSysModel() {
      return this.ecModel.queryComponents({ mainType: "polar", index: this.option.polarIndex, id: this.option.polarId })[0];
    } });r(RS.prototype, qw);var NS = { angle: { startAngle: 90, clockwise: !0, splitNumber: 12, axisLabel: { rotate: !1 } }, radius: { splitNumber: 5 } };mb("angle", RS, ff, NS.angle), mb("radius", RS, ff, NS.radius), Du({ type: "polar", dependencies: ["polarAxis", "angleAxis"], coordinateSystem: null, findAxisModel: function findAxisModel(t) {
      var e,
          n = this.ecModel;return n.eachComponent(t, function (t) {
        t.getCoordSysModel() === this && (e = t);
      }, this), e;
    }, defaultOption: { zlevel: 0, z: 0, center: ["50%", "50%"], radius: "80%" } });var FS = { dimensions: zS.prototype.dimensions, create: function create(t, e) {
      var n = [];return t.eachComponent("polar", function (t, i) {
        var r = new zS(i);r.update = gf;var a = r.getRadiusAxis(),
            o = r.getAngleAxis(),
            s = t.findAxisModel("radiusAxis"),
            l = t.findAxisModel("angleAxis");vf(a, s), vf(o, l), pf(r, t, e), n.push(r), t.coordinateSystem = r, r.model = t;
      }), t.eachSeries(function (e) {
        if ("polar" === e.get("coordinateSystem")) {
          var n = t.queryComponents({ mainType: "polar", index: e.get("polarIndex"), id: e.get("polarId") })[0];if (ip && !n) throw new Error('Polar "' + C(e.get("polarIndex"), e.get("polarId"), 0) + '" not found');e.coordinateSystem = n.coordinateSystem;
        }
      }), n;
    } };Ms.register("polar", FS);var VS = ["axisLine", "axisLabel", "axisTick", "minorTick", "splitLine", "minorSplitLine", "splitArea"];Gb.extend({ type: "angleAxis", axisPointerClass: "PolarAxisPointer", render: function render(t) {
      if (this.group.removeAll(), t.get("show")) {
        var e = t.axis,
            n = e.polar,
            r = n.getRadiusAxis().getExtent(),
            a = e.getTicksCoords(),
            o = e.getMinorTicksCoords(),
            s = p(e.getViewLabels(), function (t) {
          var t = i(t);return t.coord = e.dataToCoord(t.tickValue), t;
        });xf(s), xf(a), f(VS, function (i) {
          !t.get(i + ".show") || e.scale.isBlank() && "axisLine" !== i || this["_" + i](t, n, a, o, r, s);
        }, this);
      }
    }, _axisLine: function _axisLine(t, e, n, i, r) {
      var a,
          o = t.getModel("axisLine.lineStyle"),
          s = yf(e),
          l = s ? 0 : 1;a = 0 === r[l] ? new zm({ shape: { cx: e.cx, cy: e.cy, r: r[s] }, style: o.getLineStyle(), z2: 1, silent: !0 }) : new Vm({ shape: { cx: e.cx, cy: e.cy, r: r[s], r0: r[l] }, style: o.getLineStyle(), z2: 1, silent: !0 }), a.style.fill = null, this.group.add(a);
    }, _axisTick: function _axisTick(t, e, n, i, r) {
      var a = t.getModel("axisTick"),
          o = (a.get("inside") ? -1 : 1) * a.get("length"),
          l = r[yf(e)],
          u = p(n, function (t) {
        return new Zm({ shape: mf(e, [l, l + o], t.coord) });
      });this.group.add(py(u, { style: s(a.getModel("lineStyle").getLineStyle(), { stroke: t.get("axisLine.lineStyle.color") }) }));
    }, _minorTick: function _minorTick(t, e, n, i, r) {
      if (i.length) {
        for (var a = t.getModel("axisTick"), o = t.getModel("minorTick"), l = (a.get("inside") ? -1 : 1) * o.get("length"), u = r[yf(e)], h = [], c = 0; c < i.length; c++) {
          for (var d = 0; d < i[c].length; d++) {
            h.push(new Zm({ shape: mf(e, [u, u + l], i[c][d].coord) }));
          }
        }this.group.add(py(h, { style: s(o.getModel("lineStyle").getLineStyle(), s(a.getLineStyle(), { stroke: t.get("axisLine.lineStyle.color") })) }));
      }
    }, _axisLabel: function _axisLabel(t, e, n, i, r, a) {
      var o = t.getCategories(!0),
          s = t.getModel("axisLabel"),
          l = s.get("margin"),
          u = t.get("triggerEvent");f(a, function (n) {
        var i = s,
            a = n.tickValue,
            h = r[yf(e)],
            c = e.coordToPoint([h + l, n.coord]),
            d = e.cx,
            f = e.cy,
            p = Math.abs(c[0] - d) / h < .3 ? "center" : c[0] > d ? "left" : "right",
            g = Math.abs(c[1] - f) / h < .3 ? "middle" : c[1] > f ? "top" : "bottom";o && o[a] && o[a].textStyle && (i = new co(o[a].textStyle, s, s.ecModel));var v = new Bm({ silent: zb.isLabelSilent(t) });this.group.add(v), Wa(v.style, i, { x: c[0], y: c[1], textFill: i.getTextColor() || t.get("axisLine.lineStyle.color"), text: n.formattedLabel, textAlign: p, textVerticalAlign: g }), u && (v.eventData = zb.makeAxisEventDataBase(t), v.eventData.targetType = "axisLabel", v.eventData.value = n.rawLabel);
      }, this);
    }, _splitLine: function _splitLine(t, e, n, i, r) {
      var a = t.getModel("splitLine"),
          o = a.getModel("lineStyle"),
          l = o.get("color"),
          u = 0;l = l instanceof Array ? l : [l];for (var h = [], c = 0; c < n.length; c++) {
        var d = u++ % l.length;h[d] = h[d] || [], h[d].push(new Zm({ shape: mf(e, r, n[c].coord) }));
      }for (var c = 0; c < h.length; c++) {
        this.group.add(py(h[c], { style: s({ stroke: l[c % l.length] }, o.getLineStyle()), silent: !0, z: t.get("z") }));
      }
    }, _minorSplitLine: function _minorSplitLine(t, e, n, i, r) {
      if (i.length) {
        for (var a = t.getModel("minorSplitLine"), o = a.getModel("lineStyle"), s = [], l = 0; l < i.length; l++) {
          for (var u = 0; u < i[l].length; u++) {
            s.push(new Zm({ shape: mf(e, r, i[l][u].coord) }));
          }
        }this.group.add(py(s, { style: o.getLineStyle(), silent: !0, z: t.get("z") }));
      }
    }, _splitArea: function _splitArea(t, e, n, i, r) {
      if (n.length) {
        var a = t.getModel("splitArea"),
            o = a.getModel("areaStyle"),
            l = o.get("color"),
            u = 0;l = l instanceof Array ? l : [l];for (var h = [], c = Math.PI / 180, d = -n[0].coord * c, f = Math.min(r[0], r[1]), p = Math.max(r[0], r[1]), g = t.get("clockwise"), v = 1; v < n.length; v++) {
          var m = u++ % l.length;h[m] = h[m] || [], h[m].push(new Fm({ shape: { cx: e.cx, cy: e.cy, r0: f, r: p, startAngle: d, endAngle: -n[v].coord * c, clockwise: g }, silent: !0 })), d = -n[v].coord * c;
        }for (var v = 0; v < h.length; v++) {
          this.group.add(py(h[v], { style: s({ fill: l[v % l.length] }, o.getAreaStyle()), silent: !0 }));
        }
      }
    } });var HS = ["axisLine", "axisTickLabel", "axisName"],
      WS = ["splitLine", "splitArea", "minorSplitLine"];Gb.extend({ type: "radiusAxis", axisPointerClass: "PolarAxisPointer", render: function render(t) {
      if (this.group.removeAll(), t.get("show")) {
        var e = t.axis,
            n = e.polar,
            i = n.getAngleAxis(),
            r = e.getTicksCoords(),
            a = e.getMinorTicksCoords(),
            o = i.getExtent()[0],
            s = e.getExtent(),
            l = _f(n, t, o),
            u = new zb(t, l);f(HS, u.add, u), this.group.add(u.getGroup()), f(WS, function (i) {
          t.get(i + ".show") && !e.scale.isBlank() && this["_" + i](t, n, o, s, r, a);
        }, this);
      }
    }, _splitLine: function _splitLine(t, e, n, i, r) {
      var a = t.getModel("splitLine"),
          o = a.getModel("lineStyle"),
          l = o.get("color"),
          u = 0;l = l instanceof Array ? l : [l];for (var h = [], c = 0; c < r.length; c++) {
        var d = u++ % l.length;h[d] = h[d] || [], h[d].push(new zm({ shape: { cx: e.cx, cy: e.cy, r: r[c].coord } }));
      }for (var c = 0; c < h.length; c++) {
        this.group.add(py(h[c], { style: s({ stroke: l[c % l.length], fill: null }, o.getLineStyle()), silent: !0 }));
      }
    }, _minorSplitLine: function _minorSplitLine(t, e, n, i, r, a) {
      if (a.length) {
        for (var o = t.getModel("minorSplitLine"), l = o.getModel("lineStyle"), u = [], h = 0; h < a.length; h++) {
          for (var c = 0; c < a[h].length; c++) {
            u.push(new zm({ shape: { cx: e.cx, cy: e.cy, r: a[h][c].coord } }));
          }
        }this.group.add(py(u, { style: s({ fill: null }, l.getLineStyle()), silent: !0 }));
      }
    }, _splitArea: function _splitArea(t, e, n, i, r) {
      if (r.length) {
        var a = t.getModel("splitArea"),
            o = a.getModel("areaStyle"),
            l = o.get("color"),
            u = 0;l = l instanceof Array ? l : [l];for (var h = [], c = r[0].coord, d = 1; d < r.length; d++) {
          var f = u++ % l.length;h[f] = h[f] || [], h[f].push(new Fm({ shape: { cx: e.cx, cy: e.cy, r0: c, r: r[d].coord, startAngle: 0, endAngle: 2 * Math.PI }, silent: !0 })), c = r[d].coord;
        }for (var d = 0; d < h.length; d++) {
          this.group.add(py(h[d], { style: s({ fill: l[d % l.length] }, o.getAreaStyle()), silent: !0 }));
        }
      }
    } });var GS = function GS(t, e) {
    var n,
        i = [],
        r = t.seriesIndex;if (null == r || !(n = e.getSeriesByIndex(r))) return { point: [] };var a = n.getData(),
        o = or(a, t);if (null == o || 0 > o || _(o)) return { point: [] };var s = a.getItemGraphicEl(o),
        l = n.coordinateSystem;if (n.getTooltipPosition) i = n.getTooltipPosition(o) || [];else if (l && l.dataToPoint) i = l.dataToPoint(a.getValues(p(l.dimensions, function (t) {
      return a.mapDimension(t);
    }), o, !0)) || [];else if (s) {
      var u = s.getBoundingRect().clone();u.applyTransform(s.transform), i = [u.x + u.width / 2, u.y + u.height / 2];
    }return { point: i, el: s };
  },
      XS = f,
      US = x,
      YS = sr(),
      qS = function qS(t, e, n) {
    var i = t.currTrigger,
        r = [t.x, t.y],
        a = t,
        o = t.dispatchAction || y(n.dispatchAction, n),
        s = e.getComponent("axisPointer").coordSysAxesInfo;if (s) {
      kf(r) && (r = GS({ seriesIndex: a.seriesIndex, dataIndex: a.dataIndex }, e).point);var l = kf(r),
          u = a.axesInfo,
          h = s.axesInfo,
          c = "leave" === i || kf(r),
          d = {},
          f = {},
          p = { list: [], map: {} },
          g = { showPointer: US(Sf, f), showTooltip: US(Mf, p) };XS(s.coordSysMap, function (t, e) {
        var n = l || t.containPoint(r);XS(s.coordSysAxesInfo[e], function (t) {
          var e = t.axis,
              i = Cf(u, t);if (!c && n && (!u || i)) {
            var a = i && i.value;null != a || l || (a = e.pointToData(r)), null != a && wf(t, a, g, !1, d);
          }
        });
      });var v = {};return XS(h, function (t, e) {
        var n = t.linkGroup;n && !f[e] && XS(n.axesInfo, function (e, i) {
          var r = f[i];if (e !== t && r) {
            var a = r.value;n.mapper && (a = t.axis.scale.parse(n.mapper(a, Df(e), Df(t)))), v[t.key] = a;
          }
        });
      }), XS(v, function (t, e) {
        wf(h[e], t, g, !0, d);
      }), Af(f, h, d), If(p, r, t, o), Tf(h, o, n), d;
    }
  },
      jS = (Du({ type: "axisPointer", coordSysAxesInfo: null, defaultOption: { show: "auto", triggerOn: null, zlevel: 0, z: 50, type: "line", snap: !1, triggerTooltip: !0, value: null, status: null, link: [], animation: null, animationDurationUpdate: 200, lineStyle: { color: "#aaa", width: 1, type: "solid" }, shadowStyle: { color: "rgba(150,150,150,0.3)" }, label: { show: !0, formatter: null, precision: "auto", margin: 3, color: "#fff", padding: [5, 7, 5, 7], backgroundColor: "auto", borderColor: null, borderWidth: 0, shadowBlur: 3, shadowColor: "#aaa" }, handle: { show: !1, icon: "M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z", size: 45, margin: 50, color: "#333", shadowBlur: 3, shadowColor: "#aaa", shadowOffsetX: 0, shadowOffsetY: 2, throttle: 40 } } }), sr()),
      ZS = f,
      KS = ku({ type: "axisPointer", render: function render(t, e, n) {
      var i = e.getComponent("tooltip"),
          r = t.get("triggerOn") || i && i.get("triggerOn") || "mousemove|click";Pf("axisPointer", n, function (t, e, n) {
        "none" !== r && ("leave" === t || r.indexOf(t) >= 0) && n({ type: "updateAxisPointer", currTrigger: t, x: e && e.offsetX, y: e && e.offsetY });
      });
    }, remove: function remove(t, e) {
      Rf(e.getZr(), "axisPointer"), KS.superApply(this._model, "remove", arguments);
    }, dispose: function dispose(t, e) {
      Rf("axisPointer", e), KS.superApply(this._model, "dispose", arguments);
    } }),
      $S = sr(),
      QS = i,
      JS = y;Nf.prototype = { _group: null, _lastGraphicKey: null, _handle: null, _dragging: !1, _lastValue: null, _lastStatus: null, _payloadInfo: null, animationThreshold: 15, render: function render(t, e, n, i) {
      var r = e.get("value"),
          a = e.get("status");if (this._axisModel = t, this._axisPointerModel = e, this._api = n, i || this._lastValue !== r || this._lastStatus !== a) {
        this._lastValue = r, this._lastStatus = a;var o = this._group,
            s = this._handle;if (!a || "hide" === a) return o && o.hide(), void (s && s.hide());o && o.show(), s && s.show();var l = {};this.makeElOption(l, r, t, e, n);var u = l.graphicKey;u !== this._lastGraphicKey && this.clear(n), this._lastGraphicKey = u;var h = this._moveAnimation = this.determineAnimation(t, e);if (o) {
          var c = x(Ff, e, h);this.updatePointerEl(o, l, c, e), this.updateLabelEl(o, l, c, e);
        } else o = this._group = new _g(), this.createPointerEl(o, l, t, e), this.createLabelEl(o, l, t, e), n.getZr().add(o);Gf(o, e, !0), this._renderHandle(r);
      }
    }, remove: function remove(t) {
      this.clear(t);
    }, dispose: function dispose(t) {
      this.clear(t);
    }, determineAnimation: function determineAnimation(t, e) {
      var n = e.get("animation"),
          i = t.axis,
          r = "category" === i.type,
          a = e.get("snap");if (!a && !r) return !1;if ("auto" === n || null == n) {
        var o = this.animationThreshold;if (r && i.getBandWidth() > o) return !0;if (a) {
          var s = ud(t).seriesDataCount,
              l = i.getExtent();return Math.abs(l[0] - l[1]) / s > o;
        }return !1;
      }return n === !0;
    }, makeElOption: function makeElOption() {}, createPointerEl: function createPointerEl(t, e) {
      var n = e.pointer;if (n) {
        var i = $S(t).pointerEl = new yy[n.type](QS(e.pointer));t.add(i);
      }
    }, createLabelEl: function createLabelEl(t, e, n, i) {
      if (e.label) {
        var r = $S(t).labelEl = new qm(QS(e.label));t.add(r), Hf(r, i);
      }
    }, updatePointerEl: function updatePointerEl(t, e, n) {
      var i = $S(t).pointerEl;i && e.pointer && (i.setStyle(e.pointer.style), n(i, { shape: e.pointer.shape }));
    }, updateLabelEl: function updateLabelEl(t, e, n, i) {
      var r = $S(t).labelEl;r && (r.setStyle(e.label.style), n(r, { shape: e.label.shape, position: e.label.position }), Hf(r, i));
    }, _renderHandle: function _renderHandle(t) {
      if (!this._dragging && this.updateHandleTransform) {
        var e = this._axisPointerModel,
            n = this._api.getZr(),
            i = this._handle,
            r = e.getModel("handle"),
            a = e.get("status");if (!r.get("show") || !a || "hide" === a) return i && n.remove(i), void (this._handle = null);var o;this._handle || (o = !0, i = this._handle = oo(r.get("icon"), { cursor: "move", draggable: !0, onmousemove: function onmousemove(t) {
            Bp(t.event);
          }, onmousedown: JS(this._onHandleDragMove, this, 0, 0), drift: JS(this._onHandleDragMove, this), ondragend: JS(this._onHandleDragEnd, this) }), n.add(i)), Gf(i, e, !1);var s = ["color", "borderColor", "borderWidth", "opacity", "shadowColor", "shadowBlur", "shadowOffsetX", "shadowOffsetY"];i.setStyle(r.getItemStyle(null, s));var l = r.get("size");_(l) || (l = [l, l]), i.attr("scale", [l[0] / 2, l[1] / 2]), vl(this, "_doDispatchAxisPointer", r.get("throttle") || 0, "fixRate"), this._moveHandleToValue(t, o);
      }
    }, _moveHandleToValue: function _moveHandleToValue(t, e) {
      Ff(this._axisPointerModel, !e && this._moveAnimation, this._handle, Wf(this.getHandleTransform(t, this._axisModel, this._axisPointerModel)));
    }, _onHandleDragMove: function _onHandleDragMove(t, e) {
      var n = this._handle;if (n) {
        this._dragging = !0;var i = this.updateHandleTransform(Wf(n), [t, e], this._axisModel, this._axisPointerModel);this._payloadInfo = i, n.stopAnimation(), n.attr(Wf(i)), $S(n).lastProp = null, this._doDispatchAxisPointer();
      }
    }, _doDispatchAxisPointer: function _doDispatchAxisPointer() {
      var t = this._handle;if (t) {
        var e = this._payloadInfo,
            n = this._axisModel;this._api.dispatchAction({ type: "updateAxisPointer", x: e.cursorPoint[0], y: e.cursorPoint[1], tooltipOption: e.tooltipOption, axesInfo: [{ axisDim: n.axis.dim, axisIndex: n.componentIndex }] });
      }
    }, _onHandleDragEnd: function _onHandleDragEnd() {
      this._dragging = !1;
      var t = this._handle;if (t) {
        var e = this._axisPointerModel.get("value");this._moveHandleToValue(e), this._api.dispatchAction({ type: "hideTip" });
      }
    }, getHandleTransform: null, updateHandleTransform: null, clear: function clear(t) {
      this._lastValue = null, this._lastStatus = null;var e = t.getZr(),
          n = this._group,
          i = this._handle;e && n && (this._lastGraphicKey = null, n && e.remove(n), i && e.remove(i), this._group = null, this._handle = null, this._payloadInfo = null);
    }, doClear: function doClear() {}, buildLabel: function buildLabel(t, e, n) {
      return n = n || 0, { x: t[n], y: t[1 - n], width: e[n], height: e[1 - n] };
    } }, Nf.prototype.constructor = Nf, gr(Nf);var tM = Nf.extend({ makeElOption: function makeElOption(t, e, n, i, r) {
      var a = n.axis,
          o = a.grid,
          s = i.get("type"),
          l = Jf(o, a).getOtherAxis(a).getGlobalExtent(),
          u = a.toGlobalCoord(a.dataToCoord(e, !0));if (s && "none" !== s) {
        var h = Xf(i),
            c = eM[s](a, u, l);c.style = h, t.graphicKey = c.type, t.pointer = c;
      }var d = gd(o.model, n);Zf(e, t, d, n, i, r);
    }, getHandleTransform: function getHandleTransform(t, e, n) {
      var i = gd(e.axis.grid.model, e, { labelInside: !1 });return i.labelMargin = n.get("handle.margin"), { position: jf(e.axis, t, i), rotation: i.rotation + (i.labelDirection < 0 ? Math.PI : 0) };
    }, updateHandleTransform: function updateHandleTransform(t, e, n) {
      var i = n.axis,
          r = i.grid,
          a = i.getGlobalExtent(!0),
          o = Jf(r, i).getOtherAxis(i).getGlobalExtent(),
          s = "x" === i.dim ? 0 : 1,
          l = t.position;l[s] += e[s], l[s] = Math.min(a[1], l[s]), l[s] = Math.max(a[0], l[s]);var u = (o[1] + o[0]) / 2,
          h = [u, u];h[s] = l[s];var c = [{ verticalAlign: "middle" }, { align: "center" }];return { position: l, rotation: t.rotation, cursorPoint: h, tooltipOption: c[s] };
    } }),
      eM = { line: function line(t, e, n) {
      var i = Kf([e, n[0]], [e, n[1]], tp(t));return { type: "Line", subPixelOptimize: !0, shape: i };
    }, shadow: function shadow(t, e, n) {
      var i = Math.max(1, t.getBandWidth()),
          r = n[1] - n[0];return { type: "Rect", shape: $f([e - i / 2, n[0]], [i, r], tp(t)) };
    } };Gb.registerAxisPointerClass("CartesianAxisPointer", tM), xu(function (t) {
    if (t) {
      (!t.axisPointer || 0 === t.axisPointer.length) && (t.axisPointer = {});var e = t.axisPointer.link;e && !_(e) && (t.axisPointer.link = [e]);
    }
  }), _u(E_.PROCESSOR.STATISTIC, function (t, e) {
    t.getComponent("axisPointer").coordSysAxesInfo = nd(t, e);
  }), bu({ type: "updateAxisPointer", event: "updateAxisPointer", update: ":updateAxisPointer" }, qS);var nM = Nf.extend({ makeElOption: function makeElOption(t, e, n, i, r) {
      var a = n.axis;"angle" === a.dim && (this.animationThreshold = Math.PI / 18);var o,
          s = a.polar,
          l = s.getOtherAxis(a),
          u = l.getExtent();o = a["dataTo" + Xo(a.dim)](e);var h = i.get("type");if (h && "none" !== h) {
        var c = Xf(i),
            d = iM[h](a, s, o, u, c);d.style = c, t.graphicKey = d.type, t.pointer = d;
      }var f = i.get("label.margin"),
          p = ep(e, n, i, s, f);Uf(t, n, i, r, p);
    } }),
      iM = { line: function line(t, e, n, i) {
      return "angle" === t.dim ? { type: "Line", shape: Kf(e.coordToPoint([i[0], n]), e.coordToPoint([i[1], n])) } : { type: "Circle", shape: { cx: e.cx, cy: e.cy, r: n } };
    }, shadow: function shadow(t, e, n, i) {
      var r = Math.max(1, t.getBandWidth()),
          a = Math.PI / 180;return "angle" === t.dim ? { type: "Sector", shape: Qf(e.cx, e.cy, i[0], i[1], (-n - r / 2) * a, (-n + r / 2) * a) } : { type: "Sector", shape: Qf(e.cx, e.cy, n - r / 2, n + r / 2, 0, 2 * Math.PI) };
    } };Gb.registerAxisPointerClass("PolarAxisPointer", nM), Au(x(uf, "bar")), ku({ type: "polar" }), Du({ type: "title", layoutMode: { type: "box", ignoreSize: !0 }, defaultOption: { zlevel: 0, z: 6, show: !0, text: "", target: "blank", subtext: "", subtarget: "blank", left: 0, top: 0, backgroundColor: "rgba(0,0,0,0)", borderColor: "#ccc", borderWidth: 0, padding: 5, itemGap: 10, textStyle: { fontSize: 18, fontWeight: "bolder", color: "#333" }, subtextStyle: { color: "#aaa" } } }), ku({ type: "title", render: function render(t, e, n) {
      if (this.group.removeAll(), t.get("show")) {
        var i = this.group,
            r = t.getModel("textStyle"),
            a = t.getModel("subtextStyle"),
            o = t.get("textAlign"),
            s = D(t.get("textBaseline"), t.get("textVerticalAlign")),
            l = new Bm({ style: Wa({}, r, { text: t.get("text"), textFill: r.getTextColor() }, { disableBox: !0 }), z2: 10 }),
            u = l.getBoundingRect(),
            h = t.get("subtext"),
            c = new Bm({ style: Wa({}, a, { text: h, textFill: a.getTextColor(), y: u.height + t.get("itemGap"), textVerticalAlign: "top" }, { disableBox: !0 }), z2: 10 }),
            d = t.get("link"),
            f = t.get("sublink"),
            p = t.get("triggerEvent", !0);l.silent = !d && !p, c.silent = !f && !p, d && l.on("click", function () {
          qo(d, "_" + t.get("target"));
        }), f && c.on("click", function () {
          qo(f, "_" + t.get("subtarget"));
        }), l.eventData = c.eventData = p ? { componentType: "title", componentIndex: t.componentIndex } : null, i.add(l), h && i.add(c);var g = i.getBoundingRect(),
            v = t.getBoxLayoutParams();v.width = g.width, v.height = g.height;var m = Zo(v, { width: n.getWidth(), height: n.getHeight() }, t.get("padding"));o || (o = t.get("left") || t.get("right"), "middle" === o && (o = "center"), "right" === o ? m.x += m.width : "center" === o && (m.x += m.width / 2)), s || (s = t.get("top") || t.get("bottom"), "center" === s && (s = "middle"), "bottom" === s ? m.y += m.height : "middle" === s && (m.y += m.height / 2), s = s || "top"), i.attr("position", [m.x, m.y]);var y = { textAlign: o, textVerticalAlign: s };l.setStyle(y), c.setStyle(y), g = i.getBoundingRect();var x = m.margin,
            _ = t.getItemStyle(["color", "opacity"]);_.fill = t.get("backgroundColor");var w = new qm({ shape: { x: g.x - x[3], y: g.y - x[0], width: g.width + x[1] + x[3], height: g.height + x[0] + x[2], r: t.get("borderRadius") }, style: _, subPixelOptimize: !0, silent: !0 });i.add(w);
      }
    } }), t.version = __, t.dependencies = w_, t.PRIORITY = E_, t.init = du, t.connect = fu, t.disConnect = pu, t.disconnect = tw, t.dispose = gu, t.getInstanceByDom = vu, t.getInstanceById = mu, t.registerTheme = yu, t.registerPreprocessor = xu, t.registerProcessor = _u, t.registerPostUpdate = wu, t.registerAction = bu, t.registerCoordinateSystem = Su, t.getCoordinateSystemDimensions = Mu, t.registerLayout = Au, t.registerVisual = Iu, t.registerLoading = Cu, t.extendComponentModel = Du, t.extendComponentView = ku, t.extendSeriesModel = Pu, t.extendChartView = Lu, t.setCanvasCreator = Ou, t.registerMap = Eu, t.getMap = Bu, t.dataTool = ew, t.zrender = yv, t.number = Dy, t.format = zy, t.throttle = gl, t.helper = ib, t.matrix = Wp, t.vector = Tp, t.color = sg, t.parseGeoJSON = ab, t.parseGeoJson = ub, t.util = hb, t.graphic = cb, t.List = fw, t.Model = co, t.Axis = lb, t.env = sp;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,