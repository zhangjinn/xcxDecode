{"remainingRequest":"/Users/jin/Desktop/work-item/git-pro/AddrDecode/node_modules/babel-loader/lib/index.js!/Users/jin/Desktop/work-item/git-pro/AddrDecode/src/views/addressResolution/parse/parse-area.js","dependencies":[{"path":"/Users/jin/Desktop/work-item/git-pro/AddrDecode/src/views/addressResolution/parse/parse-area.js","mtime":1652109325319},{"path":"/Users/jin/Desktop/work-item/git-pro/AddrDecode/babel.config.js","mtime":1652104655775},{"path":"/Users/jin/Desktop/work-item/git-pro/AddrDecode/node_modules/cache-loader/dist/cjs.js","mtime":1654421629883},{"path":"/Users/jin/Desktop/work-item/git-pro/AddrDecode/node_modules/babel-loader/lib/index.js","mtime":1654421630639}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["AREA","Utils","ProvinceKeys","CityKeys","AreaKeys","StreetKeys","CityStreets","ParseArea","address","isInit","init","parse","parseAll","results","res","parseByProvince","unshift","__parse","parseByCity","parseByArea","length","result","_address","province","includes","replace","city","area","sort","a","b","__type","name","code","province_list","ProvinceShort","reduce","v","key","city_list","CityShort","area_list","AreaShort","indexOf","street_list","street","StreetShort","cityCode","slice","addressBase","details","index","shortProvince","provinceLength","substr","trim","charAt","__address","parse_city_by_province","test","regExp","RegExp","parse_area_by_city","parse_area_by_province","streets","streetCode","streetName","streetShotName","areaCode","cityList","getTargetAreaListByCode","_result","isShort","shortCity","cityLength","some","areaList","shortArea","shortIndexOf","_index","matchName","areaLength","console","log","leftAddress","_provinceName","_cityName"],"sources":["/Users/jin/Desktop/work-item/git-pro/AddrDecode/src/views/addressResolution/parse/parse-area.js"],"sourcesContent":["/**\n * address-parse\n * MIT License\n * By www.asseek.com\n */\nimport AREA from '../area'\nimport Utils from './utils'\n\nconst ProvinceKeys = [\n  '特别行政区', '古自治区', '维吾尔自治区', '壮族自治区', '回族自治区', '自治区', '省省直辖', '省', '市'\n]\n\nconst CityKeys = [\n  '布依族苗族自治州', '苗族侗族自治州', '藏族羌族自治州', '哈尼族彝族自治州', '壮族苗族自治州', '傣族景颇族自治州', '蒙古族藏族自治州',\n  '傣族自治州', '白族自治州', '藏族自治州', '彝族自治州', '回族自治州', '蒙古自治州', '朝鲜族自治州', '地区', '哈萨克自治州', '盟', '市'\n]\n\nconst AreaKeys = [\n  '满族自治县', '满族蒙古族自治县', '蒙古族自治县', '朝鲜族自治县',\n  '回族彝族自治县', '彝族回族苗族自治县', '彝族苗族自治县', '土家族苗族自治县', '布依族苗族自治县', '苗族布依族自治县',\n  '彝族傣族自治县', '傣族彝族自治县', '仡佬族苗族自治县', '黎族苗族自治县', '苗族侗族自治县', '哈尼族彝族傣族自治县', '哈尼族彝族自治县',\n  '彝族哈尼族拉祜族自治县', '傣族拉祜族佤族自治县', '傣族佤族自治县', '拉祜族佤族布朗族傣族自治县', '苗族瑶族傣族自治县', '彝族回族自治县',\n  '独龙族怒族自治县', '保安族东乡族撒拉族自治县', '回族土族自治县', '撒拉族自治县', '哈萨克自治县', '塔吉克自治县',\n  '回族自治县', '畲族自治县', '土家族自治县', '布依族自治县', '苗族自治县', '瑶族自治县', '侗族自治县', '水族自治县', '傈僳族自治县',\n  '仫佬族自治县', '毛南族自治县', '黎族自治县', '羌族自治县', '彝族自治县', '藏族自治县', '纳西族自治县', '裕固族自治县', '哈萨克族自治县',\n  '哈尼族自治县', '拉祜族自治县', '佤族自治县', '各族自治县',\n  '左旗', '右旗', '中旗', '后旗', '联合旗', '自治旗', '旗', '自治县',\n  '街道办事处',\n  '区', '县', '市'\n]\nconst StreetKeys = [\n  '街道', '镇', '乡'\n]\nconst CityStreets = {}\n\nclass ParseArea {\n  static isInit = false;\n\n  static ProvinceShort = {};\n\n  static CityShort = {};\n\n  static AreaShort = {};\n\n  static StreetShort = {};\n\n  static init () {\n    // console.log('init')\n    for (const code in AREA.province_list) {\n      const province = AREA.province_list[code]\n      ParseArea.ProvinceShort[code] = ProvinceKeys.reduce((v, key) => v.replace(key, ''), province)\n    }\n\n    for (const code in AREA.city_list) {\n      const city = AREA.city_list[code]\n      if (city.length > 2) {\n        ParseArea.CityShort[code] = CityKeys.reduce((v, key) => v.replace(key, ''), city)\n      }\n    }\n    for (const code in AREA.area_list) {\n      let area = AREA.area_list[code]\n      if (area === '雨花台区') area = '雨花区'\n      if (area.length > 2) {\n        ParseArea.AreaShort[code] = AreaKeys.reduce((v, key) => {\n          if (v.indexOf(key) > 1) v = v.replace(key, '')\n          return v\n        }, area)\n      }\n    }\n\n    for (const code in AREA.street_list) {\n      const street = AREA.street_list[code]\n      if (street.length > 2) {\n        ParseArea.StreetShort[code] = StreetKeys.reduce((v, key) => {\n          if (v.indexOf(key) > 1) v = v.replace(key, '')\n          return v\n        }, street)\n      }\n      const cityCode = `${code.slice(0, 4)}00000000`\n      if (!CityStreets[cityCode]) {\n        CityStreets[cityCode] = {}\n      }\n      CityStreets[cityCode][code] = street\n    }\n    ParseArea.isInit = true\n    // console.log('===================== init finish =====================')\n  }\n\n  constructor (address) {\n    if (!ParseArea.isInit) {\n      ParseArea.init()\n    }\n\n    if (address) {\n      return this.parse(address)\n    }\n  }\n\n  /**\n   * 开始解析\n   * @param address string\n   * @param parseAll 是否执行全部解析 默认识别到city终止\n   * @returns {Array}\n   */\n  parse (address, parseAll) {\n    this.results = []\n\n    // 正向解析\n    const res = ParseArea.parseByProvince(address)\n    this.results.unshift(...res)\n    if (parseAll || !this.results[0] || !this.results[0].__parse) {\n      // 逆向城市解析  通过所有CityShort匹配\n      this.results.unshift(...ParseArea.parseByCity(address))\n      if (parseAll || !this.results[0] || !this.results[0].__parse) {\n        // 逆向地区解析   通过所有AreaShort匹配\n        this.results.unshift(...ParseArea.parseByArea(address))\n      }\n    }\n\n    // __parse结果改为数值类型\n    if (this.results.length > 1) {\n      for (const result of this.results) {\n        let _address = address\n        result.__parse = +result.__parse\n        if (result.__parse && result.province && _address.includes(result.province)) {\n          _address = _address.replace(result.province, '')\n          result.__parse += 1\n          if (result.city && _address.includes(result.city)) {\n            _address = _address.replace(result.city, '')\n            result.__parse += 1\n            if (result.area && _address.includes(result.area)) {\n              result.__parse += 1\n            }\n          }\n        }\n      }\n    }\n\n    // 可信度排序\n    this.results.sort((a, b) =>\n      a.__parse && !b.__parse ? -1\n        : !a.__parse && b.__parse ? 1\n          : a.__parse && b.__parse && a.__parse > b.__parse ? -1\n            : a.__parse && b.__parse && a.__parse < b.__parse ? 1\n              : a.__parse && a.__type === 'parseByProvince' ? -1\n                : b.__parse && b.__type === 'parseByProvince' ? 1\n                  : a.name.length > b.name.length ? 1 : a.name.length < b.name.length ? -1 : 0\n    )\n\n    return this.results\n  }\n\n  /**\n   * 1.1 提取省份\n   */\n  static parseByProvince (addressBase) {\n    const province_list = AREA.province_list\n    // console.log(addressBase)\n    const results = []\n    const result = {\n      province: '',\n      city: '',\n      area: '',\n      details: '',\n      name: '',\n      code: '',\n      __type: 'parseByProvince',\n      __parse: false\n    }\n    let address = addressBase\n    for (const code in province_list) {\n      const province = province_list[code]\n      let index = address.indexOf(province)\n      const shortProvince = index > -1 ? '' : ParseArea.ProvinceShort[code]\n      const provinceLength = shortProvince ? shortProvince.length : province.length\n      if (shortProvince) {\n        index = address.indexOf(shortProvince)\n      }\n      if (index > -1 && index < 6) {\n        // 如果省份不是第一位 在省份之前的字段识别为名称\n        if (index > 0) {\n          result.name = address.substr(0, index).trim()\n          address = address.substr(index).trim()\n        }\n        result.province = province\n        result.code = code\n        const _address = address.substr(provinceLength)\n        if (_address.charAt(0) !== '市' || _address.indexOf(province) > -1) {\n          address = _address\n        }\n        // 如果是用短名匹配的 要替换省关键字\n        if (shortProvince) {\n          for (const key of ProvinceKeys) {\n            if (address.indexOf(ProvinceKeys[key]) === 0) {\n              address = address.substr(ProvinceKeys[key].length)\n            }\n          }\n        }\n        let __address = ParseArea.parse_city_by_province(address, result)\n        if (!result.city && result.code && /00000000$/.test(result.code)) {\n          // 只识别到了省 遍历市\n          const regExp = new RegExp(`${result.code.slice(0, 2)}\\\\d{2}00000000`)\n          // console.log(AREA.city_list)\n          for (const code in AREA.city_list) {\n            if (regExp.test(code)) {\n              result.code = code\n              result.city = AREA.city_list[code]\n              // console.log(code, result)\n              __address = ParseArea.parse_area_by_city(address, result)\n              if (result.area) {\n                // console.log(result)\n                break\n              }\n            }\n          }\n        } else if (!result.city) {\n          __address = ParseArea.parse_area_by_province(address, result)\n        }\n        // console.log(result)\n        // console.log(result,CityStreets['441500000000'])\n        if (!result.area && result.city && result.code) {\n          const cityCode = `${result.code.slice(0, 6)}000000`\n          // console.log(cityCode,CityStreets)\n          const streets = CityStreets[cityCode]\n          // console.log('streets',cityCode, streets)\n          for (const streetCode in streets) {\n            const streetName = AREA.street_list[streetCode]\n            const streetShotName = ParseArea.StreetShort[streetCode]\n            // console.log(streetCode,streetShotName)\n            if (address.indexOf(streetName) > -1 || address.indexOf(streetShotName) > -1) {\n              const areaCode = `${streetCode.slice(0, 6)}000000`\n              const area = AREA.area_list[areaCode]\n              // console.log('areaCode',areaCode,area)\n              if (area) {\n                result.area = area\n                result.code = areaCode\n                break\n              }\n            }\n          }\n        }\n      }\n    }\n    if (result.code) {\n      results.unshift({ ...result, details: address.trim() })\n    }\n    return results\n  }\n\n  /**\n   * 1.2.提取城市\n   * @returns {boolean}\n   */\n  static parse_city_by_province (address, result) {\n    const cityList = Utils.getTargetAreaListByCode('city', result.code)\n    // console.log('city',cityList,result.code)\n\n    const _result = {\n      city: '',\n      code: '',\n      index: -1,\n      address: '',\n      isShort: false\n    }\n    for (const city of cityList) {\n      let index = address.indexOf(city.name)\n      const shortCity = index > -1 ? '' : ParseArea.CityShort[city.code]\n      const cityLength = shortCity ? shortCity.length : city.name.length\n      if (shortCity) {\n        index = address.indexOf(shortCity)\n      }\n      if (index > -1 && (_result.index === -1 || _result.index > index || (!shortCity && _result.isShort))) {\n        _result.city = city.name\n        _result.code = city.code\n        _result.index = index\n        _result.address = address.substr(index + cityLength)\n        _result.isShort = !!shortCity\n        // 如果是用短名匹配的 要替换市关键字\n        if (shortCity) {\n          for (const key of CityKeys) {\n            if (address.indexOf(key) === 0) {\n              // 排除几个会导致异常的解析\n              if (key !== '市' && !['市北区', '市南区', '市中区', '市辖区'].some(v => address.indexOf(v) === 0)) {\n                address = address.substr(key.length)\n              }\n            }\n          }\n        }\n      }\n      // console.log('city', city)\n      if (index > -1 && index < 3) {\n        result.city = city.name\n        result.code = city.code\n        _result.address = address.substr(index + cityLength)\n        // 如果是用短名匹配的 要替换市关键字\n        if (shortCity) {\n          for (const key of CityKeys) {\n            if (_result.address.indexOf(key) === 0) {\n              // 排除几个会导致异常的解析\n              if (key !== '市' && !['市北区', '市南区', '市中区', '市辖区'].some(v => _result.address.indexOf(v) === 0)) {\n                _result.address = _result.address.substr(key.length)\n              }\n            }\n          }\n        }\n      }\n    }\n    if (_result.index > -1) {\n      result.city = _result.city\n      result.code = _result.code\n      address = ParseArea.parse_area_by_city(_result.address, result)\n    }\n    // console.log('address', address,result)\n    return address\n  }\n\n  /**\n   * 1.3.,2.2 已匹配城市的地址 提取地区\n   * @param address string\n   * @param result object\n   * @returns {string}\n   */\n  static parse_area_by_city (address, result) {\n    // console.log(result, address)\n    const areaList = Utils.getTargetAreaListByCode('area', result.code)\n    // console.log('areaList',result.code, areaList)\n    const _result = {\n      area: '',\n      code: '',\n      index: -1,\n      address: '',\n      isShort: false\n    }\n    // console.log(areaList)\n    for (const area of areaList) {\n      let index = address.indexOf(area.name)\n      // if(result.code == 441900000000) {\n      // console.log(address, area)\n      // }\n      let shortArea = index > -1 ? '' : ParseArea.AreaShort[area.code]\n      if (shortArea) {\n        const { index: _index, matchName } = Utils.shortIndexOf(address, shortArea, area.name)\n        index = _index\n        shortArea = matchName\n      }\n      const areaLength = shortArea ? shortArea.length : area.name.length\n      if (index > -1 && (_result.index === -1 || _result.index > index || (!shortArea && _result.isShort))) {\n        _result.area = area.name\n        _result.code = area.code\n        _result.index = index\n        _result.address = address.substr(index + areaLength)\n        _result.isShort = !!shortArea\n        // 如果是用短名匹配的 要替换市关键字\n        if (shortArea) {\n          for (const key of AreaKeys) {\n            if (_result.address.indexOf(key) === 0) {\n              _result.address = _result.address.substr(key.length)\n            }\n          }\n        }\n      }\n    }\n    if (_result.index > -1) {\n      result.area = _result.area\n      result.code = _result.code\n      address = _result.address\n    }\n    return address\n  }\n\n  /**\n   * 1.4.提取省份但没有提取到城市的地址尝试通过省份下地区匹配\n   */\n  static parse_area_by_province (address, result) {\n    const areaList = Utils.getTargetAreaListByCode('area', result.code)\n    // console.log(result, areaList)\n    for (const area of areaList) {\n      let index = address.indexOf(area.name)\n      let shortArea = index > -1 ? '' : ParseArea.AreaShort[area.code]\n      if (shortArea) {\n        const { index: _index, matchName } = Utils.shortIndexOf(address, shortArea, area.name)\n        index = _index\n        shortArea = matchName\n      }\n      const areaLength = shortArea ? shortArea.length : area.name.length\n\n      if (index > -1 && index < 6) {\n        const [city] = Utils.getTargetAreaListByCode('city', area.code, true)\n        result.city = city.name\n        result.area = area.name\n        result.code = area.code\n        address = address.substr(index + areaLength)\n        // 如果是用短名匹配的 要替换地区关键字\n        if (shortArea) {\n          for (const key of AreaKeys) {\n            if (address.indexOf(key) === 0) {\n              address = address.substr(key.length)\n            }\n          }\n        }\n        break\n      }\n    }\n    return address\n  }\n\n  static parse_street_by_city (address, result) {\n\n  }\n\n  /**\n   * 2.1 通过城市识别地址\n   * @param addressBase string\n   * @returns {Array}\n   */\n  static parseByCity (addressBase) {\n    const city_list = AREA.city_list\n    const results = []\n    const result = {\n      province: '',\n      city: '',\n      area: '',\n      details: '',\n      name: '',\n      code: '',\n      __type: 'parseByCity',\n      __parse: false\n    }\n    let address = addressBase\n    for (const code in city_list) {\n      const city = city_list[code]\n      if (city.length < 2) { console.log(city); break }\n      let index = address.indexOf(city)\n      const shortCity = index > -1 ? '' : ParseArea.CityShort[code]\n      const cityLength = shortCity ? shortCity.length : city.length\n      if (shortCity) {\n        index = address.indexOf(shortCity)\n      }\n      if (index > -1) {\n        const [province] = Utils.getTargetAreaListByCode('province', code, true)\n        result.province = province.name\n        result.city = city\n        result.code = code\n        // 左侧排除省份名剩下的内容识别为姓名\n        let leftAddress = address.substr(0, index)\n        let _provinceName = ''\n        if (leftAddress) {\n          _provinceName = province.name\n          let _index = leftAddress.indexOf(_provinceName)\n          if (_index === -1) {\n            _provinceName = ParseArea.ProvinceShort[province.code]\n            _index = leftAddress.indexOf(_provinceName)\n            if (_index === -1) _provinceName = ''\n          }\n          if (_provinceName) {\n            leftAddress = leftAddress.replace(new RegExp(_provinceName, 'g'), '')\n          }\n          if (leftAddress) {\n            result.name = leftAddress\n          }\n        }\n\n        address = address.substr(index + cityLength)\n        address = ParseArea.parse_area_by_city(address, result)\n        if (_provinceName || result.area) {\n          result.__parse = true\n          break\n        } else {\n          // 如果没有识别到省份和地区 缓存本次结果，并重置数据\n          results.unshift({ ...result, details: address.trim() })\n          result.name = ''\n          result.city = ''\n          result.province = ''\n          result.code = ''\n          address = addressBase\n        }\n      }\n    }\n    if (result.code) {\n      results.unshift({ ...result, details: address.trim() })\n    }\n    return results\n  }\n\n  /**\n   * 3 通过地区识别地址\n   * @returns {Array}\n   */\n  static parseByArea (addressBase) {\n    const area_list = AREA.area_list\n    const results = []\n    const result = {\n      province: '',\n      city: '',\n      area: '',\n      details: '',\n      name: '',\n      code: '',\n      __type: 'parseByArea',\n      __parse: false\n    }\n    let address = addressBase\n    for (const code in area_list) {\n      const area = area_list[code]\n      if (area.length < 2) break\n      let index = address.indexOf(area)\n      let shortArea = index > -1 ? '' : ParseArea.AreaShort[code]\n      if (shortArea) {\n        const { index: _index, matchName } = Utils.shortIndexOf(address, shortArea, area)\n        index = _index\n        shortArea = matchName\n      }\n      const areaLength = shortArea ? shortArea.length : area.length\n      if (index > -1) {\n        const [province, city] = Utils.getTargetAreaListByCode('province', code, true)\n        result.province = province.name\n        result.city = city.name\n        result.area = area\n        result.code = code\n        // 左侧排除省份城市名剩下的内容识别为姓名\n        let leftAddress = address.substr(0, index)\n        let _provinceName = ''; let _cityName = ''\n        if (leftAddress) {\n          _provinceName = province.name\n          let _index = leftAddress.indexOf(_provinceName)\n          if (_index === -1) {\n            _provinceName = ParseArea.ProvinceShort[province.code]\n            _index = leftAddress.indexOf(_provinceName)\n            if (_index === -1) _provinceName = ''\n          }\n          if (_provinceName) {\n            leftAddress = leftAddress.replace(new RegExp(_provinceName, 'g'), '')\n          }\n\n          _cityName = city.name\n          _index = leftAddress.indexOf(_cityName)\n          if (_index === -1) {\n            _cityName = ParseArea.CityShort[city.code]\n            _index = leftAddress.indexOf(_cityName)\n            if (_index === -1) _cityName = ''\n          }\n          if (_cityName) {\n            leftAddress = leftAddress.replace(new RegExp(_cityName, 'g'), '')\n          }\n          if (leftAddress) {\n            result.name = leftAddress\n          }\n        }\n        address = address.substr(index + areaLength)\n\n        if (_provinceName || _cityName) {\n          result.__parse = true\n          break\n        } else {\n          // 如果没有识别到省份和地区 缓存本次结果，并重置数据\n          results.unshift({ ...result, details: address.trim() })\n          result.name = ''\n          result.city = ''\n          result.area = ''\n          result.province = ''\n          result.code = ''\n          address = addressBase\n        }\n      }\n    }\n    if (result.code) {\n      results.unshift({ ...result, details: address.trim() })\n    }\n    return results\n  }\n}\n\nexport default ParseArea\n"],"mappings":"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"}]}